/*
 * @namespace Browser
 *
 * A namespace with static properties for browser/feature detection
 *
 * Based on Leaflet's (https://leafletjs.com/) Browser object
 *
 */
import { getUrlParam } from './util';

var style = document.documentElement.style;

// @property edge: Boolean; `true` for the Edge web browser.
export var edge = 'msLaunchUri' in navigator && !('documentMode' in document);

// @property webkit: Boolean;
// `true` for webkit-based browsers like Chrome and Safari (including mobile versions).
export var webkit = userAgentContains('webkit');

// @property android: Boolean
// `true` for any browser running on an Android platform.
export var android = userAgentContains('android');

// @property opera: Boolean; `true` for the Opera browser
export var opera = !!window.opera;

// @property chrome: Boolean; `true` for the Chrome browser.
export var chrome = userAgentContains('chrome');

// @property gecko: Boolean; `true` for gecko-based browsers like Firefox.
export var gecko = userAgentContains('gecko') && !webkit && !opera;

// @property safari: Boolean; `true` for the Safari browser.
export var safari = !chrome && userAgentContains('safari');

export var ipad =
    userAgentContains('ipad') || (userAgentContains('mac os') && userAgentContains('mobile')); //to handle agent for wkwebview

export var iphone = userAgentContains('iphone');

export var apple = safari || ipad || iphone;

export var phantom = userAgentContains('phantom');

// @property opera12: Boolean
// `true` for the Opera browser supporting CSS transforms (version 12 or later).
export var opera12 = 'OTransition' in style;

// @property win: Boolean; `true` when the browser is running in a Windows platform
export var win = navigator.platform.startsWith('Win');

// @property webkit3d: Boolean; `true` for webkit-based browsers supporting CSS transforms.
export var webkit3d = 'WebKitCSSMatrix' in window && 'm11' in new window.WebKitCSSMatrix();

// @property gecko3d: Boolean; `true` for gecko-based browsers supporting CSS transforms.
export var gecko3d = 'MozPerspective' in style;

// @property any3d: Boolean
// `true` for all browsers supporting CSS transforms.
export var any3d = !window.L_DISABLE_3D && (webkit3d || gecko3d) && !opera12 && !phantom;

// @property mobile: Boolean; `true` for all browsers running in a mobile device.
export var mobile = typeof orientation !== 'undefined' || userAgentContains('mobile');

// @property mobileWebkit: Boolean; `true` for all webkit-based browsers in a mobile device.
export var mobileWebkit = mobile && webkit;

// @property mobileWebkit3d: Boolean
// `true` for all webkit-based browsers in a mobile device supporting CSS transforms.
export var mobileWebkit3d = mobile && webkit3d;

// @property msPointer: Boolean
// `true` for browsers implementing the Microsoft touch events model (notably IE10).
export var msPointer = !window.PointerEvent && window.MSPointerEvent;

// @property pointer: Boolean
// `true` for all browsers supporting [pointer events](https://msdn.microsoft.com/en-us/library/dn433244%28v=vs.85%29.aspx).
export var pointer = !!(window.PointerEvent || msPointer);

// @property touch: Boolean
// `true` for all browsers supporting [touch events](https://developer.mozilla.org/docs/Web/API/Touch_events).
// This does not necessarily mean that the browser is running in a computer with
// a touchscreen, it only means that the browser is capable of understanding
// touch events.
export var touch =
    !window.L_NO_TOUCH &&
    (pointer ||
        'ontouchstart' in window ||
        (window.DocumentTouch && document instanceof window.DocumentTouch));

// @property mobileOpera: Boolean; `true` for the Opera browser in a mobile device.
export var mobileOpera = mobile && opera;

// @property mobileGecko: Boolean
// `true` for gecko-based browsers running in a mobile device.
export var mobileGecko = mobile && gecko;

// @property retina: Boolean
// `true` for browsers on a high-resolution "retina" screen or on any screen when browser's display zoom is more than 100%.
export var retina =
    (window.devicePixelRatio || window.screen.deviceXDPI / window.screen.logicalXDPI) > 1;

// @property passiveEvents: Boolean
// `true` for browsers that support passive events.
export var passiveEvents = function () {
    var supportsPassiveOption = false;
    try {
        var opts = Object.defineProperty({}, 'passive', {
            get: function () {
                supportsPassiveOption = true;
                return undefined;
            }
        });
        window.addEventListener('testPassiveEventSupport', falseFn, opts);
        window.removeEventListener('testPassiveEventSupport', falseFn, opts);
    } catch (e) {
        // Errors can safely be ignored since this is only a browser support test.
    }
    return supportsPassiveOption;
};

// @property canvas: Boolean
// `true` when the browser supports [`<canvas>`](https://developer.mozilla.org/docs/Web/API/Canvas_API).
export var canvas = (function () {
    return !!document.createElement('canvas').getContext;
})();

// @property svg: Boolean
// `true` when the browser supports [SVG](https://developer.mozilla.org/docs/Web/SVG).
export var svg = !!(document.createElementNS && svgCreate('svg').createSVGRect);

// @property vml: Boolean
// `true` if the browser supports [VML](https://en.wikipedia.org/wiki/Vector_Markup_Language).
export var vml =
    !svg &&
    (function () {
        try {
            var div = document.createElement('div');
            div.innerHTML = '<v:shape adj="1"/>';

            var shape = div.firstChild;
            shape.style.behavior = 'url(#default#VML)';

            return shape && typeof shape.adj === 'object';
        } catch (e) {
            return false;
        }
    })();

// @property devicePixelRatio: Number
// manipulated devicePixelRatio. Limited to a maximum pixel ratio of 2.
// A greater pixel ratio (3 in iPhone 13 Pro Max), if used by OpenLayers' Map would generate
// large canvas memory and cause the application to crash, particularly on WKWebView which
// imposes stricter memory restrictions.
// iPad device pixel ratio is 2 and is well tested, so is safe to use as max.
export var devicePixelRatio = window.devicePixelRatio > 2 ? 2 : window.devicePixelRatio;

// @function create(name: String): SVGElement
// Returns a instance of [SVGElement](https://developer.mozilla.org/docs/Web/API/SVGElement),
// corresponding to the class name passed. For example, using 'line' will return
// an instance of [SVGLineElement](https://developer.mozilla.org/docs/Web/API/SVGLineElement).
function svgCreate(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}

// @function falseFn(): Function
// Returns a function which always returns `false`.
function falseFn() {
    return false;
}

function userAgentContains(str) {
    return navigator.userAgent.toLowerCase().includes(str);
}

const touchParam = getUrlParam('touchscreen');
/**
 * Whether the current browser is on a mobile device or not
 * @type {boolean}
 */
export const isTouchDevice =
    touchParam && ['false', 'true'].includes(touchParam)
        ? touchParam == 'true'
        : mobile || !!navigator.maxTouchPoints; //The maxTouchPoints test covers Edge browsers on windows tablets
