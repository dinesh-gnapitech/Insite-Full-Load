[
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "threadlocal",
        "importPath": "pyramid",
        "description": "pyramid",
        "isExtraImport": true,
        "detail": "pyramid",
        "documentation": {}
    },
    {
        "label": "httpexceptions",
        "importPath": "pyramid",
        "description": "pyramid",
        "isExtraImport": true,
        "detail": "pyramid",
        "documentation": {}
    },
    {
        "label": "threadlocal",
        "importPath": "pyramid",
        "description": "pyramid",
        "isExtraImport": true,
        "detail": "pyramid",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywLazyJsonFormatter",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywLazyJsonFormatter",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "importPath": "myworldapp.core.server.base.core.myw_progress",
        "description": "myworldapp.core.server.base.core.myw_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywDbQueryTimeOutError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywDbQueryTimeOutError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywCoordSystemError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywCoordSystemError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywProjFileMissingError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywCoordSystemError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywProjFileMissingError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywDbQueryTimeOutError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInvalidFileTypeError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywDataLoadError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywUnknownFeatureTypeError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywUnknownFeatureTypeError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywUnknownFeatureTypeError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywDataLoadError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywDataLoadError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywDataLoadError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywDataLoadError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "importPath": "myworldapp.core.server.base.core.myw_error",
        "description": "myworldapp.core.server.base.core.myw_error",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "b64decode",
        "importPath": "base64",
        "description": "base64",
        "isExtraImport": true,
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "MywThreadSafeCache",
        "importPath": "myworldapp.core.server.base.core.myw_thread_safe_cache",
        "description": "myworldapp.core.server.base.core.myw_thread_safe_cache",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_thread_safe_cache",
        "documentation": {}
    },
    {
        "label": "MywThreadSafeCache",
        "importPath": "myworldapp.core.server.base.core.myw_thread_safe_cache",
        "description": "myworldapp.core.server.base.core.myw_thread_safe_cache",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_thread_safe_cache",
        "documentation": {}
    },
    {
        "label": "MywThreadSafeRecordCache",
        "importPath": "myworldapp.core.server.base.core.myw_thread_safe_record_cache",
        "description": "myworldapp.core.server.base.core.myw_thread_safe_record_cache",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_thread_safe_record_cache",
        "documentation": {}
    },
    {
        "label": "PropertyDict",
        "importPath": "myworldapp.core.server.base.core.utils",
        "description": "myworldapp.core.server.base.core.utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "getCacheManager",
        "importPath": "myworldapp.core.server.base.core.utils",
        "description": "myworldapp.core.server.base.core.utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "search_json_structure",
        "importPath": "myworldapp.core.server.base.core.utils",
        "description": "myworldapp.core.server.base.core.utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "getCacheManager",
        "importPath": "myworldapp.core.server.base.core.utils",
        "description": "myworldapp.core.server.base.core.utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "SharedDict",
        "importPath": "myworldapp.core.server.base.core.utils",
        "description": "myworldapp.core.server.base.core.utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "NullContextManager",
        "importPath": "myworldapp.core.server.base.core.utils",
        "description": "myworldapp.core.server.base.core.utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "NullContextManager",
        "importPath": "myworldapp.core.server.base.core.utils",
        "description": "myworldapp.core.server.base.core.utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "replace_env_variables_in",
        "importPath": "myworldapp.core.server.base.core.utils",
        "description": "myworldapp.core.server.base.core.utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "interpret_data_error",
        "importPath": "myworldapp.core.server.base.core.utils",
        "description": "myworldapp.core.server.base.core.utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "serveDownload",
        "importPath": "myworldapp.core.server.base.core.utils",
        "description": "myworldapp.core.server.base.core.utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "serveDownload",
        "importPath": "myworldapp.core.server.base.core.utils",
        "description": "myworldapp.core.server.base.core.utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "PropertyDict",
        "importPath": "myworldapp.core.server.base.core.utils",
        "description": "myworldapp.core.server.base.core.utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "interpret_data_error",
        "importPath": "myworldapp.core.server.base.core.utils",
        "description": "myworldapp.core.server.base.core.utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "filter_by_key",
        "importPath": "myworldapp.core.server.base.core.utils",
        "description": "myworldapp.core.server.base.core.utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "sort_by_key",
        "importPath": "myworldapp.core.server.base.core.utils",
        "description": "myworldapp.core.server.base.core.utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "replace_env_variables_in",
        "importPath": "myworldapp.core.server.base.core.utils",
        "description": "myworldapp.core.server.base.core.utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "MywFilterParser",
        "importPath": "myworldapp.core.server.base.db.myw_filter_parser",
        "description": "myworldapp.core.server.base.db.myw_filter_parser",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_filter_parser",
        "documentation": {}
    },
    {
        "label": "MywFilterParser",
        "importPath": "myworldapp.core.server.base.db.myw_filter_parser",
        "description": "myworldapp.core.server.base.db.myw_filter_parser",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_filter_parser",
        "documentation": {}
    },
    {
        "label": "MywFilterParser",
        "importPath": "myworldapp.core.server.base.db.myw_filter_parser",
        "description": "myworldapp.core.server.base.db.myw_filter_parser",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_filter_parser",
        "documentation": {}
    },
    {
        "label": "MywFilterParser",
        "importPath": "myworldapp.core.server.base.db.myw_filter_parser",
        "description": "myworldapp.core.server.base.db.myw_filter_parser",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_filter_parser",
        "documentation": {}
    },
    {
        "label": "MywFilterParser",
        "importPath": "myworldapp.core.server.base.db.myw_filter_parser",
        "description": "myworldapp.core.server.base.db.myw_filter_parser",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_filter_parser",
        "documentation": {}
    },
    {
        "label": "MywDbPredicate",
        "importPath": "myworldapp.core.server.base.db.myw_db_predicate",
        "description": "myworldapp.core.server.base.db.myw_db_predicate",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_predicate",
        "documentation": {}
    },
    {
        "label": "MywDbPredicate",
        "importPath": "myworldapp.core.server.base.db.myw_db_predicate",
        "description": "myworldapp.core.server.base.db.myw_db_predicate",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_predicate",
        "documentation": {}
    },
    {
        "label": "MywDbPredicate",
        "importPath": "myworldapp.core.server.base.db.myw_db_predicate",
        "description": "myworldapp.core.server.base.db.myw_db_predicate",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_predicate",
        "documentation": {}
    },
    {
        "label": "MywDbPredicate",
        "importPath": "myworldapp.core.server.base.db.myw_db_predicate",
        "description": "myworldapp.core.server.base.db.myw_db_predicate",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_predicate",
        "documentation": {}
    },
    {
        "label": "MywRole",
        "importPath": "myworldapp.core.server.models.myw_role",
        "description": "myworldapp.core.server.models.myw_role",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_role",
        "documentation": {}
    },
    {
        "label": "MywRole",
        "importPath": "myworldapp.core.server.models.myw_role",
        "description": "myworldapp.core.server.models.myw_role",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_role",
        "documentation": {}
    },
    {
        "label": "MywRole",
        "importPath": "myworldapp.core.server.models.myw_role",
        "description": "myworldapp.core.server.models.myw_role",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_role",
        "documentation": {}
    },
    {
        "label": "MywRole",
        "importPath": "myworldapp.core.server.models.myw_role",
        "description": "myworldapp.core.server.models.myw_role",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_role",
        "documentation": {}
    },
    {
        "label": "MywRole",
        "importPath": "myworldapp.core.server.models.myw_role",
        "description": "myworldapp.core.server.models.myw_role",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_role",
        "documentation": {}
    },
    {
        "label": "MywRole",
        "importPath": "myworldapp.core.server.models.myw_role",
        "description": "myworldapp.core.server.models.myw_role",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_role",
        "documentation": {}
    },
    {
        "label": "MywRole",
        "importPath": "myworldapp.core.server.models.myw_role",
        "description": "myworldapp.core.server.models.myw_role",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_role",
        "documentation": {}
    },
    {
        "label": "MywDatasource",
        "importPath": "myworldapp.core.server.models.myw_datasource",
        "description": "myworldapp.core.server.models.myw_datasource",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_datasource",
        "documentation": {}
    },
    {
        "label": "MywDatasource",
        "importPath": "myworldapp.core.server.models.myw_datasource",
        "description": "myworldapp.core.server.models.myw_datasource",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_datasource",
        "documentation": {}
    },
    {
        "label": "MywDatasource",
        "importPath": "myworldapp.core.server.models.myw_datasource",
        "description": "myworldapp.core.server.models.myw_datasource",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_datasource",
        "documentation": {}
    },
    {
        "label": "MywDatasource",
        "importPath": "myworldapp.core.server.models.myw_datasource",
        "description": "myworldapp.core.server.models.myw_datasource",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_datasource",
        "documentation": {}
    },
    {
        "label": "MywDatasource",
        "importPath": "myworldapp.core.server.models.myw_datasource",
        "description": "myworldapp.core.server.models.myw_datasource",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_datasource",
        "documentation": {}
    },
    {
        "label": "MywDatasource",
        "importPath": "myworldapp.core.server.models.myw_datasource",
        "description": "myworldapp.core.server.models.myw_datasource",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_datasource",
        "documentation": {}
    },
    {
        "label": "MywDatasource",
        "importPath": "myworldapp.core.server.models.myw_datasource",
        "description": "myworldapp.core.server.models.myw_datasource",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_datasource",
        "documentation": {}
    },
    {
        "label": "MywDatasource",
        "importPath": "myworldapp.core.server.models.myw_datasource",
        "description": "myworldapp.core.server.models.myw_datasource",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_datasource",
        "documentation": {}
    },
    {
        "label": "MywApplication",
        "importPath": "myworldapp.core.server.models.myw_application",
        "description": "myworldapp.core.server.models.myw_application",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_application",
        "documentation": {}
    },
    {
        "label": "MywApplication",
        "importPath": "myworldapp.core.server.models.myw_application",
        "description": "myworldapp.core.server.models.myw_application",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_application",
        "documentation": {}
    },
    {
        "label": "MywApplication",
        "importPath": "myworldapp.core.server.models.myw_application",
        "description": "myworldapp.core.server.models.myw_application",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_application",
        "documentation": {}
    },
    {
        "label": "MywApplication",
        "importPath": "myworldapp.core.server.models.myw_application",
        "description": "myworldapp.core.server.models.myw_application",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_application",
        "documentation": {}
    },
    {
        "label": "MywApplication",
        "importPath": "myworldapp.core.server.models.myw_application",
        "description": "myworldapp.core.server.models.myw_application",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_application",
        "documentation": {}
    },
    {
        "label": "MywApplication",
        "importPath": "myworldapp.core.server.models.myw_application",
        "description": "myworldapp.core.server.models.myw_application",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_application",
        "documentation": {}
    },
    {
        "label": "MywApplication",
        "importPath": "myworldapp.core.server.models.myw_application",
        "description": "myworldapp.core.server.models.myw_application",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_application",
        "documentation": {}
    },
    {
        "label": "MywLayer",
        "importPath": "myworldapp.core.server.models.myw_layer",
        "description": "myworldapp.core.server.models.myw_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer",
        "documentation": {}
    },
    {
        "label": "MywLayer",
        "importPath": "myworldapp.core.server.models.myw_layer",
        "description": "myworldapp.core.server.models.myw_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer",
        "documentation": {}
    },
    {
        "label": "MywLayer",
        "importPath": "myworldapp.core.server.models.myw_layer",
        "description": "myworldapp.core.server.models.myw_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer",
        "documentation": {}
    },
    {
        "label": "MywLayer",
        "importPath": "myworldapp.core.server.models.myw_layer",
        "description": "myworldapp.core.server.models.myw_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer",
        "documentation": {}
    },
    {
        "label": "MywLayer",
        "importPath": "myworldapp.core.server.models.myw_layer",
        "description": "myworldapp.core.server.models.myw_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer",
        "documentation": {}
    },
    {
        "label": "MywLayer",
        "importPath": "myworldapp.core.server.models.myw_layer",
        "description": "myworldapp.core.server.models.myw_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer",
        "documentation": {}
    },
    {
        "label": "MywLayer",
        "importPath": "myworldapp.core.server.models.myw_layer",
        "description": "myworldapp.core.server.models.myw_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer",
        "documentation": {}
    },
    {
        "label": "MywLayer",
        "importPath": "myworldapp.core.server.models.myw_layer",
        "description": "myworldapp.core.server.models.myw_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer",
        "documentation": {}
    },
    {
        "label": "MywLayer",
        "importPath": "myworldapp.core.server.models.myw_layer",
        "description": "myworldapp.core.server.models.myw_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer",
        "documentation": {}
    },
    {
        "label": "MywLayer",
        "importPath": "myworldapp.core.server.models.myw_layer",
        "description": "myworldapp.core.server.models.myw_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer",
        "documentation": {}
    },
    {
        "label": "MywLayer",
        "importPath": "myworldapp.core.server.models.myw_layer",
        "description": "myworldapp.core.server.models.myw_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer",
        "documentation": {}
    },
    {
        "label": "MywNetwork",
        "importPath": "myworldapp.core.server.models.myw_network",
        "description": "myworldapp.core.server.models.myw_network",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_network",
        "documentation": {}
    },
    {
        "label": "MywNetwork",
        "importPath": "myworldapp.core.server.models.myw_network",
        "description": "myworldapp.core.server.models.myw_network",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_network",
        "documentation": {}
    },
    {
        "label": "MywNetwork",
        "importPath": "myworldapp.core.server.models.myw_network",
        "description": "myworldapp.core.server.models.myw_network",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_network",
        "documentation": {}
    },
    {
        "label": "MywNetwork",
        "importPath": "myworldapp.core.server.models.myw_network",
        "description": "myworldapp.core.server.models.myw_network",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_network",
        "documentation": {}
    },
    {
        "label": "MywDDFeature",
        "importPath": "myworldapp.core.server.models.myw_dd_feature",
        "description": "myworldapp.core.server.models.myw_dd_feature",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_feature",
        "documentation": {}
    },
    {
        "label": "MywDDFeature",
        "importPath": "myworldapp.core.server.models.myw_dd_feature",
        "description": "myworldapp.core.server.models.myw_dd_feature",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_feature",
        "documentation": {}
    },
    {
        "label": "MywDDFeature",
        "importPath": "myworldapp.core.server.models.myw_dd_feature",
        "description": "myworldapp.core.server.models.myw_dd_feature",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_feature",
        "documentation": {}
    },
    {
        "label": "MywDDFeature",
        "importPath": "myworldapp.core.server.models.myw_dd_feature",
        "description": "myworldapp.core.server.models.myw_dd_feature",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_feature",
        "documentation": {}
    },
    {
        "label": "MywDDFeature",
        "importPath": "myworldapp.core.server.models.myw_dd_feature",
        "description": "myworldapp.core.server.models.myw_dd_feature",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_feature",
        "documentation": {}
    },
    {
        "label": "MywDDFeature",
        "importPath": "myworldapp.core.server.models.myw_dd_feature",
        "description": "myworldapp.core.server.models.myw_dd_feature",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_feature",
        "documentation": {}
    },
    {
        "label": "MywDDFeature",
        "importPath": "myworldapp.core.server.models.myw_dd_feature",
        "description": "myworldapp.core.server.models.myw_dd_feature",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_feature",
        "documentation": {}
    },
    {
        "label": "MywDDFeature",
        "importPath": "myworldapp.core.server.models.myw_dd_feature",
        "description": "myworldapp.core.server.models.myw_dd_feature",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_feature",
        "documentation": {}
    },
    {
        "label": "MywDDFeature",
        "importPath": "myworldapp.core.server.models.myw_dd_feature",
        "description": "myworldapp.core.server.models.myw_dd_feature",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_feature",
        "documentation": {}
    },
    {
        "label": "MywDDFeature",
        "importPath": "myworldapp.core.server.models.myw_dd_feature",
        "description": "myworldapp.core.server.models.myw_dd_feature",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_feature",
        "documentation": {}
    },
    {
        "label": "MywDDFeature",
        "importPath": "myworldapp.core.server.models.myw_dd_feature",
        "description": "myworldapp.core.server.models.myw_dd_feature",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_feature",
        "documentation": {}
    },
    {
        "label": "MywLayerFeatureItem",
        "importPath": "myworldapp.core.server.models.myw_layer_feature_item",
        "description": "myworldapp.core.server.models.myw_layer_feature_item",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer_feature_item",
        "documentation": {}
    },
    {
        "label": "MywLayerFeatureItem",
        "importPath": "myworldapp.core.server.models.myw_layer_feature_item",
        "description": "myworldapp.core.server.models.myw_layer_feature_item",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer_feature_item",
        "documentation": {}
    },
    {
        "label": "MywLayerFeatureItem",
        "importPath": "myworldapp.core.server.models.myw_layer_feature_item",
        "description": "myworldapp.core.server.models.myw_layer_feature_item",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer_feature_item",
        "documentation": {}
    },
    {
        "label": "MywLayerFeatureItem",
        "importPath": "myworldapp.core.server.models.myw_layer_feature_item",
        "description": "myworldapp.core.server.models.myw_layer_feature_item",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer_feature_item",
        "documentation": {}
    },
    {
        "label": "MywFilter",
        "importPath": "myworldapp.core.server.models.myw_filter",
        "description": "myworldapp.core.server.models.myw_filter",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_filter",
        "documentation": {}
    },
    {
        "label": "MywFilter",
        "importPath": "myworldapp.core.server.models.myw_filter",
        "description": "myworldapp.core.server.models.myw_filter",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_filter",
        "documentation": {}
    },
    {
        "label": "MywFilter",
        "importPath": "myworldapp.core.server.models.myw_filter",
        "description": "myworldapp.core.server.models.myw_filter",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_filter",
        "documentation": {}
    },
    {
        "label": "MywSearchRule",
        "importPath": "myworldapp.core.server.models.myw_search_rule",
        "description": "myworldapp.core.server.models.myw_search_rule",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_search_rule",
        "documentation": {}
    },
    {
        "label": "MywSearchRule",
        "importPath": "myworldapp.core.server.models.myw_search_rule",
        "description": "myworldapp.core.server.models.myw_search_rule",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_search_rule",
        "documentation": {}
    },
    {
        "label": "MywSearchRule",
        "importPath": "myworldapp.core.server.models.myw_search_rule",
        "description": "myworldapp.core.server.models.myw_search_rule",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_search_rule",
        "documentation": {}
    },
    {
        "label": "MywSearchRule",
        "importPath": "myworldapp.core.server.models.myw_search_rule",
        "description": "myworldapp.core.server.models.myw_search_rule",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_search_rule",
        "documentation": {}
    },
    {
        "label": "MywSearchRule",
        "importPath": "myworldapp.core.server.models.myw_search_rule",
        "description": "myworldapp.core.server.models.myw_search_rule",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_search_rule",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "urllib.request,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request.",
        "description": "urllib.request.",
        "detail": "urllib.request.",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "unquote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "unquote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Numeric",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "exc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "literal",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "null",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "not_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Numeric",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "exc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "exc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "literal",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "literal",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "literal",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "exists",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "exc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DDL",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "exists",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "literal_column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "exc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "MywLazySet",
        "importPath": "myworldapp.core.server.base.core.myw_lazy_set",
        "description": "myworldapp.core.server.base.core.myw_lazy_set",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_lazy_set",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "init_session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "init_session",
        "importPath": "myworldapp.core.server.base.db.globals",
        "description": "myworldapp.core.server.base.db.globals",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "MywConfigCache",
        "importPath": "myworldapp.core.server.auth.myw_config_cache",
        "description": "myworldapp.core.server.auth.myw_config_cache",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.auth.myw_config_cache",
        "documentation": {}
    },
    {
        "label": "MywAuthenticator",
        "importPath": "myworldapp.core.server.auth.myw_authenticator",
        "description": "myworldapp.core.server.auth.myw_authenticator",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.auth.myw_authenticator",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "and_",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "exists",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "not_",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "null",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "null",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "null",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "null",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "null",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "null",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "null",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "null",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "null",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "null",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "MywUser",
        "importPath": "myworldapp.core.server.models.myw_user",
        "description": "myworldapp.core.server.models.myw_user",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_user",
        "documentation": {}
    },
    {
        "label": "MywUser",
        "importPath": "myworldapp.core.server.models.myw_user",
        "description": "myworldapp.core.server.models.myw_user",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_user",
        "documentation": {}
    },
    {
        "label": "MywUser",
        "importPath": "myworldapp.core.server.models.myw_user",
        "description": "myworldapp.core.server.models.myw_user",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_user",
        "documentation": {}
    },
    {
        "label": "ldap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ldap",
        "description": "ldap",
        "detail": "ldap",
        "documentation": {}
    },
    {
        "label": "ldap.filter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ldap.filter",
        "description": "ldap.filter",
        "detail": "ldap.filter",
        "documentation": {}
    },
    {
        "label": "base64,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64.",
        "description": "base64.",
        "detail": "base64.",
        "documentation": {}
    },
    {
        "label": "ConnectionError",
        "importPath": "requests.exceptions",
        "description": "requests.exceptions",
        "isExtraImport": true,
        "detail": "requests.exceptions",
        "documentation": {}
    },
    {
        "label": "RequestException",
        "importPath": "requests.exceptions",
        "description": "requests.exceptions",
        "isExtraImport": true,
        "detail": "requests.exceptions",
        "documentation": {}
    },
    {
        "label": "RPHandler",
        "importPath": "oidcrp.rp_handler",
        "description": "oidcrp.rp_handler",
        "isExtraImport": true,
        "detail": "oidcrp.rp_handler",
        "documentation": {}
    },
    {
        "label": "OidcServiceError",
        "importPath": "oidcrp.exception",
        "description": "oidcrp.exception",
        "isExtraImport": true,
        "detail": "oidcrp.exception",
        "documentation": {}
    },
    {
        "label": "StateInterface",
        "importPath": "oidcrp.state_interface",
        "description": "oidcrp.state_interface",
        "isExtraImport": true,
        "detail": "oidcrp.state_interface",
        "documentation": {}
    },
    {
        "label": "OneLogin_Saml2_Auth",
        "importPath": "onelogin.saml2.auth",
        "description": "onelogin.saml2.auth",
        "isExtraImport": true,
        "detail": "onelogin.saml2.auth",
        "documentation": {}
    },
    {
        "label": "OneLogin_Saml2_Error",
        "importPath": "onelogin.saml2.utils",
        "description": "onelogin.saml2.utils",
        "isExtraImport": true,
        "detail": "onelogin.saml2.utils",
        "documentation": {}
    },
    {
        "label": "simplejson",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "simplejson",
        "description": "simplejson",
        "detail": "simplejson",
        "documentation": {}
    },
    {
        "label": "loads",
        "importPath": "simplejson",
        "description": "simplejson",
        "isExtraImport": true,
        "detail": "simplejson",
        "documentation": {}
    },
    {
        "label": "PyGFPEncoder",
        "importPath": "geojson.codec",
        "description": "geojson.codec",
        "isExtraImport": true,
        "detail": "geojson.codec",
        "documentation": {}
    },
    {
        "label": "decimal,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "decimal.",
        "description": "decimal.",
        "detail": "decimal.",
        "documentation": {}
    },
    {
        "label": "tempfile,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile.",
        "description": "tempfile.",
        "detail": "tempfile.",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "ZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "ZipInfo",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "ZIP_DEFLATED",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "ZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "ZIP_DEFLATED",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "ZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "ZIP_DEFLATED",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "closing",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "closing",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "MywTableFormatter",
        "importPath": "myworldapp.core.server.base.core.myw_tabulation",
        "description": "myworldapp.core.server.base.core.myw_tabulation",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_tabulation",
        "documentation": {}
    },
    {
        "label": "MywTableFormatter",
        "importPath": "myworldapp.core.server.base.core.myw_tabulation",
        "description": "myworldapp.core.server.base.core.myw_tabulation",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_tabulation",
        "documentation": {}
    },
    {
        "label": "MywTableFormatter",
        "importPath": "myworldapp.core.server.base.core.myw_tabulation",
        "description": "myworldapp.core.server.base.core.myw_tabulation",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_tabulation",
        "documentation": {}
    },
    {
        "label": "MywTableFormatter",
        "importPath": "myworldapp.core.server.base.core.myw_tabulation",
        "description": "myworldapp.core.server.base.core.myw_tabulation",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_tabulation",
        "documentation": {}
    },
    {
        "label": "MywTableFormatter",
        "importPath": "myworldapp.core.server.base.core.myw_tabulation",
        "description": "myworldapp.core.server.base.core.myw_tabulation",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_tabulation",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "DetachedInstanceError",
        "importPath": "sqlalchemy.orm.exc",
        "description": "sqlalchemy.orm.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm.exc",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "pyramid.httpexceptions",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyramid.httpexceptions",
        "description": "pyramid.httpexceptions",
        "detail": "pyramid.httpexceptions",
        "documentation": {}
    },
    {
        "label": "HTTPBadGateway",
        "importPath": "pyramid.httpexceptions",
        "description": "pyramid.httpexceptions",
        "isExtraImport": true,
        "detail": "pyramid.httpexceptions",
        "documentation": {}
    },
    {
        "label": "HTTPNotImplemented",
        "importPath": "pyramid.httpexceptions",
        "description": "pyramid.httpexceptions",
        "isExtraImport": true,
        "detail": "pyramid.httpexceptions",
        "documentation": {}
    },
    {
        "label": "HTTPBadRequest",
        "importPath": "pyramid.httpexceptions",
        "description": "pyramid.httpexceptions",
        "isExtraImport": true,
        "detail": "pyramid.httpexceptions",
        "documentation": {}
    },
    {
        "label": "HTTPConflict",
        "importPath": "pyramid.httpexceptions",
        "description": "pyramid.httpexceptions",
        "isExtraImport": true,
        "detail": "pyramid.httpexceptions",
        "documentation": {}
    },
    {
        "label": "HTTPMovedPermanently",
        "importPath": "pyramid.httpexceptions",
        "description": "pyramid.httpexceptions",
        "isExtraImport": true,
        "detail": "pyramid.httpexceptions",
        "documentation": {}
    },
    {
        "label": "CacheManager",
        "importPath": "beaker.cache",
        "description": "beaker.cache",
        "isExtraImport": true,
        "detail": "beaker.cache",
        "documentation": {}
    },
    {
        "label": "CacheManager",
        "importPath": "beaker.cache",
        "description": "beaker.cache",
        "isExtraImport": true,
        "detail": "beaker.cache",
        "documentation": {}
    },
    {
        "label": "scoped_session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm.session",
        "description": "sqlalchemy.orm.session",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm.session",
        "documentation": {}
    },
    {
        "label": "re,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re.",
        "description": "re.",
        "detail": "re.",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "loads",
        "importPath": "json",
        "description": "json",
        "isExtraImport": true,
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "loads",
        "importPath": "json",
        "description": "json",
        "isExtraImport": true,
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "sqlalchemy.exc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "DBAPIError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "DBAPIError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "DataError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "DataError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "Geometry",
        "importPath": "geoalchemy2",
        "description": "geoalchemy2",
        "isExtraImport": true,
        "detail": "geoalchemy2",
        "documentation": {}
    },
    {
        "label": "Geometry",
        "importPath": "geoalchemy2",
        "description": "geoalchemy2",
        "isExtraImport": true,
        "detail": "geoalchemy2",
        "documentation": {}
    },
    {
        "label": "Geography",
        "importPath": "geoalchemy2",
        "description": "geoalchemy2",
        "isExtraImport": true,
        "detail": "geoalchemy2",
        "documentation": {}
    },
    {
        "label": "shape",
        "importPath": "geoalchemy2",
        "description": "geoalchemy2",
        "isExtraImport": true,
        "detail": "geoalchemy2",
        "documentation": {}
    },
    {
        "label": "Geography",
        "importPath": "geoalchemy2",
        "description": "geoalchemy2",
        "isExtraImport": true,
        "detail": "geoalchemy2",
        "documentation": {}
    },
    {
        "label": "Geometry",
        "importPath": "geoalchemy2",
        "description": "geoalchemy2",
        "isExtraImport": true,
        "detail": "geoalchemy2",
        "documentation": {}
    },
    {
        "label": "shape",
        "importPath": "geoalchemy2",
        "description": "geoalchemy2",
        "isExtraImport": true,
        "detail": "geoalchemy2",
        "documentation": {}
    },
    {
        "label": "Geometry",
        "importPath": "geoalchemy2",
        "description": "geoalchemy2",
        "isExtraImport": true,
        "detail": "geoalchemy2",
        "documentation": {}
    },
    {
        "label": "Geometry",
        "importPath": "geoalchemy2",
        "description": "geoalchemy2",
        "isExtraImport": true,
        "detail": "geoalchemy2",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbConstraint",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbIndex",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbTable",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbTable",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbConstraint",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbIndex",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbTable",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbConstraint",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbIndex",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbIndex",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbConstraint",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbIndex",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbIndex",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbIndex",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbIndex",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbTable",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbIndex",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbType",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbType",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbType",
        "importPath": "myworldapp.core.server.base.db.myw_db_meta",
        "description": "myworldapp.core.server.base.db.myw_db_meta",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywExpressionParser",
        "importPath": "myworldapp.core.server.base.db.myw_expression_parser",
        "description": "myworldapp.core.server.base.db.myw_expression_parser",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_expression_parser",
        "documentation": {}
    },
    {
        "label": "MywExpressionParser",
        "importPath": "myworldapp.core.server.base.db.myw_expression_parser",
        "description": "myworldapp.core.server.base.db.myw_expression_parser",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_expression_parser",
        "documentation": {}
    },
    {
        "label": "MywExpressionParser",
        "importPath": "myworldapp.core.server.base.db.myw_expression_parser",
        "description": "myworldapp.core.server.base.db.myw_expression_parser",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_expression_parser",
        "documentation": {}
    },
    {
        "label": "MywExpressionParser",
        "importPath": "myworldapp.core.server.base.db.myw_expression_parser",
        "description": "myworldapp.core.server.base.db.myw_expression_parser",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_expression_parser",
        "documentation": {}
    },
    {
        "label": "MywMultiLanguageParser",
        "importPath": "myworldapp.core.server.base.db.myw_multi_language_parser",
        "description": "myworldapp.core.server.base.db.myw_multi_language_parser",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_multi_language_parser",
        "documentation": {}
    },
    {
        "label": "MywMultiLanguageParser",
        "importPath": "myworldapp.core.server.base.db.myw_multi_language_parser",
        "description": "myworldapp.core.server.base.db.myw_multi_language_parser",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_multi_language_parser",
        "documentation": {}
    },
    {
        "label": "MywAddColumnChange",
        "importPath": "myworldapp.core.server.base.db.myw_table_change",
        "description": "myworldapp.core.server.base.db.myw_table_change",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_table_change",
        "documentation": {}
    },
    {
        "label": "MywAlterColumnChange",
        "importPath": "myworldapp.core.server.base.db.myw_table_change",
        "description": "myworldapp.core.server.base.db.myw_table_change",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_table_change",
        "documentation": {}
    },
    {
        "label": "MywDropColumnChange",
        "importPath": "myworldapp.core.server.base.db.myw_table_change",
        "description": "myworldapp.core.server.base.db.myw_table_change",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_table_change",
        "documentation": {}
    },
    {
        "label": "MywAddIndexChange",
        "importPath": "myworldapp.core.server.base.db.myw_table_change",
        "description": "myworldapp.core.server.base.db.myw_table_change",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_table_change",
        "documentation": {}
    },
    {
        "label": "MywDropIndexChange",
        "importPath": "myworldapp.core.server.base.db.myw_table_change",
        "description": "myworldapp.core.server.base.db.myw_table_change",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_table_change",
        "documentation": {}
    },
    {
        "label": "MywAddColumnChange",
        "importPath": "myworldapp.core.server.base.db.myw_table_change",
        "description": "myworldapp.core.server.base.db.myw_table_change",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_table_change",
        "documentation": {}
    },
    {
        "label": "MywAlterColumnChange",
        "importPath": "myworldapp.core.server.base.db.myw_table_change",
        "description": "myworldapp.core.server.base.db.myw_table_change",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_table_change",
        "documentation": {}
    },
    {
        "label": "MywDropColumnChange",
        "importPath": "myworldapp.core.server.base.db.myw_table_change",
        "description": "myworldapp.core.server.base.db.myw_table_change",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_table_change",
        "documentation": {}
    },
    {
        "label": "MywAddIndexChange",
        "importPath": "myworldapp.core.server.base.db.myw_table_change",
        "description": "myworldapp.core.server.base.db.myw_table_change",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_table_change",
        "documentation": {}
    },
    {
        "label": "MywDropIndexChange",
        "importPath": "myworldapp.core.server.base.db.myw_table_change",
        "description": "myworldapp.core.server.base.db.myw_table_change",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_table_change",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Null",
        "importPath": "sqlalchemy.sql.elements",
        "description": "sqlalchemy.sql.elements",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.elements",
        "documentation": {}
    },
    {
        "label": "MywGeometry",
        "importPath": "myworldapp.core.server.base.geom.myw_geometry",
        "description": "myworldapp.core.server.base.geom.myw_geometry",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_geometry",
        "documentation": {}
    },
    {
        "label": "MywGeometry",
        "importPath": "myworldapp.core.server.base.geom.myw_geometry",
        "description": "myworldapp.core.server.base.geom.myw_geometry",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_geometry",
        "documentation": {}
    },
    {
        "label": "MywGeometry",
        "importPath": "myworldapp.core.server.base.geom.myw_geometry",
        "description": "myworldapp.core.server.base.geom.myw_geometry",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_geometry",
        "documentation": {}
    },
    {
        "label": "MywGeometry",
        "importPath": "myworldapp.core.server.base.geom.myw_geometry",
        "description": "myworldapp.core.server.base.geom.myw_geometry",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_geometry",
        "documentation": {}
    },
    {
        "label": "degrees_to_metres",
        "importPath": "myworldapp.core.server.base.geom.myw_geo_utils",
        "description": "myworldapp.core.server.base.geom.myw_geo_utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_geo_utils",
        "documentation": {}
    },
    {
        "label": "degrees_to_metres",
        "importPath": "myworldapp.core.server.base.geom.myw_geo_utils",
        "description": "myworldapp.core.server.base.geom.myw_geo_utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_geo_utils",
        "documentation": {}
    },
    {
        "label": "scaleDistortionAt",
        "importPath": "myworldapp.core.server.base.geom.myw_geo_utils",
        "description": "myworldapp.core.server.base.geom.myw_geo_utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_geo_utils",
        "documentation": {}
    },
    {
        "label": "degrees_to_metres",
        "importPath": "myworldapp.core.server.base.geom.myw_geo_utils",
        "description": "myworldapp.core.server.base.geom.myw_geo_utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_geo_utils",
        "documentation": {}
    },
    {
        "label": "geodeticDistanceBetween",
        "importPath": "myworldapp.core.server.base.geom.myw_geo_utils",
        "description": "myworldapp.core.server.base.geom.myw_geo_utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_geo_utils",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "MywOsEngine",
        "importPath": "myworldapp.core.server.base.core.myw_os_engine",
        "description": "myworldapp.core.server.base.core.myw_os_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_os_engine",
        "documentation": {}
    },
    {
        "label": "MywOsEngine",
        "importPath": "myworldapp.core.server.base.core.myw_os_engine",
        "description": "myworldapp.core.server.base.core.myw_os_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_os_engine",
        "documentation": {}
    },
    {
        "label": "MywOsEngine",
        "importPath": "myworldapp.core.server.base.core.myw_os_engine",
        "description": "myworldapp.core.server.base.core.myw_os_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_os_engine",
        "documentation": {}
    },
    {
        "label": "MywOsEngine",
        "importPath": "myworldapp.core.server.base.core.myw_os_engine",
        "description": "myworldapp.core.server.base.core.myw_os_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_os_engine",
        "documentation": {}
    },
    {
        "label": "MywOsEngine",
        "importPath": "myworldapp.core.server.base.core.myw_os_engine",
        "description": "myworldapp.core.server.base.core.myw_os_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_os_engine",
        "documentation": {}
    },
    {
        "label": "MywOsEngine",
        "importPath": "myworldapp.core.server.base.core.myw_os_engine",
        "description": "myworldapp.core.server.base.core.myw_os_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_os_engine",
        "documentation": {}
    },
    {
        "label": "MywOsEngine",
        "importPath": "myworldapp.core.server.base.core.myw_os_engine",
        "description": "myworldapp.core.server.base.core.myw_os_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_os_engine",
        "documentation": {}
    },
    {
        "label": "is_subdirectory",
        "importPath": "myworldapp.core.server.base.core.myw_os_engine",
        "description": "myworldapp.core.server.base.core.myw_os_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_os_engine",
        "documentation": {}
    },
    {
        "label": "is_subdirectory",
        "importPath": "myworldapp.core.server.base.core.myw_os_engine",
        "description": "myworldapp.core.server.base.core.myw_os_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_os_engine",
        "documentation": {}
    },
    {
        "label": "MywOsEngine",
        "importPath": "myworldapp.core.server.base.core.myw_os_engine",
        "description": "myworldapp.core.server.base.core.myw_os_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_os_engine",
        "documentation": {}
    },
    {
        "label": "MywOsEngine",
        "importPath": "myworldapp.core.server.base.core.myw_os_engine",
        "description": "myworldapp.core.server.base.core.myw_os_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_os_engine",
        "documentation": {}
    },
    {
        "label": "MywOsEngine",
        "importPath": "myworldapp.core.server.base.core.myw_os_engine",
        "description": "myworldapp.core.server.base.core.myw_os_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_os_engine",
        "documentation": {}
    },
    {
        "label": "postgresql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "sqlaFilterOf",
        "importPath": "myworldapp.core.server.controllers.base.myw_utils",
        "description": "myworldapp.core.server.controllers.base.myw_utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "mywAbort",
        "importPath": "myworldapp.core.server.controllers.base.myw_utils",
        "description": "myworldapp.core.server.controllers.base.myw_utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "featuresFromRecs",
        "importPath": "myworldapp.core.server.controllers.base.myw_utils",
        "description": "myworldapp.core.server.controllers.base.myw_utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "mywAbort",
        "importPath": "myworldapp.core.server.controllers.base.myw_utils",
        "description": "myworldapp.core.server.controllers.base.myw_utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "featuresFromRecs",
        "importPath": "myworldapp.core.server.controllers.base.myw_utils",
        "description": "myworldapp.core.server.controllers.base.myw_utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "featuresFromRecs",
        "importPath": "myworldapp.core.server.controllers.base.myw_utils",
        "description": "myworldapp.core.server.controllers.base.myw_utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "featuresFromRecs",
        "importPath": "myworldapp.core.server.controllers.base.myw_utils",
        "description": "myworldapp.core.server.controllers.base.myw_utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "mywAbort",
        "importPath": "myworldapp.core.server.controllers.base.myw_utils",
        "description": "myworldapp.core.server.controllers.base.myw_utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "filterFor",
        "importPath": "myworldapp.core.server.controllers.base.myw_utils",
        "description": "myworldapp.core.server.controllers.base.myw_utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "featuresFromRecs",
        "importPath": "myworldapp.core.server.controllers.base.myw_utils",
        "description": "myworldapp.core.server.controllers.base.myw_utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "featuresFromRecs",
        "importPath": "myworldapp.core.server.controllers.base.myw_utils",
        "description": "myworldapp.core.server.controllers.base.myw_utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "filterFor",
        "importPath": "myworldapp.core.server.controllers.base.myw_utils",
        "description": "myworldapp.core.server.controllers.base.myw_utils",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "MywVersionedFeatureTable",
        "importPath": "myworldapp.core.server.dd.myw_versioned_feature_table",
        "description": "myworldapp.core.server.dd.myw_versioned_feature_table",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.dd.myw_versioned_feature_table",
        "documentation": {}
    },
    {
        "label": "psycopg2,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2.",
        "description": "psycopg2.",
        "detail": "psycopg2.",
        "documentation": {}
    },
    {
        "label": "RESERVED_WORDS",
        "importPath": "sqlalchemy.dialects.postgresql.base",
        "description": "sqlalchemy.dialects.postgresql.base",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql.base",
        "documentation": {}
    },
    {
        "label": "RESERVED_WORDS",
        "importPath": "sqlalchemy.dialects.postgresql.base",
        "description": "sqlalchemy.dialects.postgresql.base",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql.base",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "fnmatch,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fnmatch.",
        "description": "fnmatch.",
        "detail": "fnmatch.",
        "documentation": {}
    },
    {
        "label": "SQLiteIdentifierPreparer",
        "importPath": "sqlalchemy.dialects.sqlite.base",
        "description": "sqlalchemy.dialects.sqlite.base",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.sqlite.base",
        "documentation": {}
    },
    {
        "label": "SQLiteIdentifierPreparer",
        "importPath": "sqlalchemy.dialects.sqlite.base",
        "description": "sqlalchemy.dialects.sqlite.base",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.sqlite.base",
        "documentation": {}
    },
    {
        "label": "injectsqlite3dll",
        "importPath": "myworldapp.core.server.startup.myw_python_mods",
        "description": "myworldapp.core.server.startup.myw_python_mods",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.startup.myw_python_mods",
        "documentation": {}
    },
    {
        "label": "injectsqlite3dll",
        "importPath": "myworldapp.core.server.startup.myw_python_mods",
        "description": "myworldapp.core.server.startup.myw_python_mods",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.startup.myw_python_mods",
        "documentation": {}
    },
    {
        "label": "addprioritysitedir",
        "importPath": "myworldapp.core.server.startup.myw_python_mods",
        "description": "myworldapp.core.server.startup.myw_python_mods",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.startup.myw_python_mods",
        "documentation": {}
    },
    {
        "label": "injectsqlite3dll",
        "importPath": "myworldapp.core.server.startup.myw_python_mods",
        "description": "myworldapp.core.server.startup.myw_python_mods",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.startup.myw_python_mods",
        "documentation": {}
    },
    {
        "label": "configure_geojson_lib",
        "importPath": "myworldapp.core.server.startup.myw_python_mods",
        "description": "myworldapp.core.server.startup.myw_python_mods",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.startup.myw_python_mods",
        "documentation": {}
    },
    {
        "label": "addprioritysitedir",
        "importPath": "myworldapp.core.server.startup.myw_python_mods",
        "description": "myworldapp.core.server.startup.myw_python_mods",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.startup.myw_python_mods",
        "documentation": {}
    },
    {
        "label": "configure_geojson_lib",
        "importPath": "myworldapp.core.server.startup.myw_python_mods",
        "description": "myworldapp.core.server.startup.myw_python_mods",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.startup.myw_python_mods",
        "documentation": {}
    },
    {
        "label": "addprioritysitedir",
        "importPath": "myworldapp.core.server.startup.myw_python_mods",
        "description": "myworldapp.core.server.startup.myw_python_mods",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.startup.myw_python_mods",
        "documentation": {}
    },
    {
        "label": "addprioritysitedir",
        "importPath": "myworldapp.core.server.startup.myw_python_mods",
        "description": "myworldapp.core.server.startup.myw_python_mods",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.startup.myw_python_mods",
        "documentation": {}
    },
    {
        "label": "configure_geojson_lib",
        "importPath": "myworldapp.core.server.startup.myw_python_mods",
        "description": "myworldapp.core.server.startup.myw_python_mods",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.startup.myw_python_mods",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "shutil",
        "description": "shutil",
        "isExtraImport": true,
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sqlalchemy.types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy.types",
        "description": "sqlalchemy.types",
        "detail": "sqlalchemy.types",
        "documentation": {}
    },
    {
        "label": "os.path,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path.",
        "description": "os.path.",
        "detail": "os.path.",
        "documentation": {}
    },
    {
        "label": "MywLocaliser",
        "importPath": "myworldapp.core.server.base.system.myw_localiser",
        "description": "myworldapp.core.server.base.system.myw_localiser",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_localiser",
        "documentation": {}
    },
    {
        "label": "MywLocaliser",
        "importPath": "myworldapp.core.server.base.system.myw_localiser",
        "description": "myworldapp.core.server.base.system.myw_localiser",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_localiser",
        "documentation": {}
    },
    {
        "label": "MywDbDriver",
        "importPath": "myworldapp.core.server.base.db.myw_db_driver",
        "description": "myworldapp.core.server.base.db.myw_db_driver",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_driver",
        "documentation": {}
    },
    {
        "label": "pyproj",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyproj",
        "description": "pyproj",
        "detail": "pyproj",
        "documentation": {}
    },
    {
        "label": "CRS",
        "importPath": "pyproj.crs",
        "description": "pyproj.crs",
        "isExtraImport": true,
        "detail": "pyproj.crs",
        "documentation": {}
    },
    {
        "label": "pyproj.exceptions",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyproj.exceptions",
        "description": "pyproj.exceptions",
        "detail": "pyproj.exceptions",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "pyproj,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyproj.",
        "description": "pyproj.",
        "detail": "pyproj.",
        "documentation": {}
    },
    {
        "label": "set_srid",
        "importPath": "shapely",
        "description": "shapely",
        "isExtraImport": true,
        "detail": "shapely",
        "documentation": {}
    },
    {
        "label": "get_srid",
        "importPath": "shapely",
        "description": "shapely",
        "isExtraImport": true,
        "detail": "shapely",
        "documentation": {}
    },
    {
        "label": "Geometry",
        "importPath": "shapely",
        "description": "shapely",
        "isExtraImport": true,
        "detail": "shapely",
        "documentation": {}
    },
    {
        "label": "ismethod",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "MywCoordTransform",
        "importPath": "myworldapp.core.server.base.geom.myw_coord_transform",
        "description": "myworldapp.core.server.base.geom.myw_coord_transform",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_coord_transform",
        "documentation": {}
    },
    {
        "label": "MywCoordTransform",
        "importPath": "myworldapp.core.server.base.geom.myw_coord_transform",
        "description": "myworldapp.core.server.base.geom.myw_coord_transform",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_coord_transform",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "atan2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "radians",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "shapely.geometry",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "LineString",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "LineString",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "MultiLineString",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "MultiPoint",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "MultiPolygon",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "box",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "LineString",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "LineString",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "MywPatchManager",
        "importPath": "myworldapp.core.server.base.system.myw_patch_manager",
        "description": "myworldapp.core.server.base.system.myw_patch_manager",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_patch_manager",
        "documentation": {}
    },
    {
        "label": "MywPatchManager",
        "importPath": "myworldapp.core.server.base.system.myw_patch_manager",
        "description": "myworldapp.core.server.base.system.myw_patch_manager",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_patch_manager",
        "documentation": {}
    },
    {
        "label": "filecmp,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "filecmp.",
        "description": "filecmp.",
        "detail": "filecmp.",
        "documentation": {}
    },
    {
        "label": "getpass",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "getpass",
        "description": "getpass",
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "sqlcipher3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlcipher3",
        "description": "sqlcipher3",
        "detail": "sqlcipher3",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "gettext",
        "description": "gettext",
        "isExtraImport": true,
        "detail": "gettext",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "HelpFormatter",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "_StoreTrueAction",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "OPTIONAL",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "ZERO_OR_MORE",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "SUPPRESS",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "ArgumentParser",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "json,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json.",
        "description": "json.",
        "detail": "json.",
        "documentation": {}
    },
    {
        "label": "MywProduct",
        "importPath": "myworldapp.core.server.base.system.myw_product",
        "description": "myworldapp.core.server.base.system.myw_product",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_product",
        "documentation": {}
    },
    {
        "label": "MywProduct",
        "importPath": "myworldapp.core.server.base.system.myw_product",
        "description": "myworldapp.core.server.base.system.myw_product",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_product",
        "documentation": {}
    },
    {
        "label": "MywProduct",
        "importPath": "myworldapp.core.server.base.system.myw_product",
        "description": "myworldapp.core.server.base.system.myw_product",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_product",
        "documentation": {}
    },
    {
        "label": "MywProduct",
        "importPath": "myworldapp.core.server.base.system.myw_product",
        "description": "myworldapp.core.server.base.system.myw_product",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_product",
        "documentation": {}
    },
    {
        "label": "MywProduct",
        "importPath": "myworldapp.core.server.base.system.myw_product",
        "description": "myworldapp.core.server.base.system.myw_product",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_product",
        "documentation": {}
    },
    {
        "label": "MywProduct",
        "importPath": "myworldapp.core.server.base.system.myw_product",
        "description": "myworldapp.core.server.base.system.myw_product",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_product",
        "documentation": {}
    },
    {
        "label": "MywProduct",
        "importPath": "myworldapp.core.server.base.system.myw_product",
        "description": "myworldapp.core.server.base.system.myw_product",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_product",
        "documentation": {}
    },
    {
        "label": "MywProduct",
        "importPath": "myworldapp.core.server.base.system.myw_product",
        "description": "myworldapp.core.server.base.system.myw_product",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_product",
        "documentation": {}
    },
    {
        "label": "MywProduct",
        "importPath": "myworldapp.core.server.base.system.myw_product",
        "description": "myworldapp.core.server.base.system.myw_product",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_product",
        "documentation": {}
    },
    {
        "label": "MywProduct",
        "importPath": "myworldapp.core.server.base.system.myw_product",
        "description": "myworldapp.core.server.base.system.myw_product",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_product",
        "documentation": {}
    },
    {
        "label": "MywProduct",
        "importPath": "myworldapp.core.server.base.system.myw_product",
        "description": "myworldapp.core.server.base.system.myw_product",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_product",
        "documentation": {}
    },
    {
        "label": "fnmatch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fnmatch",
        "description": "fnmatch",
        "detail": "fnmatch",
        "documentation": {}
    },
    {
        "label": "fnmatch",
        "importPath": "fnmatch",
        "description": "fnmatch",
        "isExtraImport": true,
        "detail": "fnmatch",
        "documentation": {}
    },
    {
        "label": "fnmatchcase",
        "importPath": "fnmatch",
        "description": "fnmatch",
        "isExtraImport": true,
        "detail": "fnmatch",
        "documentation": {}
    },
    {
        "label": "fnmatch",
        "importPath": "fnmatch",
        "description": "fnmatch",
        "isExtraImport": true,
        "detail": "fnmatch",
        "documentation": {}
    },
    {
        "label": "MywReplicationEngine",
        "importPath": "myworldapp.core.server.replication.myw_replication_engine",
        "description": "myworldapp.core.server.replication.myw_replication_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.replication.myw_replication_engine",
        "documentation": {}
    },
    {
        "label": "databaseType",
        "importPath": "myworldapp.core.server.replication.myw_replication_engine",
        "description": "myworldapp.core.server.replication.myw_replication_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.replication.myw_replication_engine",
        "documentation": {}
    },
    {
        "label": "MywCoordSystem",
        "importPath": "myworldapp.core.server.base.geom.myw_coord_system",
        "description": "myworldapp.core.server.base.geom.myw_coord_system",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_coord_system",
        "documentation": {}
    },
    {
        "label": "MywCoordSystem",
        "importPath": "myworldapp.core.server.base.geom.myw_coord_system",
        "description": "myworldapp.core.server.base.geom.myw_coord_system",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_coord_system",
        "documentation": {}
    },
    {
        "label": "MywCoordSystem",
        "importPath": "myworldapp.core.server.base.geom.myw_coord_system",
        "description": "myworldapp.core.server.base.geom.myw_coord_system",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_coord_system",
        "documentation": {}
    },
    {
        "label": "MywCoordSystem",
        "importPath": "myworldapp.core.server.base.geom.myw_coord_system",
        "description": "myworldapp.core.server.base.geom.myw_coord_system",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_coord_system",
        "documentation": {}
    },
    {
        "label": "MywCoordSystem",
        "importPath": "myworldapp.core.server.base.geom.myw_coord_system",
        "description": "myworldapp.core.server.base.geom.myw_coord_system",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_coord_system",
        "documentation": {}
    },
    {
        "label": "MywCoordSystem",
        "importPath": "myworldapp.core.server.base.geom.myw_coord_system",
        "description": "myworldapp.core.server.base.geom.myw_coord_system",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_coord_system",
        "documentation": {}
    },
    {
        "label": "MywCoordSystem",
        "importPath": "myworldapp.core.server.base.geom.myw_coord_system",
        "description": "myworldapp.core.server.base.geom.myw_coord_system",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_coord_system",
        "documentation": {}
    },
    {
        "label": "MywCoordSystem",
        "importPath": "myworldapp.core.server.base.geom.myw_coord_system",
        "description": "myworldapp.core.server.base.geom.myw_coord_system",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_coord_system",
        "documentation": {}
    },
    {
        "label": "MywUpgradeManager",
        "importPath": "myworldapp.core.server.database.myw_upgrade_manager",
        "description": "myworldapp.core.server.database.myw_upgrade_manager",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_upgrade_manager",
        "documentation": {}
    },
    {
        "label": "MywDatabaseServer",
        "importPath": "myworldapp.core.server.database.myw_database_server",
        "description": "myworldapp.core.server.database.myw_database_server",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_database_server",
        "documentation": {}
    },
    {
        "label": "MywDatabaseServer",
        "importPath": "myworldapp.core.server.database.myw_database_server",
        "description": "myworldapp.core.server.database.myw_database_server",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_database_server",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "MywOgcDatasourceEngine",
        "importPath": "myworldapp.core.server.database.myw_ogc_datasource_engine",
        "description": "myworldapp.core.server.database.myw_ogc_datasource_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_ogc_datasource_engine",
        "documentation": {}
    },
    {
        "label": "MywOgcDatasourceEngine",
        "importPath": "myworldapp.core.server.database.myw_ogc_datasource_engine",
        "description": "myworldapp.core.server.database.myw_ogc_datasource_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_ogc_datasource_engine",
        "documentation": {}
    },
    {
        "label": "MywEsriRestDatasourceEngine",
        "importPath": "myworldapp.core.server.database.myw_esri_rest_datasource_engine",
        "description": "myworldapp.core.server.database.myw_esri_rest_datasource_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_esri_rest_datasource_engine",
        "documentation": {}
    },
    {
        "label": "MywEsriRestDatasourceEngine",
        "importPath": "myworldapp.core.server.database.myw_esri_rest_datasource_engine",
        "description": "myworldapp.core.server.database.myw_esri_rest_datasource_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_esri_rest_datasource_engine",
        "documentation": {}
    },
    {
        "label": "MywFileDatasourceEngine",
        "importPath": "myworldapp.core.server.database.myw_file_datasource_engine",
        "description": "myworldapp.core.server.database.myw_file_datasource_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_file_datasource_engine",
        "documentation": {}
    },
    {
        "label": "MywCodeManager",
        "importPath": "myworldapp.core.server.base.system.myw_code_manager",
        "description": "myworldapp.core.server.base.system.myw_code_manager",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_code_manager",
        "documentation": {}
    },
    {
        "label": "MywCodeManager",
        "importPath": "myworldapp.core.server.base.system.myw_code_manager",
        "description": "myworldapp.core.server.base.system.myw_code_manager",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_code_manager",
        "documentation": {}
    },
    {
        "label": "MywCodeManager",
        "importPath": "myworldapp.core.server.base.system.myw_code_manager",
        "description": "myworldapp.core.server.base.system.myw_code_manager",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_code_manager",
        "documentation": {}
    },
    {
        "label": "MywCodeManager",
        "importPath": "myworldapp.core.server.base.system.myw_code_manager",
        "description": "myworldapp.core.server.base.system.myw_code_manager",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_code_manager",
        "documentation": {}
    },
    {
        "label": "MywCodeManager",
        "importPath": "myworldapp.core.server.base.system.myw_code_manager",
        "description": "myworldapp.core.server.base.system.myw_code_manager",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_code_manager",
        "documentation": {}
    },
    {
        "label": "MywPatch",
        "importPath": "myworldapp.core.server.base.system.myw_patch",
        "description": "myworldapp.core.server.base.system.myw_patch",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.system.myw_patch",
        "documentation": {}
    },
    {
        "label": "MywTileDB",
        "importPath": "myworldapp.core.server.base.tilestore.myw_tile_db",
        "description": "myworldapp.core.server.base.tilestore.myw_tile_db",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.tilestore.myw_tile_db",
        "documentation": {}
    },
    {
        "label": "MywTileDB",
        "importPath": "myworldapp.core.server.base.tilestore.myw_tile_db",
        "description": "myworldapp.core.server.base.tilestore.myw_tile_db",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.tilestore.myw_tile_db",
        "documentation": {}
    },
    {
        "label": "MywTileDB",
        "importPath": "myworldapp.core.server.base.tilestore.myw_tile_db",
        "description": "myworldapp.core.server.base.tilestore.myw_tile_db",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.tilestore.myw_tile_db",
        "documentation": {}
    },
    {
        "label": "MywTileDB",
        "importPath": "myworldapp.core.server.base.tilestore.myw_tile_db",
        "description": "myworldapp.core.server.base.tilestore.myw_tile_db",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.tilestore.myw_tile_db",
        "documentation": {}
    },
    {
        "label": "MywTileDB",
        "importPath": "myworldapp.core.server.base.tilestore.myw_tile_db",
        "description": "myworldapp.core.server.base.tilestore.myw_tile_db",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.tilestore.myw_tile_db",
        "documentation": {}
    },
    {
        "label": "MywReference",
        "importPath": "myworldapp.core.server.dd.myw_reference",
        "description": "myworldapp.core.server.dd.myw_reference",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.dd.myw_reference",
        "documentation": {}
    },
    {
        "label": "MywReference",
        "importPath": "myworldapp.core.server.dd.myw_reference",
        "description": "myworldapp.core.server.dd.myw_reference",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.dd.myw_reference",
        "documentation": {}
    },
    {
        "label": "MywReference",
        "importPath": "myworldapp.core.server.dd.myw_reference",
        "description": "myworldapp.core.server.dd.myw_reference",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.dd.myw_reference",
        "documentation": {}
    },
    {
        "label": "MywReference",
        "importPath": "myworldapp.core.server.dd.myw_reference",
        "description": "myworldapp.core.server.dd.myw_reference",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.dd.myw_reference",
        "documentation": {}
    },
    {
        "label": "MywReference",
        "importPath": "myworldapp.core.server.dd.myw_reference",
        "description": "myworldapp.core.server.dd.myw_reference",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.dd.myw_reference",
        "documentation": {}
    },
    {
        "label": "MywCurrentUser",
        "importPath": "myworldapp.core.server.auth.myw_current_user",
        "description": "myworldapp.core.server.auth.myw_current_user",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.auth.myw_current_user",
        "documentation": {}
    },
    {
        "label": "MywCurrentUser",
        "importPath": "myworldapp.core.server.auth.myw_current_user",
        "description": "myworldapp.core.server.auth.myw_current_user",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.auth.myw_current_user",
        "documentation": {}
    },
    {
        "label": "MywConfigurationTask",
        "importPath": "myworldapp.core.server.models.myw_configuration_task",
        "description": "myworldapp.core.server.models.myw_configuration_task",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_configuration_task",
        "documentation": {}
    },
    {
        "label": "MywConfigurationTask",
        "importPath": "myworldapp.core.server.models.myw_configuration_task",
        "description": "myworldapp.core.server.models.myw_configuration_task",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_configuration_task",
        "documentation": {}
    },
    {
        "label": "geojson",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "geojson",
        "description": "geojson",
        "detail": "geojson",
        "documentation": {}
    },
    {
        "label": "FeatureCollection",
        "importPath": "geojson",
        "description": "geojson",
        "isExtraImport": true,
        "detail": "geojson",
        "documentation": {}
    },
    {
        "label": "Feature",
        "importPath": "geojson",
        "description": "geojson",
        "isExtraImport": true,
        "detail": "geojson",
        "documentation": {}
    },
    {
        "label": "GeoJSON",
        "importPath": "geojson",
        "description": "geojson",
        "isExtraImport": true,
        "detail": "geojson",
        "documentation": {}
    },
    {
        "label": "loads",
        "importPath": "geojson",
        "description": "geojson",
        "isExtraImport": true,
        "detail": "geojson",
        "documentation": {}
    },
    {
        "label": "loads",
        "importPath": "geojson",
        "description": "geojson",
        "isExtraImport": true,
        "detail": "geojson",
        "documentation": {}
    },
    {
        "label": "GeoJSON",
        "importPath": "geojson",
        "description": "geojson",
        "isExtraImport": true,
        "detail": "geojson",
        "documentation": {}
    },
    {
        "label": "FeatureCollection",
        "importPath": "geojson",
        "description": "geojson",
        "isExtraImport": true,
        "detail": "geojson",
        "documentation": {}
    },
    {
        "label": "FeatureCollection",
        "importPath": "geojson",
        "description": "geojson",
        "isExtraImport": true,
        "detail": "geojson",
        "documentation": {}
    },
    {
        "label": "FeatureCollection",
        "importPath": "geojson",
        "description": "geojson",
        "isExtraImport": true,
        "detail": "geojson",
        "documentation": {}
    },
    {
        "label": "exception_view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "view_config",
        "importPath": "pyramid.view",
        "description": "pyramid.view",
        "isExtraImport": true,
        "detail": "pyramid.view",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "pyramid.renderers",
        "description": "pyramid.renderers",
        "isExtraImport": true,
        "detail": "pyramid.renderers",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "pyramid.renderers",
        "description": "pyramid.renderers",
        "isExtraImport": true,
        "detail": "pyramid.renderers",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "pyramid.renderers",
        "description": "pyramid.renderers",
        "isExtraImport": true,
        "detail": "pyramid.renderers",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "pyramid.renderers",
        "description": "pyramid.renderers",
        "isExtraImport": true,
        "detail": "pyramid.renderers",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "pyramid.response",
        "description": "pyramid.response",
        "isExtraImport": true,
        "detail": "pyramid.response",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "pyramid.response",
        "description": "pyramid.response",
        "isExtraImport": true,
        "detail": "pyramid.response",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "pyramid.response",
        "description": "pyramid.response",
        "isExtraImport": true,
        "detail": "pyramid.response",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "pyramid.response",
        "description": "pyramid.response",
        "isExtraImport": true,
        "detail": "pyramid.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "pyramid.response",
        "description": "pyramid.response",
        "isExtraImport": true,
        "detail": "pyramid.response",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "pyramid.response",
        "description": "pyramid.response",
        "isExtraImport": true,
        "detail": "pyramid.response",
        "documentation": {}
    },
    {
        "label": "myworldapp.core.server.controllers.base.myw_globals",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "myworldapp.core.server.controllers.base.myw_globals",
        "description": "myworldapp.core.server.controllers.base.myw_globals",
        "detail": "myworldapp.core.server.controllers.base.myw_globals",
        "documentation": {}
    },
    {
        "label": "copy,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy.",
        "description": "copy.",
        "detail": "copy.",
        "documentation": {}
    },
    {
        "label": "MywApplicationLayer",
        "importPath": "myworldapp.core.server.models.myw_application_layer",
        "description": "myworldapp.core.server.models.myw_application_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_application_layer",
        "documentation": {}
    },
    {
        "label": "MywApplicationLayer",
        "importPath": "myworldapp.core.server.models.myw_application_layer",
        "description": "myworldapp.core.server.models.myw_application_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_application_layer",
        "documentation": {}
    },
    {
        "label": "MywApplicationLayer",
        "importPath": "myworldapp.core.server.models.myw_application_layer",
        "description": "myworldapp.core.server.models.myw_application_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_application_layer",
        "documentation": {}
    },
    {
        "label": "MywApplicationLayer",
        "importPath": "myworldapp.core.server.models.myw_application_layer",
        "description": "myworldapp.core.server.models.myw_application_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_application_layer",
        "documentation": {}
    },
    {
        "label": "MywLayerGroup",
        "importPath": "myworldapp.core.server.models.myw_layer_group",
        "description": "myworldapp.core.server.models.myw_layer_group",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer_group",
        "documentation": {}
    },
    {
        "label": "MywLayerGroup",
        "importPath": "myworldapp.core.server.models.myw_layer_group",
        "description": "myworldapp.core.server.models.myw_layer_group",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer_group",
        "documentation": {}
    },
    {
        "label": "MywLayerGroup",
        "importPath": "myworldapp.core.server.models.myw_layer_group",
        "description": "myworldapp.core.server.models.myw_layer_group",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer_group",
        "documentation": {}
    },
    {
        "label": "MywPrivateLayer",
        "importPath": "myworldapp.core.server.models.myw_private_layer",
        "description": "myworldapp.core.server.models.myw_private_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_private_layer",
        "documentation": {}
    },
    {
        "label": "MywPrivateLayer",
        "importPath": "myworldapp.core.server.models.myw_private_layer",
        "description": "myworldapp.core.server.models.myw_private_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_private_layer",
        "documentation": {}
    },
    {
        "label": "MywPrivateLayer",
        "importPath": "myworldapp.core.server.models.myw_private_layer",
        "description": "myworldapp.core.server.models.myw_private_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_private_layer",
        "documentation": {}
    },
    {
        "label": "MywPrivateLayer",
        "importPath": "myworldapp.core.server.models.myw_private_layer",
        "description": "myworldapp.core.server.models.myw_private_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_private_layer",
        "documentation": {}
    },
    {
        "label": "MywPrivateLayer",
        "importPath": "myworldapp.core.server.models.myw_private_layer",
        "description": "myworldapp.core.server.models.myw_private_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_private_layer",
        "documentation": {}
    },
    {
        "label": "MywPrivateLayer",
        "importPath": "myworldapp.core.server.models.myw_private_layer",
        "description": "myworldapp.core.server.models.myw_private_layer",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_private_layer",
        "documentation": {}
    },
    {
        "label": "MywQuery",
        "importPath": "myworldapp.core.server.models.myw_query",
        "description": "myworldapp.core.server.models.myw_query",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_query",
        "documentation": {}
    },
    {
        "label": "MywQuery",
        "importPath": "myworldapp.core.server.models.myw_query",
        "description": "myworldapp.core.server.models.myw_query",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_query",
        "documentation": {}
    },
    {
        "label": "MywQuery",
        "importPath": "myworldapp.core.server.models.myw_query",
        "description": "myworldapp.core.server.models.myw_query",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_query",
        "documentation": {}
    },
    {
        "label": "MywQuery",
        "importPath": "myworldapp.core.server.models.myw_query",
        "description": "myworldapp.core.server.models.myw_query",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_query",
        "documentation": {}
    },
    {
        "label": "MywApplicationState",
        "importPath": "myworldapp.core.server.models.myw_application_state",
        "description": "myworldapp.core.server.models.myw_application_state",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_application_state",
        "documentation": {}
    },
    {
        "label": "MywApplicationState",
        "importPath": "myworldapp.core.server.models.myw_application_state",
        "description": "myworldapp.core.server.models.myw_application_state",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_application_state",
        "documentation": {}
    },
    {
        "label": "MywApplicationState",
        "importPath": "myworldapp.core.server.models.myw_application_state",
        "description": "myworldapp.core.server.models.myw_application_state",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_application_state",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywController",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller",
        "description": "myworldapp.core.server.controllers.base.myw_controller",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywBookmark",
        "importPath": "myworldapp.core.server.models.myw_bookmark",
        "description": "myworldapp.core.server.models.myw_bookmark",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_bookmark",
        "documentation": {}
    },
    {
        "label": "MywBookmark",
        "importPath": "myworldapp.core.server.models.myw_bookmark",
        "description": "myworldapp.core.server.models.myw_bookmark",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_bookmark",
        "documentation": {}
    },
    {
        "label": "MywBookmark",
        "importPath": "myworldapp.core.server.models.myw_bookmark",
        "description": "myworldapp.core.server.models.myw_bookmark",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_bookmark",
        "documentation": {}
    },
    {
        "label": "MywDDField",
        "importPath": "myworldapp.core.server.models.myw_dd_field",
        "description": "myworldapp.core.server.models.myw_dd_field",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_field",
        "documentation": {}
    },
    {
        "label": "MywDDField",
        "importPath": "myworldapp.core.server.models.myw_dd_field",
        "description": "myworldapp.core.server.models.myw_dd_field",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_field",
        "documentation": {}
    },
    {
        "label": "MywDDField",
        "importPath": "myworldapp.core.server.models.myw_dd_field",
        "description": "myworldapp.core.server.models.myw_dd_field",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_field",
        "documentation": {}
    },
    {
        "label": "MywDDFieldGroup",
        "importPath": "myworldapp.core.server.models.myw_dd_field_group",
        "description": "myworldapp.core.server.models.myw_dd_field_group",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_field_group",
        "documentation": {}
    },
    {
        "label": "MywDDFieldGroupItem",
        "importPath": "myworldapp.core.server.models.myw_dd_field_group_item",
        "description": "myworldapp.core.server.models.myw_dd_field_group_item",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_field_group_item",
        "documentation": {}
    },
    {
        "label": "MywDDFieldGroupItem",
        "importPath": "myworldapp.core.server.models.myw_dd_field_group_item",
        "description": "myworldapp.core.server.models.myw_dd_field_group_item",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_field_group_item",
        "documentation": {}
    },
    {
        "label": "MywDDEnum",
        "importPath": "myworldapp.core.server.models.myw_dd_enum",
        "description": "myworldapp.core.server.models.myw_dd_enum",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_enum",
        "documentation": {}
    },
    {
        "label": "MywDDEnum",
        "importPath": "myworldapp.core.server.models.myw_dd_enum",
        "description": "myworldapp.core.server.models.myw_dd_enum",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_enum",
        "documentation": {}
    },
    {
        "label": "MywDDEnum",
        "importPath": "myworldapp.core.server.models.myw_dd_enum",
        "description": "myworldapp.core.server.models.myw_dd_enum",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_enum",
        "documentation": {}
    },
    {
        "label": "MywDDEnum",
        "importPath": "myworldapp.core.server.models.myw_dd_enum",
        "description": "myworldapp.core.server.models.myw_dd_enum",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_enum",
        "documentation": {}
    },
    {
        "label": "simplejson,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "simplejson.",
        "description": "simplejson.",
        "detail": "simplejson.",
        "documentation": {}
    },
    {
        "label": "MywDD",
        "importPath": "myworldapp.core.server.dd.myw_dd",
        "description": "myworldapp.core.server.dd.myw_dd",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.dd.myw_dd",
        "documentation": {}
    },
    {
        "label": "MywDD",
        "importPath": "myworldapp.core.server.dd.myw_dd",
        "description": "myworldapp.core.server.dd.myw_dd",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.dd.myw_dd",
        "documentation": {}
    },
    {
        "label": "MywFeatureDescriptor",
        "importPath": "myworldapp.core.server.dd.myw_feature_descriptor",
        "description": "myworldapp.core.server.dd.myw_feature_descriptor",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.dd.myw_feature_descriptor",
        "documentation": {}
    },
    {
        "label": "MywFeatureDescriptor",
        "importPath": "myworldapp.core.server.dd.myw_feature_descriptor",
        "description": "myworldapp.core.server.dd.myw_feature_descriptor",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.dd.myw_feature_descriptor",
        "documentation": {}
    },
    {
        "label": "MywFeatureDescriptor",
        "importPath": "myworldapp.core.server.dd.myw_feature_descriptor",
        "description": "myworldapp.core.server.dd.myw_feature_descriptor",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.dd.myw_feature_descriptor",
        "documentation": {}
    },
    {
        "label": "MywControllerProgressHandler",
        "importPath": "myworldapp.core.server.controllers.base.myw_controller_progress",
        "description": "myworldapp.core.server.controllers.base.myw_controller_progress",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_controller_progress",
        "documentation": {}
    },
    {
        "label": "MywDatabase",
        "importPath": "myworldapp.core.server.database.myw_database",
        "description": "myworldapp.core.server.database.myw_database",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_database",
        "documentation": {}
    },
    {
        "label": "MywDatabase",
        "importPath": "myworldapp.core.server.database.myw_database",
        "description": "myworldapp.core.server.database.myw_database",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_database",
        "documentation": {}
    },
    {
        "label": "MywDatabase",
        "importPath": "myworldapp.core.server.database.myw_database",
        "description": "myworldapp.core.server.database.myw_database",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_database",
        "documentation": {}
    },
    {
        "label": "MywDatabase",
        "importPath": "myworldapp.core.server.database.myw_database",
        "description": "myworldapp.core.server.database.myw_database",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_database",
        "documentation": {}
    },
    {
        "label": "MywDatabase",
        "importPath": "myworldapp.core.server.database.myw_database",
        "description": "myworldapp.core.server.database.myw_database",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_database",
        "documentation": {}
    },
    {
        "label": "MywDatabase",
        "importPath": "myworldapp.core.server.database.myw_database",
        "description": "myworldapp.core.server.database.myw_database",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_database",
        "documentation": {}
    },
    {
        "label": "MywDatabase",
        "importPath": "myworldapp.core.server.database.myw_database",
        "description": "myworldapp.core.server.database.myw_database",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_database",
        "documentation": {}
    },
    {
        "label": "MywDatabase",
        "importPath": "myworldapp.core.server.database.myw_database",
        "description": "myworldapp.core.server.database.myw_database",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_database",
        "documentation": {}
    },
    {
        "label": "MywFeatureCollection",
        "importPath": "myworldapp.core.server.controllers.base.myw_feature_collection",
        "description": "myworldapp.core.server.controllers.base.myw_feature_collection",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_feature_collection",
        "documentation": {}
    },
    {
        "label": "MywFeatureCollection",
        "importPath": "myworldapp.core.server.controllers.base.myw_feature_collection",
        "description": "myworldapp.core.server.controllers.base.myw_feature_collection",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_feature_collection",
        "documentation": {}
    },
    {
        "label": "MywFeatureCollection",
        "importPath": "myworldapp.core.server.controllers.base.myw_feature_collection",
        "description": "myworldapp.core.server.controllers.base.myw_feature_collection",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_feature_collection",
        "documentation": {}
    },
    {
        "label": "MywFeatureCollection",
        "importPath": "myworldapp.core.server.controllers.base.myw_feature_collection",
        "description": "myworldapp.core.server.controllers.base.myw_feature_collection",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.controllers.base.myw_feature_collection",
        "documentation": {}
    },
    {
        "label": "csv,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv.",
        "description": "csv.",
        "detail": "csv.",
        "documentation": {}
    },
    {
        "label": "MywMasterReplicationEngine",
        "importPath": "myworldapp.core.server.replication.myw_master_replication_engine",
        "description": "myworldapp.core.server.replication.myw_master_replication_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.replication.myw_master_replication_engine",
        "documentation": {}
    },
    {
        "label": "MywMasterReplicationEngine",
        "importPath": "myworldapp.core.server.replication.myw_master_replication_engine",
        "description": "myworldapp.core.server.replication.myw_master_replication_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.replication.myw_master_replication_engine",
        "documentation": {}
    },
    {
        "label": "MywExtractConfig",
        "importPath": "myworldapp.core.server.models.myw_extract_config",
        "description": "myworldapp.core.server.models.myw_extract_config",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_extract_config",
        "documentation": {}
    },
    {
        "label": "MywExtractConfig",
        "importPath": "myworldapp.core.server.models.myw_extract_config",
        "description": "myworldapp.core.server.models.myw_extract_config",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_extract_config",
        "documentation": {}
    },
    {
        "label": "MywExtractConfig",
        "importPath": "myworldapp.core.server.models.myw_extract_config",
        "description": "myworldapp.core.server.models.myw_extract_config",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_extract_config",
        "documentation": {}
    },
    {
        "label": "MywExtractKey",
        "importPath": "myworldapp.core.server.models.myw_extract_key",
        "description": "myworldapp.core.server.models.myw_extract_key",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_extract_key",
        "documentation": {}
    },
    {
        "label": "sqlalchemy,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy.",
        "description": "sqlalchemy.",
        "detail": "sqlalchemy.",
        "documentation": {}
    },
    {
        "label": "MywPoint",
        "importPath": "myworldapp.core.server.base.geom.myw_point",
        "description": "myworldapp.core.server.base.geom.myw_point",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_point",
        "documentation": {}
    },
    {
        "label": "MywPoint",
        "importPath": "myworldapp.core.server.base.geom.myw_point",
        "description": "myworldapp.core.server.base.geom.myw_point",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_point",
        "documentation": {}
    },
    {
        "label": "MywPolygon",
        "importPath": "myworldapp.core.server.base.geom.myw_polygon",
        "description": "myworldapp.core.server.base.geom.myw_polygon",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_polygon",
        "documentation": {}
    },
    {
        "label": "MywPolygon",
        "importPath": "myworldapp.core.server.base.geom.myw_polygon",
        "description": "myworldapp.core.server.base.geom.myw_polygon",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_polygon",
        "documentation": {}
    },
    {
        "label": "MywPolygon",
        "importPath": "myworldapp.core.server.base.geom.myw_polygon",
        "description": "myworldapp.core.server.base.geom.myw_polygon",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.geom.myw_polygon",
        "documentation": {}
    },
    {
        "label": "MywGroup",
        "importPath": "myworldapp.core.server.models.myw_group",
        "description": "myworldapp.core.server.models.myw_group",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_group",
        "documentation": {}
    },
    {
        "label": "MywGroup",
        "importPath": "myworldapp.core.server.models.myw_group",
        "description": "myworldapp.core.server.models.myw_group",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_group",
        "documentation": {}
    },
    {
        "label": "MywGroupItem",
        "importPath": "myworldapp.core.server.models.myw_group_item",
        "description": "myworldapp.core.server.models.myw_group_item",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_group_item",
        "documentation": {}
    },
    {
        "label": "MywNetworkEngine",
        "importPath": "myworldapp.core.server.networks.myw_network_engine",
        "description": "myworldapp.core.server.networks.myw_network_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.networks.myw_network_engine",
        "documentation": {}
    },
    {
        "label": "MywNotification",
        "importPath": "myworldapp.core.server.models.myw_notification",
        "description": "myworldapp.core.server.models.myw_notification",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_notification",
        "documentation": {}
    },
    {
        "label": "MywNotification",
        "importPath": "myworldapp.core.server.models.myw_notification",
        "description": "myworldapp.core.server.models.myw_notification",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_notification",
        "documentation": {}
    },
    {
        "label": "MywSetting",
        "importPath": "myworldapp.core.server.models.myw_setting",
        "description": "myworldapp.core.server.models.myw_setting",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_setting",
        "documentation": {}
    },
    {
        "label": "MywSetting",
        "importPath": "myworldapp.core.server.models.myw_setting",
        "description": "myworldapp.core.server.models.myw_setting",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_setting",
        "documentation": {}
    },
    {
        "label": "MywSetting",
        "importPath": "myworldapp.core.server.models.myw_setting",
        "description": "myworldapp.core.server.models.myw_setting",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_setting",
        "documentation": {}
    },
    {
        "label": "MywSetting",
        "importPath": "myworldapp.core.server.models.myw_setting",
        "description": "myworldapp.core.server.models.myw_setting",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_setting",
        "documentation": {}
    },
    {
        "label": "GlobalMercator",
        "importPath": "myworldapp.core.server.base.tilestore.globalmaptiles",
        "description": "myworldapp.core.server.base.tilestore.globalmaptiles",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.tilestore.globalmaptiles",
        "documentation": {}
    },
    {
        "label": "MywPostGISMVTQuery",
        "importPath": "myworldapp.core.server.base.db.myw_postgis_mvt_query",
        "description": "myworldapp.core.server.base.db.myw_postgis_mvt_query",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_postgis_mvt_query",
        "documentation": {}
    },
    {
        "label": "MywNoFeaturesError",
        "importPath": "myworldapp.core.server.base.db.myw_postgis_mvt_query",
        "description": "myworldapp.core.server.base.db.myw_postgis_mvt_query",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_postgis_mvt_query",
        "documentation": {}
    },
    {
        "label": "MywReplica",
        "importPath": "myworldapp.core.server.models.myw_replica",
        "description": "myworldapp.core.server.models.myw_replica",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_replica",
        "documentation": {}
    },
    {
        "label": "MywReplica",
        "importPath": "myworldapp.core.server.models.myw_replica",
        "description": "myworldapp.core.server.models.myw_replica",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_replica",
        "documentation": {}
    },
    {
        "label": "MywRight",
        "importPath": "myworldapp.core.server.models.myw_right",
        "description": "myworldapp.core.server.models.myw_right",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_right",
        "documentation": {}
    },
    {
        "label": "MywRight",
        "importPath": "myworldapp.core.server.models.myw_right",
        "description": "myworldapp.core.server.models.myw_right",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_right",
        "documentation": {}
    },
    {
        "label": "MywRight",
        "importPath": "myworldapp.core.server.models.myw_right",
        "description": "myworldapp.core.server.models.myw_right",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_right",
        "documentation": {}
    },
    {
        "label": "MywRight",
        "importPath": "myworldapp.core.server.models.myw_right",
        "description": "myworldapp.core.server.models.myw_right",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_right",
        "documentation": {}
    },
    {
        "label": "MywRight",
        "importPath": "myworldapp.core.server.models.myw_right",
        "description": "myworldapp.core.server.models.myw_right",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_right",
        "documentation": {}
    },
    {
        "label": "MywRight",
        "importPath": "myworldapp.core.server.models.myw_right",
        "description": "myworldapp.core.server.models.myw_right",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_right",
        "documentation": {}
    },
    {
        "label": "MywPermission",
        "importPath": "myworldapp.core.server.models.myw_permission",
        "description": "myworldapp.core.server.models.myw_permission",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_permission",
        "documentation": {}
    },
    {
        "label": "MywPermission",
        "importPath": "myworldapp.core.server.models.myw_permission",
        "description": "myworldapp.core.server.models.myw_permission",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_permission",
        "documentation": {}
    },
    {
        "label": "MywPermission",
        "importPath": "myworldapp.core.server.models.myw_permission",
        "description": "myworldapp.core.server.models.myw_permission",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_permission",
        "documentation": {}
    },
    {
        "label": "MywPermission",
        "importPath": "myworldapp.core.server.models.myw_permission",
        "description": "myworldapp.core.server.models.myw_permission",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_permission",
        "documentation": {}
    },
    {
        "label": "difflib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "difflib",
        "description": "difflib",
        "detail": "difflib",
        "documentation": {}
    },
    {
        "label": "MywSearchString",
        "importPath": "myworldapp.core.server.models.myw_search_string",
        "description": "myworldapp.core.server.models.myw_search_string",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_search_string",
        "documentation": {}
    },
    {
        "label": "MywDeltaSearchString",
        "importPath": "myworldapp.core.server.models.myw_delta_search_string",
        "description": "myworldapp.core.server.models.myw_delta_search_string",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_delta_search_string",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "importPath": "myworldapp.core.server.models.base",
        "description": "myworldapp.core.server.models.base",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywSnapshotEngine",
        "importPath": "myworldapp.core.server.replication.myw_snapshot_engine",
        "description": "myworldapp.core.server.replication.myw_snapshot_engine",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.replication.myw_snapshot_engine",
        "documentation": {}
    },
    {
        "label": "MywTableSet",
        "importPath": "myworldapp.core.server.models.myw_table_set",
        "description": "myworldapp.core.server.models.myw_table_set",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_table_set",
        "documentation": {}
    },
    {
        "label": "MywTableSet",
        "importPath": "myworldapp.core.server.models.myw_table_set",
        "description": "myworldapp.core.server.models.myw_table_set",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_table_set",
        "documentation": {}
    },
    {
        "label": "MywDataLoadError",
        "importPath": "myworldapp.core.server.database.myw_data_loader",
        "description": "myworldapp.core.server.database.myw_data_loader",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_data_loader",
        "documentation": {}
    },
    {
        "label": "MywUsage",
        "importPath": "myworldapp.core.server.models.myw_usage",
        "description": "myworldapp.core.server.models.myw_usage",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_usage",
        "documentation": {}
    },
    {
        "label": "MywUsage",
        "importPath": "myworldapp.core.server.models.myw_usage",
        "description": "myworldapp.core.server.models.myw_usage",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_usage",
        "documentation": {}
    },
    {
        "label": "MywUsageItem",
        "importPath": "myworldapp.core.server.models.myw_usage_item",
        "description": "myworldapp.core.server.models.myw_usage_item",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_usage_item",
        "documentation": {}
    },
    {
        "label": "MywUsageItem",
        "importPath": "myworldapp.core.server.models.myw_usage_item",
        "description": "myworldapp.core.server.models.myw_usage_item",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_usage_item",
        "documentation": {}
    },
    {
        "label": "MywUserRole",
        "importPath": "myworldapp.core.server.models.myw_user_role",
        "description": "myworldapp.core.server.models.myw_user_role",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_user_role",
        "documentation": {}
    },
    {
        "label": "MywUserRole",
        "importPath": "myworldapp.core.server.models.myw_user_role",
        "description": "myworldapp.core.server.models.myw_user_role",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_user_role",
        "documentation": {}
    },
    {
        "label": "MywUserRole",
        "importPath": "myworldapp.core.server.models.myw_user_role",
        "description": "myworldapp.core.server.models.myw_user_role",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_user_role",
        "documentation": {}
    },
    {
        "label": "MywVersionStamp",
        "importPath": "myworldapp.core.server.models.myw_version_stamp",
        "description": "myworldapp.core.server.models.myw_version_stamp",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_version_stamp",
        "documentation": {}
    },
    {
        "label": "MywVersionStamp",
        "importPath": "myworldapp.core.server.models.myw_version_stamp",
        "description": "myworldapp.core.server.models.myw_version_stamp",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_version_stamp",
        "documentation": {}
    },
    {
        "label": "MywVersionStamp",
        "importPath": "myworldapp.core.server.models.myw_version_stamp",
        "description": "myworldapp.core.server.models.myw_version_stamp",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_version_stamp",
        "documentation": {}
    },
    {
        "label": "MywExtract",
        "importPath": "myworldapp.core.server.models.myw_extract",
        "description": "myworldapp.core.server.models.myw_extract",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_extract",
        "documentation": {}
    },
    {
        "label": "MywExtract",
        "importPath": "myworldapp.core.server.models.myw_extract",
        "description": "myworldapp.core.server.models.myw_extract",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_extract",
        "documentation": {}
    },
    {
        "label": "MywUnitScale",
        "importPath": "myworldapp.core.server.base.core.myw_units",
        "description": "myworldapp.core.server.base.core.myw_units",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_units",
        "documentation": {}
    },
    {
        "label": "MywCheckpoint",
        "importPath": "myworldapp.core.server.models.myw_checkpoint",
        "description": "myworldapp.core.server.models.myw_checkpoint",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_checkpoint",
        "documentation": {}
    },
    {
        "label": "MywDbServer",
        "importPath": "myworldapp.core.server.base.db.myw_db_server",
        "description": "myworldapp.core.server.base.db.myw_db_server",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_db_server",
        "documentation": {}
    },
    {
        "label": "MywDbUpgrade",
        "importPath": "myworldapp.core.server.base.db_schema.myw_db_upgrade",
        "description": "myworldapp.core.server.base.db_schema.myw_db_upgrade",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db_schema.myw_db_upgrade",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "urllib.error",
        "description": "urllib.error",
        "isExtraImport": true,
        "detail": "urllib.error",
        "documentation": {}
    },
    {
        "label": "InsecureRequestWarning",
        "importPath": "urllib3.exceptions",
        "description": "urllib3.exceptions",
        "isExtraImport": true,
        "detail": "urllib3.exceptions",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "MywFeatureIStream",
        "importPath": "myworldapp.core.server.io.myw_feature_istream",
        "description": "myworldapp.core.server.io.myw_feature_istream",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.io.myw_feature_istream",
        "documentation": {}
    },
    {
        "label": "MywFeatureIStream",
        "importPath": "myworldapp.core.server.io.myw_feature_istream",
        "description": "myworldapp.core.server.io.myw_feature_istream",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.io.myw_feature_istream",
        "documentation": {}
    },
    {
        "label": "MywFeatureOStream",
        "importPath": "myworldapp.core.server.io.myw_feature_ostream",
        "description": "myworldapp.core.server.io.myw_feature_ostream",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.io.myw_feature_ostream",
        "documentation": {}
    },
    {
        "label": "MywCsvFeatureOStream",
        "importPath": "myworldapp.core.server.io.myw_csv_feature_ostream",
        "description": "myworldapp.core.server.io.myw_csv_feature_ostream",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.io.myw_csv_feature_ostream",
        "documentation": {}
    },
    {
        "label": "MywCsvFeatureIStream",
        "importPath": "myworldapp.core.server.io.myw_csv_feature_istream",
        "description": "myworldapp.core.server.io.myw_csv_feature_istream",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.io.myw_csv_feature_istream",
        "documentation": {}
    },
    {
        "label": "HttpNtlmAuth",
        "importPath": "requests_ntlm",
        "description": "requests_ntlm",
        "isExtraImport": true,
        "detail": "requests_ntlm",
        "documentation": {}
    },
    {
        "label": "shapely.wkt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shapely.wkt",
        "description": "shapely.wkt",
        "detail": "shapely.wkt",
        "documentation": {}
    },
    {
        "label": "shapely.wkb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shapely.wkb",
        "description": "shapely.wkb",
        "detail": "shapely.wkb",
        "documentation": {}
    },
    {
        "label": "shapely.wkt,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shapely.wkt.",
        "description": "shapely.wkt.",
        "detail": "shapely.wkt.",
        "documentation": {}
    },
    {
        "label": "xml.etree.ElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "attrgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "attrgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy.schema",
        "description": "sqlalchemy.schema",
        "isExtraImport": true,
        "detail": "sqlalchemy.schema",
        "documentation": {}
    },
    {
        "label": "MywDDEnumValue",
        "importPath": "myworldapp.core.server.models.myw_dd_enum_value",
        "description": "myworldapp.core.server.models.myw_dd_enum_value",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_enum_value",
        "documentation": {}
    },
    {
        "label": "MywDDEnumValue",
        "importPath": "myworldapp.core.server.models.myw_dd_enum_value",
        "description": "myworldapp.core.server.models.myw_dd_enum_value",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_dd_enum_value",
        "documentation": {}
    },
    {
        "label": "geojson,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "geojson.",
        "description": "geojson.",
        "detail": "geojson.",
        "documentation": {}
    },
    {
        "label": "ogr",
        "importPath": "osgeo",
        "description": "osgeo",
        "isExtraImport": true,
        "detail": "osgeo",
        "documentation": {}
    },
    {
        "label": "ogr",
        "importPath": "osgeo",
        "description": "osgeo",
        "isExtraImport": true,
        "detail": "osgeo",
        "documentation": {}
    },
    {
        "label": "ogr",
        "importPath": "osgeo",
        "description": "osgeo",
        "isExtraImport": true,
        "detail": "osgeo",
        "documentation": {}
    },
    {
        "label": "ogr",
        "importPath": "osgeo",
        "description": "osgeo",
        "isExtraImport": true,
        "detail": "osgeo",
        "documentation": {}
    },
    {
        "label": "osr",
        "importPath": "osgeo",
        "description": "osgeo",
        "isExtraImport": true,
        "detail": "osgeo",
        "documentation": {}
    },
    {
        "label": "ezdxf",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ezdxf",
        "description": "ezdxf",
        "detail": "ezdxf",
        "documentation": {}
    },
    {
        "label": "geo",
        "importPath": "ezdxf.addons",
        "description": "ezdxf.addons",
        "isExtraImport": true,
        "detail": "ezdxf.addons",
        "documentation": {}
    },
    {
        "label": "Geometry",
        "importPath": "geojson.geometry",
        "description": "geojson.geometry",
        "isExtraImport": true,
        "detail": "geojson.geometry",
        "documentation": {}
    },
    {
        "label": "JSONDecodeError",
        "importPath": "simplejson.decoder",
        "description": "simplejson.decoder",
        "isExtraImport": true,
        "detail": "simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "MywLayerGroupItem",
        "importPath": "myworldapp.core.server.models.myw_layer_group_item",
        "description": "myworldapp.core.server.models.myw_layer_group_item",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer_group_item",
        "documentation": {}
    },
    {
        "label": "MywLayerGroupItem",
        "importPath": "myworldapp.core.server.models.myw_layer_group_item",
        "description": "myworldapp.core.server.models.myw_layer_group_item",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_layer_group_item",
        "documentation": {}
    },
    {
        "label": "MywNetworkFeatureItem",
        "importPath": "myworldapp.core.server.models.myw_network_feature_item",
        "description": "myworldapp.core.server.models.myw_network_feature_item",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_network_feature_item",
        "documentation": {}
    },
    {
        "label": "MywReplicaShard",
        "importPath": "myworldapp.core.server.models.myw_replica_shard",
        "description": "myworldapp.core.server.models.myw_replica_shard",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_replica_shard",
        "documentation": {}
    },
    {
        "label": "MywTableSetLayerItem",
        "importPath": "myworldapp.core.server.models.myw_table_set_layer_item",
        "description": "myworldapp.core.server.models.myw_table_set_layer_item",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_table_set_layer_item",
        "documentation": {}
    },
    {
        "label": "MywTableSetTileFileItem",
        "importPath": "myworldapp.core.server.models.myw_table_set_tile_file_item",
        "description": "myworldapp.core.server.models.myw_table_set_tile_file_item",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.models.myw_table_set_tile_file_item",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "MywSqliteDbServer",
        "importPath": "myworldapp.core.server.base.db.myw_sqlite_db_server",
        "description": "myworldapp.core.server.base.db.myw_sqlite_db_server",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.db.myw_sqlite_db_server",
        "documentation": {}
    },
    {
        "label": "MywRawDatabase",
        "importPath": "myworldapp.core.server.database.myw_raw_database",
        "description": "myworldapp.core.server.database.myw_raw_database",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.database.myw_raw_database",
        "documentation": {}
    },
    {
        "label": "codecs,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs.",
        "description": "codecs.",
        "detail": "codecs.",
        "documentation": {}
    },
    {
        "label": "parse_cache_config_options",
        "importPath": "beaker.util",
        "description": "beaker.util",
        "isExtraImport": true,
        "detail": "beaker.util",
        "documentation": {}
    },
    {
        "label": "Configurator",
        "importPath": "pyramid.config",
        "description": "pyramid.config",
        "isExtraImport": true,
        "detail": "pyramid.config",
        "documentation": {}
    },
    {
        "label": "session_factory_from_settings",
        "importPath": "pyramid_beaker",
        "description": "pyramid_beaker",
        "isExtraImport": true,
        "detail": "pyramid_beaker",
        "documentation": {}
    },
    {
        "label": "MywRoutingHandler",
        "importPath": "myworldapp.core.server.startup.myw_routing_handler",
        "description": "myworldapp.core.server.startup.myw_routing_handler",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.startup.myw_routing_handler",
        "documentation": {}
    },
    {
        "label": "MywJsonEncoderFactory",
        "importPath": "myworldapp.core.server.base.core.myw_decorator",
        "description": "myworldapp.core.server.base.core.myw_decorator",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.base.core.myw_decorator",
        "documentation": {}
    },
    {
        "label": "NewResponse",
        "importPath": "pyramid.events",
        "description": "pyramid.events",
        "isExtraImport": true,
        "detail": "pyramid.events",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "ConfigurationError",
        "importPath": "pyramid.exceptions",
        "description": "pyramid.exceptions",
        "isExtraImport": true,
        "detail": "pyramid.exceptions",
        "documentation": {}
    },
    {
        "label": "asbool",
        "importPath": "paste.deploy.converters",
        "description": "paste.deploy.converters",
        "isExtraImport": true,
        "detail": "paste.deploy.converters",
        "documentation": {}
    },
    {
        "label": "site,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site.",
        "description": "site.",
        "detail": "site.",
        "documentation": {}
    },
    {
        "label": "MywDbCommand",
        "importPath": "myworldapp.core.server.commands.myw_db_command",
        "description": "myworldapp.core.server.commands.myw_db_command",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.commands.myw_db_command",
        "documentation": {}
    },
    {
        "label": "MywEdsCommand",
        "importPath": "myworldapp.core.server.commands.myw_eds_command",
        "description": "myworldapp.core.server.commands.myw_eds_command",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.commands.myw_eds_command",
        "documentation": {}
    },
    {
        "label": "MywProductCommand",
        "importPath": "myworldapp.core.server.commands.myw_product_command",
        "description": "myworldapp.core.server.commands.myw_product_command",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.commands.myw_product_command",
        "documentation": {}
    },
    {
        "label": "MywTilestoreCommand",
        "importPath": "myworldapp.core.server.commands.myw_tilestore_command",
        "description": "myworldapp.core.server.commands.myw_tilestore_command",
        "isExtraImport": true,
        "detail": "myworldapp.core.server.commands.myw_tilestore_command",
        "documentation": {}
    },
    {
        "label": "pyodbc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyodbc",
        "description": "pyodbc",
        "detail": "pyodbc",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "load_config",
        "importPath": "utils.config_loader",
        "description": "utils.config_loader",
        "isExtraImport": true,
        "detail": "utils.config_loader",
        "documentation": {}
    },
    {
        "label": "setup_logger",
        "importPath": "utils.logger",
        "description": "utils.logger",
        "isExtraImport": true,
        "detail": "utils.logger",
        "documentation": {}
    },
    {
        "label": "handle_def_file_and_create_table",
        "importPath": "utils.def_handler",
        "description": "utils.def_handler",
        "isExtraImport": true,
        "detail": "utils.def_handler",
        "documentation": {}
    },
    {
        "label": "get_mssql_conn",
        "importPath": "utils.db_connections",
        "description": "utils.db_connections",
        "isExtraImport": true,
        "detail": "utils.db_connections",
        "documentation": {}
    },
    {
        "label": "get_postgres_conn",
        "importPath": "utils.db_connections",
        "description": "utils.db_connections",
        "isExtraImport": true,
        "detail": "utils.db_connections",
        "documentation": {}
    },
    {
        "label": "run_etl_for_table",
        "importPath": "utils.etl_executor",
        "description": "utils.etl_executor",
        "isExtraImport": true,
        "detail": "utils.etl_executor",
        "documentation": {}
    },
    {
        "label": "MywAuthenticator",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.auth.myw_authenticator",
        "description": "tools.myworldapp.core.server.auth.myw_authenticator",
        "peekOfCode": "class MywAuthenticator:\n    \"\"\"\n    Engine for authenticating a user's credentials\n    Internally, delegates work to the configured list of\n    auth_engines.\"\"\"\n    def __init__(self, role_names):\n        \"\"\"\n        Init slots of self\n        ROLE_NAMES is the list of myWorld roles. A user must have at\n        least one of these granted for authentication to succeed\"\"\"",
        "detail": "tools.myworldapp.core.server.auth.myw_authenticator",
        "documentation": {}
    },
    {
        "label": "initAuthEngines",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.auth.myw_authenticator",
        "description": "tools.myworldapp.core.server.auth.myw_authenticator",
        "peekOfCode": "def initAuthEngines():\n    registry = threadlocal.get_current_registry()\n    # error logging setup:\n    progress_level = registry.settings[\"myw.auth.options\"][\"log_level\"]\n    progress = MywSimpleProgressHandler(progress_level, \"INFO: AUTH_INIT:\")\n    for auth_engine_module in registry.settings[\"myw.auth.engines\"]:\n        try:\n            # First, try to import from the core server auth folder. If it fails, try to import from other modules\n            auth_class = \"myworldapp.core.server.auth.{}\".format(auth_engine_module)\n            engine_module = __import__(auth_class, globals(), locals(), fromlist=(\"myworldapp\"))",
        "detail": "tools.myworldapp.core.server.auth.myw_authenticator",
        "documentation": {}
    },
    {
        "label": "auth_engines",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_authenticator",
        "description": "tools.myworldapp.core.server.auth.myw_authenticator",
        "peekOfCode": "auth_engines = OrderedDict()\ndef initAuthEngines():\n    registry = threadlocal.get_current_registry()\n    # error logging setup:\n    progress_level = registry.settings[\"myw.auth.options\"][\"log_level\"]\n    progress = MywSimpleProgressHandler(progress_level, \"INFO: AUTH_INIT:\")\n    for auth_engine_module in registry.settings[\"myw.auth.engines\"]:\n        try:\n            # First, try to import from the core server auth folder. If it fails, try to import from other modules\n            auth_class = \"myworldapp.core.server.auth.{}\".format(auth_engine_module)",
        "detail": "tools.myworldapp.core.server.auth.myw_authenticator",
        "documentation": {}
    },
    {
        "label": "MywAuthEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.auth.myw_auth_engine",
        "description": "tools.myworldapp.core.server.auth.myw_auth_engine",
        "peekOfCode": "class MywAuthEngine:\n    \"\"\"\n    Abstract superclass for authentication engines\n    An authentication engine provides a mechanism for extracting\n    user credentials from a request (username and roles) and\n    checking that they are valid.\n    Subclasses must implement:\n      auth_fields                   List of fields to present in a login page. Empty means login isn't supported (or uses controls)\n      auth_controls                 List. For SSO auth engines, instead of fields we give a button or something.\n      authenticate(request)         Extract user name and role names from a request",
        "detail": "tools.myworldapp.core.server.auth.myw_auth_engine",
        "documentation": {}
    },
    {
        "label": "MywConfigCache",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.auth.myw_config_cache",
        "description": "tools.myworldapp.core.server.auth.myw_config_cache",
        "peekOfCode": "class MywConfigCache:\n    \"\"\"\n    In-memory cache of rights granted by a set of roles\n    Stores partial definitions of the layers, feature types etc\n    accessible to each application the roles can access\"\"\"\n    #  ENH: Could simplify by using cache classes internally\n    def __init__(self, db_session, role_names, config_version, progress):\n        \"\"\"\n        Init slots of self from SQLAlchemy database DB_SESSION\n        PROGRESS is a progress handler\"\"\"",
        "detail": "tools.myworldapp.core.server.auth.myw_config_cache",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_config_cache",
        "description": "tools.myworldapp.core.server.auth.myw_config_cache",
        "peekOfCode": "log = logging.getLogger(\"myworldapp\")\n# Cache of application configs, (keyed by config version + app name)\n# preserved across requests .. but not Apache reboots.\n# Shared across instances (no need to re-fetch defs for each different role combination )\n# data doesn't include rights details as that is an association between roles and applications (permissions)\n# calls to this cache object wait if another threads is populating the same item (instead of initiating the same work)\napp_config_cache = MywThreadSafeCache()\n# caches shared across instances, keyed on config version (no need to re-fetch defs for each different role combination )\n# only to be used during build of the cache (otherwise records could go stale)\n# Caches which store SQLA records (require a different cache class to handle stale sessions)",
        "detail": "tools.myworldapp.core.server.auth.myw_config_cache",
        "documentation": {}
    },
    {
        "label": "app_config_cache",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_config_cache",
        "description": "tools.myworldapp.core.server.auth.myw_config_cache",
        "peekOfCode": "app_config_cache = MywThreadSafeCache()\n# caches shared across instances, keyed on config version (no need to re-fetch defs for each different role combination )\n# only to be used during build of the cache (otherwise records could go stale)\n# Caches which store SQLA records (require a different cache class to handle stale sessions)\napplication_recs_cache = MywThreadSafeRecordCache()\nfeature_recs_cache = MywThreadSafeRecordCache()\nlayer_feature_items_cache = MywThreadSafeRecordCache()\n# Caches which store non-records (e.g. dictionaries and lists built from SQLA record objects)\nlayer_defs_cache = MywThreadSafeCache()\nfilters_cache = MywThreadSafeCache()",
        "detail": "tools.myworldapp.core.server.auth.myw_config_cache",
        "documentation": {}
    },
    {
        "label": "application_recs_cache",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_config_cache",
        "description": "tools.myworldapp.core.server.auth.myw_config_cache",
        "peekOfCode": "application_recs_cache = MywThreadSafeRecordCache()\nfeature_recs_cache = MywThreadSafeRecordCache()\nlayer_feature_items_cache = MywThreadSafeRecordCache()\n# Caches which store non-records (e.g. dictionaries and lists built from SQLA record objects)\nlayer_defs_cache = MywThreadSafeCache()\nfilters_cache = MywThreadSafeCache()\ndatasource_defs_cache = MywThreadSafeCache()\nnetwork_defs_cache = MywThreadSafeCache()\nlayer_render_details_cache = MywThreadSafeCache()\nclass MywConfigCache:",
        "detail": "tools.myworldapp.core.server.auth.myw_config_cache",
        "documentation": {}
    },
    {
        "label": "feature_recs_cache",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_config_cache",
        "description": "tools.myworldapp.core.server.auth.myw_config_cache",
        "peekOfCode": "feature_recs_cache = MywThreadSafeRecordCache()\nlayer_feature_items_cache = MywThreadSafeRecordCache()\n# Caches which store non-records (e.g. dictionaries and lists built from SQLA record objects)\nlayer_defs_cache = MywThreadSafeCache()\nfilters_cache = MywThreadSafeCache()\ndatasource_defs_cache = MywThreadSafeCache()\nnetwork_defs_cache = MywThreadSafeCache()\nlayer_render_details_cache = MywThreadSafeCache()\nclass MywConfigCache:\n    \"\"\"",
        "detail": "tools.myworldapp.core.server.auth.myw_config_cache",
        "documentation": {}
    },
    {
        "label": "layer_feature_items_cache",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_config_cache",
        "description": "tools.myworldapp.core.server.auth.myw_config_cache",
        "peekOfCode": "layer_feature_items_cache = MywThreadSafeRecordCache()\n# Caches which store non-records (e.g. dictionaries and lists built from SQLA record objects)\nlayer_defs_cache = MywThreadSafeCache()\nfilters_cache = MywThreadSafeCache()\ndatasource_defs_cache = MywThreadSafeCache()\nnetwork_defs_cache = MywThreadSafeCache()\nlayer_render_details_cache = MywThreadSafeCache()\nclass MywConfigCache:\n    \"\"\"\n    In-memory cache of rights granted by a set of roles",
        "detail": "tools.myworldapp.core.server.auth.myw_config_cache",
        "documentation": {}
    },
    {
        "label": "layer_defs_cache",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_config_cache",
        "description": "tools.myworldapp.core.server.auth.myw_config_cache",
        "peekOfCode": "layer_defs_cache = MywThreadSafeCache()\nfilters_cache = MywThreadSafeCache()\ndatasource_defs_cache = MywThreadSafeCache()\nnetwork_defs_cache = MywThreadSafeCache()\nlayer_render_details_cache = MywThreadSafeCache()\nclass MywConfigCache:\n    \"\"\"\n    In-memory cache of rights granted by a set of roles\n    Stores partial definitions of the layers, feature types etc\n    accessible to each application the roles can access\"\"\"",
        "detail": "tools.myworldapp.core.server.auth.myw_config_cache",
        "documentation": {}
    },
    {
        "label": "filters_cache",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_config_cache",
        "description": "tools.myworldapp.core.server.auth.myw_config_cache",
        "peekOfCode": "filters_cache = MywThreadSafeCache()\ndatasource_defs_cache = MywThreadSafeCache()\nnetwork_defs_cache = MywThreadSafeCache()\nlayer_render_details_cache = MywThreadSafeCache()\nclass MywConfigCache:\n    \"\"\"\n    In-memory cache of rights granted by a set of roles\n    Stores partial definitions of the layers, feature types etc\n    accessible to each application the roles can access\"\"\"\n    #  ENH: Could simplify by using cache classes internally",
        "detail": "tools.myworldapp.core.server.auth.myw_config_cache",
        "documentation": {}
    },
    {
        "label": "datasource_defs_cache",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_config_cache",
        "description": "tools.myworldapp.core.server.auth.myw_config_cache",
        "peekOfCode": "datasource_defs_cache = MywThreadSafeCache()\nnetwork_defs_cache = MywThreadSafeCache()\nlayer_render_details_cache = MywThreadSafeCache()\nclass MywConfigCache:\n    \"\"\"\n    In-memory cache of rights granted by a set of roles\n    Stores partial definitions of the layers, feature types etc\n    accessible to each application the roles can access\"\"\"\n    #  ENH: Could simplify by using cache classes internally\n    def __init__(self, db_session, role_names, config_version, progress):",
        "detail": "tools.myworldapp.core.server.auth.myw_config_cache",
        "documentation": {}
    },
    {
        "label": "network_defs_cache",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_config_cache",
        "description": "tools.myworldapp.core.server.auth.myw_config_cache",
        "peekOfCode": "network_defs_cache = MywThreadSafeCache()\nlayer_render_details_cache = MywThreadSafeCache()\nclass MywConfigCache:\n    \"\"\"\n    In-memory cache of rights granted by a set of roles\n    Stores partial definitions of the layers, feature types etc\n    accessible to each application the roles can access\"\"\"\n    #  ENH: Could simplify by using cache classes internally\n    def __init__(self, db_session, role_names, config_version, progress):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.auth.myw_config_cache",
        "documentation": {}
    },
    {
        "label": "layer_render_details_cache",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_config_cache",
        "description": "tools.myworldapp.core.server.auth.myw_config_cache",
        "peekOfCode": "layer_render_details_cache = MywThreadSafeCache()\nclass MywConfigCache:\n    \"\"\"\n    In-memory cache of rights granted by a set of roles\n    Stores partial definitions of the layers, feature types etc\n    accessible to each application the roles can access\"\"\"\n    #  ENH: Could simplify by using cache classes internally\n    def __init__(self, db_session, role_names, config_version, progress):\n        \"\"\"\n        Init slots of self from SQLAlchemy database DB_SESSION",
        "detail": "tools.myworldapp.core.server.auth.myw_config_cache",
        "documentation": {}
    },
    {
        "label": "MywCurrentUser",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.auth.myw_current_user",
        "description": "tools.myworldapp.core.server.auth.myw_current_user",
        "peekOfCode": "class MywCurrentUser:\n    \"\"\"\n    Wrapper to the current beaker session\n    Provides protocols for authenticating user, checking rights\n    and finding accessible objects.\n    Internally, caches some application-related and role-related\n    info for speed. This means that results do not always match\n    what it in the database. To refresh the cached data, use\n    .authenticate()\n    Internally delegates to MywAuthenticator and MywConfigCache.\"\"\"",
        "detail": "tools.myworldapp.core.server.auth.myw_current_user",
        "documentation": {}
    },
    {
        "label": "config_caches",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_current_user",
        "description": "tools.myworldapp.core.server.auth.myw_current_user",
        "peekOfCode": "config_caches = {}\n# Mapping from session id to shared MywConfigCache.\n# Avoids saving/loading large amounts of data in beaker session files (slow)\nsession_caches = {}\nclass MywCurrentUser:\n    \"\"\"\n    Wrapper to the current beaker session\n    Provides protocols for authenticating user, checking rights\n    and finding accessible objects.\n    Internally, caches some application-related and role-related",
        "detail": "tools.myworldapp.core.server.auth.myw_current_user",
        "documentation": {}
    },
    {
        "label": "session_caches",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_current_user",
        "description": "tools.myworldapp.core.server.auth.myw_current_user",
        "peekOfCode": "session_caches = {}\nclass MywCurrentUser:\n    \"\"\"\n    Wrapper to the current beaker session\n    Provides protocols for authenticating user, checking rights\n    and finding accessible objects.\n    Internally, caches some application-related and role-related\n    info for speed. This means that results do not always match\n    what it in the database. To refresh the cached data, use\n    .authenticate()",
        "detail": "tools.myworldapp.core.server.auth.myw_current_user",
        "documentation": {}
    },
    {
        "label": "MywInternalAuthEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.auth.myw_internal_auth_engine",
        "description": "tools.myworldapp.core.server.auth.myw_internal_auth_engine",
        "peekOfCode": "class MywInternalAuthEngine(MywAuthEngine):\n    \"\"\"\n    Engine for authenticating against user credentials stored in the myWorld database\n    \"\"\"\n    # Parameters expected in login requests\n    auth_fields = [\n        {\"id\": \"user\", \"type\": \"text\", \"label\": \"username\"},\n        {\"id\": \"pass\", \"type\": \"password\", \"label\": \"password\"},\n    ]\n    def authenticate(self, request):",
        "detail": "tools.myworldapp.core.server.auth.myw_internal_auth_engine",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_internal_auth_engine",
        "description": "tools.myworldapp.core.server.auth.myw_internal_auth_engine",
        "peekOfCode": "log = logging.getLogger(__name__)\n# Declare engine class (for dynamic loading - see myw_authenticator)\n__auth_engine__ = \"MywInternalAuthEngine\"\nclass MywInternalAuthEngine(MywAuthEngine):\n    \"\"\"\n    Engine for authenticating against user credentials stored in the myWorld database\n    \"\"\"\n    # Parameters expected in login requests\n    auth_fields = [\n        {\"id\": \"user\", \"type\": \"text\", \"label\": \"username\"},",
        "detail": "tools.myworldapp.core.server.auth.myw_internal_auth_engine",
        "documentation": {}
    },
    {
        "label": "__auth_engine__",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_internal_auth_engine",
        "description": "tools.myworldapp.core.server.auth.myw_internal_auth_engine",
        "peekOfCode": "__auth_engine__ = \"MywInternalAuthEngine\"\nclass MywInternalAuthEngine(MywAuthEngine):\n    \"\"\"\n    Engine for authenticating against user credentials stored in the myWorld database\n    \"\"\"\n    # Parameters expected in login requests\n    auth_fields = [\n        {\"id\": \"user\", \"type\": \"text\", \"label\": \"username\"},\n        {\"id\": \"pass\", \"type\": \"password\", \"label\": \"password\"},\n    ]",
        "detail": "tools.myworldapp.core.server.auth.myw_internal_auth_engine",
        "documentation": {}
    },
    {
        "label": "MywLdapAuthEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.auth.myw_ldap_auth_engine",
        "description": "tools.myworldapp.core.server.auth.myw_ldap_auth_engine",
        "peekOfCode": "class MywLdapAuthEngine(MywAuthEngine):\n    \"\"\"\n    Engine for authenticating via LDAP (Active Directory or similar)\n    Authentcates the user in LDAP using a simple bind operation\n    and gets the user roles from the groups defined in LDAP.\n    Supports use of an optional 'service account' for\n    pre-filtering requests (see authenticate)\n    \"\"\"\n    # Class constants\n    auth_fields = [  # User logins in to myWorld, we validate them",
        "detail": "tools.myworldapp.core.server.auth.myw_ldap_auth_engine",
        "documentation": {}
    },
    {
        "label": "__auth_engine__",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_ldap_auth_engine",
        "description": "tools.myworldapp.core.server.auth.myw_ldap_auth_engine",
        "peekOfCode": "__auth_engine__ = \"MywLdapAuthEngine\"\nclass MywLdapAuthEngine(MywAuthEngine):\n    \"\"\"\n    Engine for authenticating via LDAP (Active Directory or similar)\n    Authentcates the user in LDAP using a simple bind operation\n    and gets the user roles from the groups defined in LDAP.\n    Supports use of an optional 'service account' for\n    pre-filtering requests (see authenticate)\n    \"\"\"\n    # Class constants",
        "detail": "tools.myworldapp.core.server.auth.myw_ldap_auth_engine",
        "documentation": {}
    },
    {
        "label": "MywOidcAuthEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.auth.myw_oidc_auth_engine",
        "description": "tools.myworldapp.core.server.auth.myw_oidc_auth_engine",
        "peekOfCode": "class MywOidcAuthEngine(MywAuthEngine):\n    \"\"\"\n    Engine for authenticating via OpenID Connect\n    Forwards the user to the OpenID Provider (OP), where they authenticate.\n    Catches the redirected response from OP, and processes it to retrieve\n    user identity and role information.\n    \"\"\"\n    # Class constants\n    auth_fields = []\n    auth_controls = [",
        "detail": "tools.myworldapp.core.server.auth.myw_oidc_auth_engine",
        "documentation": {}
    },
    {
        "label": "__auth_engine__",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_oidc_auth_engine",
        "description": "tools.myworldapp.core.server.auth.myw_oidc_auth_engine",
        "peekOfCode": "__auth_engine__ = \"MywOidcAuthEngine\"\nclass MywOidcAuthEngine(MywAuthEngine):\n    \"\"\"\n    Engine for authenticating via OpenID Connect\n    Forwards the user to the OpenID Provider (OP), where they authenticate.\n    Catches the redirected response from OP, and processes it to retrieve\n    user identity and role information.\n    \"\"\"\n    # Class constants\n    auth_fields = []",
        "detail": "tools.myworldapp.core.server.auth.myw_oidc_auth_engine",
        "documentation": {}
    },
    {
        "label": "MywOidcStateCache",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.auth.myw_oidc_state_cache",
        "description": "tools.myworldapp.core.server.auth.myw_oidc_state_cache",
        "peekOfCode": "class MywOidcStateCache(StateInterface):\n    \"\"\"\n    State Interface for storing OIDC state information\n    state is stored in a shared beaker cache.\n    \"\"\"\n    @cached_property\n    def sharedCacheManager(self):\n        \"\"\"\n        A shared cache manager (memcache) or None if not configured\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.auth.myw_oidc_state_cache",
        "documentation": {}
    },
    {
        "label": "MywPassthroughAuthEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.auth.myw_passthrough_auth_engine",
        "description": "tools.myworldapp.core.server.auth.myw_passthrough_auth_engine",
        "peekOfCode": "class MywPassthroughAuthEngine(MywAuthEngine):\n    \"\"\"\n    Engine for authenticating via a web access manager (WAM)\n    The WAM injectes user name and roles into the HTTP request\n    header. This engine just extracts the info, if present.\"\"\"\n    # Class constants\n    auth_fields = []  # Users log in to WAM, not myWorld\n    def __init__(self, config):\n        \"\"\"\n        Init slots of self",
        "detail": "tools.myworldapp.core.server.auth.myw_passthrough_auth_engine",
        "documentation": {}
    },
    {
        "label": "__auth_engine__",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_passthrough_auth_engine",
        "description": "tools.myworldapp.core.server.auth.myw_passthrough_auth_engine",
        "peekOfCode": "__auth_engine__ = \"MywPassthroughAuthEngine\"\nclass MywPassthroughAuthEngine(MywAuthEngine):\n    \"\"\"\n    Engine for authenticating via a web access manager (WAM)\n    The WAM injectes user name and roles into the HTTP request\n    header. This engine just extracts the info, if present.\"\"\"\n    # Class constants\n    auth_fields = []  # Users log in to WAM, not myWorld\n    def __init__(self, config):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.auth.myw_passthrough_auth_engine",
        "documentation": {}
    },
    {
        "label": "MywPublicAccessAuthEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.auth.myw_public_access_auth_engine",
        "description": "tools.myworldapp.core.server.auth.myw_public_access_auth_engine",
        "peekOfCode": "class MywPublicAccessAuthEngine(MywAuthEngine):\n    \"\"\"\n    Engine for pre-configured (fixed) authentication\n    All requests are authenticated using the same username and\n    role names (set in config file)\n    \"\"\"\n    # Class constants\n    auth_fields = []  # Everyone gets same credentials, so no point in logging in\n    def __init__(self, config):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.auth.myw_public_access_auth_engine",
        "documentation": {}
    },
    {
        "label": "__auth_engine__",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_public_access_auth_engine",
        "description": "tools.myworldapp.core.server.auth.myw_public_access_auth_engine",
        "peekOfCode": "__auth_engine__ = \"MywPublicAccessAuthEngine\"\nclass MywPublicAccessAuthEngine(MywAuthEngine):\n    \"\"\"\n    Engine for pre-configured (fixed) authentication\n    All requests are authenticated using the same username and\n    role names (set in config file)\n    \"\"\"\n    # Class constants\n    auth_fields = []  # Everyone gets same credentials, so no point in logging in\n    def __init__(self, config):",
        "detail": "tools.myworldapp.core.server.auth.myw_public_access_auth_engine",
        "documentation": {}
    },
    {
        "label": "MywSamlAuthEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.auth.myw_saml_auth_engine",
        "description": "tools.myworldapp.core.server.auth.myw_saml_auth_engine",
        "peekOfCode": "class MywSamlAuthEngine(MywAuthEngine):\n    \"\"\"\n    Engine for authenticating via SAML\n    Authenticates the user in LDAP using a simple bind operation\n    and gets the user roles from the groups defined in LDAP.\n    \"\"\"\n    # Class constants\n    auth_fields = []\n    auth_controls = [\n        {",
        "detail": "tools.myworldapp.core.server.auth.myw_saml_auth_engine",
        "documentation": {}
    },
    {
        "label": "__auth_engine__",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.auth.myw_saml_auth_engine",
        "description": "tools.myworldapp.core.server.auth.myw_saml_auth_engine",
        "peekOfCode": "__auth_engine__ = \"MywSamlAuthEngine\"\nclass MywSamlAuthEngine(MywAuthEngine):\n    \"\"\"\n    Engine for authenticating via SAML\n    Authenticates the user in LDAP using a simple bind operation\n    and gets the user roles from the groups defined in LDAP.\n    \"\"\"\n    # Class constants\n    auth_fields = []\n    auth_controls = [",
        "detail": "tools.myworldapp.core.server.auth.myw_saml_auth_engine",
        "documentation": {}
    },
    {
        "label": "JsonifyError",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_decorator",
        "description": "tools.myworldapp.core.server.base.core.myw_decorator",
        "peekOfCode": "class JsonifyError(Exception):\n    pass\nclass MywJsonEncoder(GeoJSONEncoder):\n    \"\"\"\n    Extended JSON encoder handling PostgreSQL types\n    ENH: Upgrade to simplejson 3.3.1 and remove this\"\"\"\n    def default(self, obj):\n        \"\"\"\n        Cast OBJ to a JSON-serialisable type\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.base.core.myw_decorator",
        "documentation": {}
    },
    {
        "label": "MywJsonEncoder",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_decorator",
        "description": "tools.myworldapp.core.server.base.core.myw_decorator",
        "peekOfCode": "class MywJsonEncoder(GeoJSONEncoder):\n    \"\"\"\n    Extended JSON encoder handling PostgreSQL types\n    ENH: Upgrade to simplejson 3.3.1 and remove this\"\"\"\n    def default(self, obj):\n        \"\"\"\n        Cast OBJ to a JSON-serialisable type\n        \"\"\"\n        if hasattr(obj, \"__myw_json__\"):\n            return obj.__myw_json__()",
        "detail": "tools.myworldapp.core.server.base.core.myw_decorator",
        "documentation": {}
    },
    {
        "label": "MywJsonEncoderFactory",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_decorator",
        "description": "tools.myworldapp.core.server.base.core.myw_decorator",
        "peekOfCode": "class MywJsonEncoderFactory:\n    def __call__(self, info):\n        def _render(value, system):\n            request = system.get(\"request\")\n            if request is not None:\n                response = request.response\n                ct = response.content_type\n                if ct == response.default_content_type:\n                    response.content_type = \"application/json\"\n            try:",
        "detail": "tools.myworldapp.core.server.base.core.myw_decorator",
        "documentation": {}
    },
    {
        "label": "MywException",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_error",
        "description": "tools.myworldapp.core.server.base.core.myw_error",
        "peekOfCode": "class MywException(Exception):\n    \"\"\"\n    Superclass for myWorld exceptions\n    Provides message formatting\"\"\"\n    def __init__(self, *msg_items, **kwargs):\n        \"\"\"\n        Construct from a string\n        Optional MSG_ITEMS are substituted into MSG using .format()\"\"\"\n        self.msg = \"\"\n        for item in msg_items:",
        "detail": "tools.myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywError",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_error",
        "description": "tools.myworldapp.core.server.base.core.myw_error",
        "peekOfCode": "class MywError(MywException):\n    \"\"\"\n    Raised by myWorld when it detects bad data (an 'expected' error)\n    \"\"\"\n    pass\nclass MywCoordSystemError(MywError):\n    \"\"\"\n    Raised by myWorld when re-projecting geometry\n    \"\"\"\n    pass",
        "detail": "tools.myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywCoordSystemError",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_error",
        "description": "tools.myworldapp.core.server.base.core.myw_error",
        "peekOfCode": "class MywCoordSystemError(MywError):\n    \"\"\"\n    Raised by myWorld when re-projecting geometry\n    \"\"\"\n    pass\nclass MywProjFileMissingError(MywError):\n    \"\"\"\n    Raised by myWorld when Proj cannot find a requested data file.\n    \"\"\"\n    def __init__(self, *msg_items, **kwargs):",
        "detail": "tools.myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywProjFileMissingError",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_error",
        "description": "tools.myworldapp.core.server.base.core.myw_error",
        "peekOfCode": "class MywProjFileMissingError(MywError):\n    \"\"\"\n    Raised by myWorld when Proj cannot find a requested data file.\n    \"\"\"\n    def __init__(self, *msg_items, **kwargs):\n        super().__init__(*msg_items, **kwargs)\n        try:\n            self.path = kwargs[\"path\"]\n        except KeyError:\n            self.path = \"\"",
        "detail": "tools.myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywDataLoadError",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_error",
        "description": "tools.myworldapp.core.server.base.core.myw_error",
        "peekOfCode": "class MywDataLoadError(MywError):\n    \"\"\"\n    Raised by myWorld when an error occurs reading a file\n    \"\"\"\n    pass\nclass MywInvalidFileTypeError(MywError):\n    \"\"\"\n    Raised by myWorld when an error occurs determining how to process a file\n    \"\"\"\n    pass",
        "detail": "tools.myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInvalidFileTypeError",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_error",
        "description": "tools.myworldapp.core.server.base.core.myw_error",
        "peekOfCode": "class MywInvalidFileTypeError(MywError):\n    \"\"\"\n    Raised by myWorld when an error occurs determining how to process a file\n    \"\"\"\n    pass\nclass MywUnknownFeatureTypeError(MywError):\n    \"\"\"\n    Raised by mywWOrld when a FeatureType is missing\n    \"\"\"\n    pass",
        "detail": "tools.myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywUnknownFeatureTypeError",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_error",
        "description": "tools.myworldapp.core.server.base.core.myw_error",
        "peekOfCode": "class MywUnknownFeatureTypeError(MywError):\n    \"\"\"\n    Raised by mywWOrld when a FeatureType is missing\n    \"\"\"\n    pass\nclass MywDbQueryTimeOutError(MywError):\n    \"\"\"\n    Raised by myWorld when a database query times out\n    \"\"\"\n    pass",
        "detail": "tools.myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywDbQueryTimeOutError",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_error",
        "description": "tools.myworldapp.core.server.base.core.myw_error",
        "peekOfCode": "class MywDbQueryTimeOutError(MywError):\n    \"\"\"\n    Raised by myWorld when a database query times out\n    \"\"\"\n    pass\nclass MywInternalError(MywException):\n    \"\"\"\n    Raised by myWorld when a software issue is detected\n    \"\"\"\n    pass",
        "detail": "tools.myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywInternalError",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_error",
        "description": "tools.myworldapp.core.server.base.core.myw_error",
        "peekOfCode": "class MywInternalError(MywException):\n    \"\"\"\n    Raised by myWorld when a software issue is detected\n    \"\"\"\n    pass",
        "detail": "tools.myworldapp.core.server.base.core.myw_error",
        "documentation": {}
    },
    {
        "label": "MywLazySet",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_lazy_set",
        "description": "tools.myworldapp.core.server.base.core.myw_lazy_set",
        "peekOfCode": "class MywLazySet:\n    \"\"\"\n    A keyed set of values, some of which may be lazy evaluated\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Init slots of self\n        \"\"\"\n        self.functs = {}\n        self.values = {}",
        "detail": "tools.myworldapp.core.server.base.core.myw_lazy_set",
        "documentation": {}
    },
    {
        "label": "MywOsEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_os_engine",
        "description": "tools.myworldapp.core.server.base.core.myw_os_engine",
        "peekOfCode": "class MywOsEngine:\n    \"\"\"\n    Engine for performing operating system operations\n    Provides protocols for walking trees, zipping files, running\n    subprocesses, etc. Wraps calls to os, shutil etc in a\n    single API + provides progress reporting.\"\"\"\n    def __init__(self, progress=MywProgressHandler()):\n        \"\"\"\n        Init slots of self from command line args CLI_ARGS\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.base.core.myw_os_engine",
        "documentation": {}
    },
    {
        "label": "is_subdirectory",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.base.core.myw_os_engine",
        "description": "tools.myworldapp.core.server.base.core.myw_os_engine",
        "peekOfCode": "def is_subdirectory(basedir, path, follow_symlinks=True):\n    \"\"\"\n    Returns False if a path is outside of a base directory\n    \"\"\"\n    # resolves symbolic links\n    if follow_symlinks:\n        basepath = os.path.realpath(basedir)\n        matchpath = os.path.realpath(path)\n    else:\n        basepath = os.path.abspath(basedir)",
        "detail": "tools.myworldapp.core.server.base.core.myw_os_engine",
        "documentation": {}
    },
    {
        "label": "myw_os_types",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.base.core.myw_os_engine",
        "description": "tools.myworldapp.core.server.base.core.myw_os_engine",
        "peekOfCode": "myw_os_types = {\"nt\": \"windows\", \"posix\": \"linux\"}\nclass MywOsEngine:\n    \"\"\"\n    Engine for performing operating system operations\n    Provides protocols for walking trees, zipping files, running\n    subprocesses, etc. Wraps calls to os, shutil etc in a\n    single API + provides progress reporting.\"\"\"\n    def __init__(self, progress=MywProgressHandler()):\n        \"\"\"\n        Init slots of self from command line args CLI_ARGS",
        "detail": "tools.myworldapp.core.server.base.core.myw_os_engine",
        "documentation": {}
    },
    {
        "label": "MywProgressHandler",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_progress",
        "description": "tools.myworldapp.core.server.base.core.myw_progress",
        "peekOfCode": "class MywProgressHandler:\n    \"\"\"\n    Superclass for engine progress message handlers\n    Receives messages from engines via __call__(level,*msg)\n    Default implementation does nothing\"\"\"\n    level = 1\n    def __call__(self, level, *msg, **counts):\n        \"\"\"\n        Write progress output (if requested)\n        LEVEL is one of:",
        "detail": "tools.myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywSimpleProgressHandler",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_progress",
        "description": "tools.myworldapp.core.server.base.core.myw_progress",
        "peekOfCode": "class MywSimpleProgressHandler(MywProgressHandler):\n    \"\"\"\n    Progress handler that prints messages if priority is high enough\n    Also gathers statistics on operations\"\"\"\n    # ENH: Support passing a format string + args\n    def __init__(self, level, prefix=\"\", out=None):\n        \"\"\"\n        Init slots of self\n        \"\"\"\n        self.level = level",
        "detail": "tools.myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywLazyJsonFormatter",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_progress",
        "description": "tools.myworldapp.core.server.base.core.myw_progress",
        "peekOfCode": "class MywLazyJsonFormatter:\n    \"\"\"\n    Helper for formatting JSON on demand in progress messages\n    \"\"\"\n    def __init__(self, json_dict):\n        \"\"\"\n        Init slots of self\n        \"\"\"\n        self.json_dict = json_dict\n    def __str__(self):",
        "detail": "tools.myworldapp.core.server.base.core.myw_progress",
        "documentation": {}
    },
    {
        "label": "MywTableFormatter",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_tabulation",
        "description": "tools.myworldapp.core.server.base.core.myw_tabulation",
        "peekOfCode": "class MywTableFormatter:\n    \"\"\"\n    Helper class to format column-aligned data\n    Supports output of selected columns from an ordered list of dicts.\"\"\"\n    layouts = [\"columns\", \"keys\", \"records\", \"csv\"]\n    def __init__(self, *col_defs):\n        \"\"\"\n        Build a formatter that will output columns defined by COL_DEFS\n        Each COL_DEF is a string or vector (see .addColumn())\"\"\"\n        self.cols = []",
        "detail": "tools.myworldapp.core.server.base.core.myw_tabulation",
        "documentation": {}
    },
    {
        "label": "MywThreadSafeCache",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_thread_safe_cache",
        "description": "tools.myworldapp.core.server.base.core.myw_thread_safe_cache",
        "peekOfCode": "class MywThreadSafeCache:\n    \"\"\"\n    In-memory cache of rights granted by a set of roles\n    Stores partial definitions of the layers, feature types etc\n    accessible to each application the roles can access\"\"\"\n    def __init__(self):\n        \"\"\"\n        Initialises slots to hold cache and thread management\n        \"\"\"\n        self.cache = {}",
        "detail": "tools.myworldapp.core.server.base.core.myw_thread_safe_cache",
        "documentation": {}
    },
    {
        "label": "MywThreadSafeRecordCache",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_thread_safe_record_cache",
        "description": "tools.myworldapp.core.server.base.core.myw_thread_safe_record_cache",
        "peekOfCode": "class MywThreadSafeRecordCache(MywThreadSafeCache):\n    \"\"\"\n    In-memory cache of SqlAlchemy records (which may expire.)\n    Stores the records, but checks their validity before returning and re-computes their value to\n    cache afresh.\n    Assumes that the value in the cache is a dictionary where the values() are records.\"\"\"\n    def __init__(self):\n        super().__init__()\n        self.progress = MywSimpleProgressHandler(1, \"RECORD CACHE:\")\n    def get(self, key, proc, *args):",
        "detail": "tools.myworldapp.core.server.base.core.myw_thread_safe_record_cache",
        "documentation": {}
    },
    {
        "label": "MywUnitScale",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.myw_units",
        "description": "tools.myworldapp.core.server.base.core.myw_units",
        "peekOfCode": "class MywUnitScale:\n    \"\"\"\n    A unit conversion scale\n    \"\"\"\n    # ENH: Support long names, groups, ...\n    # ENH: Convert to a DB model?\n    def __init__(self, scale_type, scale_def):\n        \"\"\"\n        Returns a new unit convertor object\n        SCALE_DEF is a dict\"\"\"",
        "detail": "tools.myworldapp.core.server.base.core.myw_units",
        "documentation": {}
    },
    {
        "label": "NullContextManager",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.utils",
        "description": "tools.myworldapp.core.server.base.core.utils",
        "peekOfCode": "class NullContextManager:\n    \"\"\"\n    No-op context manager, executes block without doing any additional processing\n    \"\"\"\n    def __enter__(self):\n        pass\n    def __exit__(self, *exc_info):\n        pass\nclass FileIterator:\n    \"\"\"",
        "detail": "tools.myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "FileIterator",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.utils",
        "description": "tools.myworldapp.core.server.base.core.utils",
        "peekOfCode": "class FileIterator:\n    \"\"\"\n    Iterator to stream a file in chunks\n    \"\"\"\n    CHUNK_SIZE = 4096\n    def __init__(self, filename, bytes):\n        self.filename = filename\n        self.fileobj = open(self.filename, \"rb\")\n        self.fileobj.seek(bytes)\n    def __del__(self):",
        "detail": "tools.myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "SharedDict",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.utils",
        "description": "tools.myworldapp.core.server.base.core.utils",
        "peekOfCode": "class SharedDict:\n    \"\"\"\n    Basic funcationality of a Dict supported on a beaker Cache so it can be shared across processes\n    \"\"\"\n    def __init__(self, sharedCache):\n        self.cache = sharedCache\n    def __setitem__(self, key, item):\n        self.cache.put(key, item)\n    def __getitem__(self, key):\n        return self.get(key)",
        "detail": "tools.myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "PropertyDict",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.core.utils",
        "description": "tools.myworldapp.core.server.base.core.utils",
        "peekOfCode": "class PropertyDict(dict):\n    \"\"\"A dictionary which allows setattr.\"\"\"\n    pass\n_err_re = re.compile(r\"^\\([^\\s].+?\\) (.+?)$\")\ndef interpret_data_error(e):\n    lines = str(e).split(\"\\n\")\n    # Sometimes SQLA puts a line of context output at the top. Try to parse the first two lines\n    # for the inner exception.\n    first_line = lines[0].strip()\n    match = _err_re.search(first_line)",
        "detail": "tools.myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "isHexadecimal",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.base.core.utils",
        "description": "tools.myworldapp.core.server.base.core.utils",
        "peekOfCode": "def isHexadecimal(value):\n    \"\"\"\n    Returns true if value is  a hexadecimal string\n    \"\"\"\n    if not isinstance(value, str):\n        return False\n    return all(c in string.hexdigits for c in value)\ndef replace_env_variables_in(string, **overrides):\n    \"\"\"\n    Replace references to OS environment values in STRING by their values",
        "detail": "tools.myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "replace_env_variables_in",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.base.core.utils",
        "description": "tools.myworldapp.core.server.base.core.utils",
        "peekOfCode": "def replace_env_variables_in(string, **overrides):\n    \"\"\"\n    Replace references to OS environment values in STRING by their values\n    \"\"\"\n    # Variables are identified by {VAR_NAME}\n    # Find names of referened variables\n    var_names = re.findall(\"\\{([^\\}]+)\\}\", string)\n    # Replace by their values (where they are set)\n    for var_name in var_names:\n        var_value = overrides.get(var_name)",
        "detail": "tools.myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "filter_by_key",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.base.core.utils",
        "description": "tools.myworldapp.core.server.base.core.utils",
        "peekOfCode": "def filter_by_key(filter_proc, dict):\n    \"\"\"\n    Returns a version of DICT filtered by FILTER_PROC logic\n    \"\"\"\n    # FILTER_PROC is expected to have the signature fnc(k) returns bool\n    # returning true if item should be kept.\n    filtered_dict = OrderedDict()\n    for key, value in list(dict.items()):\n        if filter_proc(key):\n            filtered_dict[key] = value",
        "detail": "tools.myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "sort_by_key",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.base.core.utils",
        "description": "tools.myworldapp.core.server.base.core.utils",
        "peekOfCode": "def sort_by_key(dict):\n    \"\"\"\n    Returns a version of DICT with repeatable key order\n    \"\"\"\n    sorted_dict = OrderedDict()\n    for key in sorted(dict.keys()):\n        sorted_dict[key] = dict[key]\n    return sorted_dict\nclass NullContextManager:\n    \"\"\"",
        "detail": "tools.myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "serveDownload",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.base.core.utils",
        "description": "tools.myworldapp.core.server.base.core.utils",
        "peekOfCode": "def serveDownload(request, filename):\n    if not os.path.exists(filename):\n        raise exc.HTTPNotFound()\n    fileSize = os.path.getsize(filename)\n    rangeOffset = 0\n    if request.range is not None:\n        cr = request.range.content_range(length=fileSize)\n        rangeOffset = cr.start\n        request.response.status_code = 206\n    name = os.path.basename(filename)",
        "detail": "tools.myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "getCacheManager",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.base.core.utils",
        "description": "tools.myworldapp.core.server.base.core.utils",
        "peekOfCode": "def getCacheManager(key, expire=86400):\n    \"\"\"\n    Obtains a shared cache manager if an appropriate external system (redis or memcached) is configured to be used by beaker\n    results are cached per key\n    \"\"\"\n    if key in cacheManagers:\n        return cacheManagers[key]\n    registry = threadlocal.get_current_registry()\n    config = registry.settings or {}\n    beakerType = config.get(\"session.type\", None)",
        "detail": "tools.myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "read_password_from_stdin",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.base.core.utils",
        "description": "tools.myworldapp.core.server.base.core.utils",
        "peekOfCode": "def read_password_from_stdin():\n    \"\"\"\n    Reads a password from stdin\n    Returns String password\"\"\"\n    import getpass, sys\n    if (\n        sys.stdin.isatty()\n    ):  # If we're connected to a tty-like device (such as a console), then use the user-friendly getpass.\n        return getpass.getpass()\n    else:",
        "detail": "tools.myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "search_json_structure",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.base.core.utils",
        "description": "tools.myworldapp.core.server.base.core.utils",
        "peekOfCode": "def search_json_structure(o, key, _type):\n    \"\"\"search o (any type of JSON structure) for a dictionary with `key`, pointing to a value matching `type`, recursively.\n    `o`: object to search (may be any type allowed in JSON.)\n    `key`: a string.\n    `_type`: a type or tuple of types (same as isinstance's second argument).\n    returns: None if not found, or the value that the key pointed to.\"\"\"\n    if isinstance(o, list):\n        for child in o:\n            result = search_json_structure(child, key, _type)\n            if result is not None:",
        "detail": "tools.myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "interpret_data_error",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.base.core.utils",
        "description": "tools.myworldapp.core.server.base.core.utils",
        "peekOfCode": "def interpret_data_error(e):\n    lines = str(e).split(\"\\n\")\n    # Sometimes SQLA puts a line of context output at the top. Try to parse the first two lines\n    # for the inner exception.\n    first_line = lines[0].strip()\n    match = _err_re.search(first_line)\n    if not match:\n        second_line = lines[1].strip()\n        match = _err_re.search(second_line)\n    err_message = \"bad parameter.\"",
        "detail": "tools.myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "cacheManagers",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.base.core.utils",
        "description": "tools.myworldapp.core.server.base.core.utils",
        "peekOfCode": "cacheManagers = {}\ndef getCacheManager(key, expire=86400):\n    \"\"\"\n    Obtains a shared cache manager if an appropriate external system (redis or memcached) is configured to be used by beaker\n    results are cached per key\n    \"\"\"\n    if key in cacheManagers:\n        return cacheManagers[key]\n    registry = threadlocal.get_current_registry()\n    config = registry.settings or {}",
        "detail": "tools.myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "_err_re",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.base.core.utils",
        "description": "tools.myworldapp.core.server.base.core.utils",
        "peekOfCode": "_err_re = re.compile(r\"^\\([^\\s].+?\\) (.+?)$\")\ndef interpret_data_error(e):\n    lines = str(e).split(\"\\n\")\n    # Sometimes SQLA puts a line of context output at the top. Try to parse the first two lines\n    # for the inner exception.\n    first_line = lines[0].strip()\n    match = _err_re.search(first_line)\n    if not match:\n        second_line = lines[1].strip()\n        match = _err_re.search(second_line)",
        "detail": "tools.myworldapp.core.server.base.core.utils",
        "documentation": {}
    },
    {
        "label": "init_session",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.base.db.globals",
        "description": "tools.myworldapp.core.server.base.db.globals",
        "peekOfCode": "def init_session(session, engine):\n    \"\"\"\n    Initialise SESSION after database has been opened\n    ENGINE is a SQLAlchemy database engine\n    \"\"\"\n    # Connect session to database\n    # ENH: Sort out MywDbServer.openSecondarySession() and remove the test\n    if hasattr(session, \"configure\"):\n        session.configure(bind=engine)\n    # MYW: Add driver for name mapping etc",
        "detail": "tools.myworldapp.core.server.base.db.globals",
        "documentation": {}
    },
    {
        "label": "MywDbDriver",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_db_driver",
        "description": "tools.myworldapp.core.server.base.db.myw_db_driver",
        "peekOfCode": "class MywDbDriver:\n    \"\"\"\n    Abstract superclass for myw database drivers\n    Provides a database-independent API for performing various\n    functions missing from SQLAlchemy:\n     - Name mapping:     Conversion from myWorld names to database object names (see .dbNameFor()\n     - Type mapping:     Mapping from myWorld types to DB types\n     - Table management: Create/mutate/drop tables\n     - Trigger building: Construction of feature and system table triggers\n     - Locking:          Advisory lock acquisition",
        "detail": "tools.myworldapp.core.server.base.db.myw_db_driver",
        "documentation": {}
    },
    {
        "label": "MywDbTable",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "description": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "peekOfCode": "class MywDbTable:\n    \"\"\"\n    A database table descriptor\n    Defines table structure, indexes and constraints\"\"\"\n    def __init__(self, schema, name, *items):\n        \"\"\"\n        Init slots of self\n        Optional ITEMS are MywDbColumn, MywDbIndex and MywConstraintDesc objects\"\"\"\n        # Init slots\n        self.schema = schema",
        "detail": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbTableItem",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "description": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "peekOfCode": "class MywDbTableItem:\n    \"\"\"\n    Abstract superclass for field, index and constraint descriptors\n    \"\"\"\n    def __init__(self, table=None):\n        self.table = table\n    @property\n    def table_name(self):\n        \"\"\"\n        Name of the table to which self related",
        "detail": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "description": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "peekOfCode": "class MywDbColumn(MywDbTableItem):\n    \"\"\"\n    Database field descriptor\n    Has database-independent properties name, type\n    etc. Reflected columns also have database-specific property db_type\"\"\"\n    def __init__(\n        self,\n        name,\n        type,\n        key=False,",
        "detail": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbType",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "description": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "peekOfCode": "class MywDbType(MywDbTableItem):\n    \"\"\"\n    Database field type descriptor\n    \"\"\"\n    base_types = [\n        \"reference\",\n        \"reference_set\",\n        \"foreign_key\",\n        \"link\",\n        \"boolean\",",
        "detail": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbIndex",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "description": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "peekOfCode": "class MywDbIndex(MywDbTableItem):\n    \"\"\"\n    Database index descriptor\n    \"\"\"\n    def __init__(\n        self, column_names, type=None, unique=False, db_name=None, db_options=None\n    ):  # ENH: gather args?\n        \"\"\"\n        Init slots of self\n        COLUMN_NAMES is an ordered list of column names. TYPE is one of:",
        "detail": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbConstraint",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "description": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "peekOfCode": "class MywDbConstraint(MywDbTableItem):\n    \"\"\"\n    Database table constraint descriptor\n    \"\"\"\n    # ENH: Better as separate classes MywDbUniqueConstraint, MywDbForeignKeyConstraint, ...?\n    @staticmethod\n    def pKey(*column_names):\n        \"\"\"\n        Convenience wrapper returning a new primary key constraint\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.base.db.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbPredicate",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_db_predicate",
        "description": "tools.myworldapp.core.server.base.db.myw_db_predicate",
        "peekOfCode": "class MywDbPredicate:\n    \"\"\"\n    A node in a filter expression parse tree\n    Represents an operator, literal or variable reference (see .type).\n    Also implements tree-like behaviour that operates on it's subtree\"\"\"\n    # ==============================================================================\n    #                                 CONSTRUCTION\n    # ==============================================================================\n    def __init__(self, type, value, *operands):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.base.db.myw_db_predicate",
        "documentation": {}
    },
    {
        "label": "MywDbPredicate.false",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.base.db.myw_db_predicate",
        "description": "tools.myworldapp.core.server.base.db.myw_db_predicate",
        "peekOfCode": "MywDbPredicate.false = MywDbPredicate(\"bool_const\", False)\nMywDbPredicate.true = MywDbPredicate(\"bool_const\", True)",
        "detail": "tools.myworldapp.core.server.base.db.myw_db_predicate",
        "documentation": {}
    },
    {
        "label": "MywDbPredicate.true",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.base.db.myw_db_predicate",
        "description": "tools.myworldapp.core.server.base.db.myw_db_predicate",
        "peekOfCode": "MywDbPredicate.true = MywDbPredicate(\"bool_const\", True)",
        "detail": "tools.myworldapp.core.server.base.db.myw_db_predicate",
        "documentation": {}
    },
    {
        "label": "MywDbServer",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_db_server",
        "description": "tools.myworldapp.core.server.base.db.myw_db_server",
        "peekOfCode": "class MywDbServer(ABC):\n    \"\"\"\n    Abstarct superclass for low level server engines\n    Provides facilities for creating, deleting and opening databases\n    Subclasses must implement:\n      connectSpecFor(db_name, **kwargs)\n      exists(name)\n      create(name,template,schema_only)\n      drop(name)\n      backup(name,archive_file)",
        "detail": "tools.myworldapp.core.server.base.db.myw_db_server",
        "documentation": {}
    },
    {
        "label": "MywExpressionParser",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_expression_parser",
        "description": "tools.myworldapp.core.server.base.db.myw_expression_parser",
        "peekOfCode": "class MywExpressionParser:\n    \"\"\"\n    Helper to parse a myWorld title expresion\n    \"\"\"\n    def __init__(self, expr, pseudo_fields={}):\n        \"\"\"\n        Create a parser for expression string EXPR\n        EXPR is a expression containing field refs and literals e.g.\n            Pole: [name] ([material])\n        Optional PSEUDO_FIELDS is a dict of pseudo-field values to",
        "detail": "tools.myworldapp.core.server.base.db.myw_expression_parser",
        "documentation": {}
    },
    {
        "label": "MywFilterParser",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_filter_parser",
        "description": "tools.myworldapp.core.server.base.db.myw_filter_parser",
        "peekOfCode": "class MywFilterParser:\n    \"\"\"\n    Helper to parse a myWorld record filter expresion (as used in query configuration)\n    \"\"\"\n    # Implemented using classic recursive-descent approach\n    # See https://www.engr.mun.ca/~theo/Misc/exp_parsing.htm\n    def __init__(self, expr, progress=MywProgressHandler()):\n        \"\"\"\n        Create a parser for filter string EXPR\n        EXPR is a filter expression containing field refs, literals, etc e.g.",
        "detail": "tools.myworldapp.core.server.base.db.myw_filter_parser",
        "documentation": {}
    },
    {
        "label": "defineToken",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.base.db.myw_filter_parser",
        "description": "tools.myworldapp.core.server.base.db.myw_filter_parser",
        "peekOfCode": "def defineToken(type, regexp, skip=0, ignore_case=False, cast=None):\n    flags = re.IGNORECASE if ignore_case else 0\n    regexp = re.compile(regexp, flags)\n    lex_els.append([type, regexp, skip, ignore_case, cast])\n# Helper to 'cast' named constants to their values\ndef constant(value):\n    if value == \"true\":\n        return True\n    if value == \"false\":\n        return False",
        "detail": "tools.myworldapp.core.server.base.db.myw_filter_parser",
        "documentation": {}
    },
    {
        "label": "constant",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.base.db.myw_filter_parser",
        "description": "tools.myworldapp.core.server.base.db.myw_filter_parser",
        "peekOfCode": "def constant(value):\n    if value == \"true\":\n        return True\n    if value == \"false\":\n        return False\n    if value == \"null\":\n        return None\n    raise Exception(\"Unknown named constant: \" + value)\n# Definition of lexical elements\ndefineToken(\"field\", \"\\[(.*?)\\]\", skip=2)  # Database field",
        "detail": "tools.myworldapp.core.server.base.db.myw_filter_parser",
        "documentation": {}
    },
    {
        "label": "lex_els",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.base.db.myw_filter_parser",
        "description": "tools.myworldapp.core.server.base.db.myw_filter_parser",
        "peekOfCode": "lex_els = []\n# Helper to add an element to the lex_els table\ndef defineToken(type, regexp, skip=0, ignore_case=False, cast=None):\n    flags = re.IGNORECASE if ignore_case else 0\n    regexp = re.compile(regexp, flags)\n    lex_els.append([type, regexp, skip, ignore_case, cast])\n# Helper to 'cast' named constants to their values\ndef constant(value):\n    if value == \"true\":\n        return True",
        "detail": "tools.myworldapp.core.server.base.db.myw_filter_parser",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.base.db.myw_filter_parser",
        "description": "tools.myworldapp.core.server.base.db.myw_filter_parser",
        "peekOfCode": "Token = namedtuple(\"Token\", \"type value\")\nclass MywFilterParser:\n    \"\"\"\n    Helper to parse a myWorld record filter expresion (as used in query configuration)\n    \"\"\"\n    # Implemented using classic recursive-descent approach\n    # See https://www.engr.mun.ca/~theo/Misc/exp_parsing.htm\n    def __init__(self, expr, progress=MywProgressHandler()):\n        \"\"\"\n        Create a parser for filter string EXPR",
        "detail": "tools.myworldapp.core.server.base.db.myw_filter_parser",
        "documentation": {}
    },
    {
        "label": "MywMultiLanguageParser",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_multi_language_parser",
        "description": "tools.myworldapp.core.server.base.db.myw_multi_language_parser",
        "peekOfCode": "class MywMultiLanguageParser:\n    \"\"\"\n    Helper to parse a myWorld multi-language strings\n    A multi-language string is a json object keyed on language\n    ie:  {\"en\":\"English\",\"mi\":\"(------Language------)\"}\"\"\"\n    def __init__(self, system_languages=[], default_language=None):\n        \"\"\"\n        Create a parser for processing multi-language strings\"\"\"\n        self.system_languages = system_languages\n        self.default_language = default_language",
        "detail": "tools.myworldapp.core.server.base.db.myw_multi_language_parser",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.base.db.myw_multi_language_parser",
        "description": "tools.myworldapp.core.server.base.db.myw_multi_language_parser",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass MywMultiLanguageParser:\n    \"\"\"\n    Helper to parse a myWorld multi-language strings\n    A multi-language string is a json object keyed on language\n    ie:  {\"en\":\"English\",\"mi\":\"(------Language------)\"}\"\"\"\n    def __init__(self, system_languages=[], default_language=None):\n        \"\"\"\n        Create a parser for processing multi-language strings\"\"\"\n        self.system_languages = system_languages",
        "detail": "tools.myworldapp.core.server.base.db.myw_multi_language_parser",
        "documentation": {}
    },
    {
        "label": "MywNoFeaturesError",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_postgis_mvt_query",
        "description": "tools.myworldapp.core.server.base.db.myw_postgis_mvt_query",
        "peekOfCode": "class MywNoFeaturesError(Exception):\n    pass\nclass CombinedFilter:\n    \"\"\"Metadata to hold all the various filters which apply to a feature/geom_field combination.\"\"\"\n    def __init__(self, table, geom_field_name, layer_filters, world):\n        self.table = table\n        self.feature_type = table.model.__table__.name\n        self.geom_field_name = geom_field_name\n        # Standardise the str | tuple<str> type now:\n        if isinstance(layer_filters, str):",
        "detail": "tools.myworldapp.core.server.base.db.myw_postgis_mvt_query",
        "documentation": {}
    },
    {
        "label": "CombinedFilter",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_postgis_mvt_query",
        "description": "tools.myworldapp.core.server.base.db.myw_postgis_mvt_query",
        "peekOfCode": "class CombinedFilter:\n    \"\"\"Metadata to hold all the various filters which apply to a feature/geom_field combination.\"\"\"\n    def __init__(self, table, geom_field_name, layer_filters, world):\n        self.table = table\n        self.feature_type = table.model.__table__.name\n        self.geom_field_name = geom_field_name\n        # Standardise the str | tuple<str> type now:\n        if isinstance(layer_filters, str):\n            layer_filters = (layer_filters,)\n        elif layer_filters is None:",
        "detail": "tools.myworldapp.core.server.base.db.myw_postgis_mvt_query",
        "documentation": {}
    },
    {
        "label": "MywPostGISMVTQuery",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_postgis_mvt_query",
        "description": "tools.myworldapp.core.server.base.db.myw_postgis_mvt_query",
        "peekOfCode": "class MywPostGISMVTQuery:\n    \"\"\"Class to generate a single PostGIS SQL query to generate MVT format tiles directly in the db\n    engine from multiple feature tables.\n    Usage:\n    query = MywPostGISMVTQuery(db_driver, current_user, session_vars, (z, y, zoom), world)\n    query.add_geometry(db_table, geom_field_name, [additional_field, additional_field], filter)\n    ... add more geometries from the same or different feature tables.\n    sql = query.generate_sql()\n    result_proxy = self.db.executeSQL(sql)\n    # rescue the buffer out of sqla, and convert it to a python bytes obj.",
        "detail": "tools.myworldapp.core.server.base.db.myw_postgis_mvt_query",
        "documentation": {}
    },
    {
        "label": "MywPostgresDbDriver",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_postgres_db_driver",
        "description": "tools.myworldapp.core.server.base.db.myw_postgres_db_driver",
        "peekOfCode": "class MywPostgresDbDriver(MywDbDriver):\n    \"\"\"\n    Driver for Postgres databases\n    Implements Postgres-specific trigger building etc. Maps myWorld concepts as follows:\n      <database>        -> Postgres database\n      <schema>.<table>  -> Postgres schema.table\n    \"\"\"\n    sql_geometry_opts = {}\n    def __init__(self, session):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.base.db.myw_postgres_db_driver",
        "documentation": {}
    },
    {
        "label": "MywPostgresDbServer",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_postgres_db_server",
        "description": "tools.myworldapp.core.server.base.db.myw_postgres_db_server",
        "peekOfCode": "class MywPostgresDbServer(MywDbServer):\n    \"\"\"\n    Engine for communicating with a PostgreSQL server\n    Provides facilities for creating, deleting and opening databases\"\"\"\n    def __init__(\n        self, host=None, port=None, username=None, password=None, progress=None, encryption_key=None\n    ):\n        \"\"\"\n        Init slots of self\n        HOST, PORT, USERNAME and PASSWORD are the server connection parameters.",
        "detail": "tools.myworldapp.core.server.base.db.myw_postgres_db_server",
        "documentation": {}
    },
    {
        "label": "MywCannotMutateException",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_sqlite_db_driver",
        "description": "tools.myworldapp.core.server.base.db.myw_sqlite_db_driver",
        "peekOfCode": "class MywCannotMutateException(Exception):\n    {}\nclass MywSqliteDbDriver(MywDbDriver):\n    \"\"\"\n    Driver for SQLite databases\n    Implements SQLite-specific trigger building etc. Maps myWorld concepts as follows:\n      <database>        -> SQLite file\n      <schema>.<table>  -> __<table>  for data schema\n                           <table>    for system schema\n    The table name mapping prevents name clashes between system and data tables\"\"\"",
        "detail": "tools.myworldapp.core.server.base.db.myw_sqlite_db_driver",
        "documentation": {}
    },
    {
        "label": "MywSqliteDbDriver",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_sqlite_db_driver",
        "description": "tools.myworldapp.core.server.base.db.myw_sqlite_db_driver",
        "peekOfCode": "class MywSqliteDbDriver(MywDbDriver):\n    \"\"\"\n    Driver for SQLite databases\n    Implements SQLite-specific trigger building etc. Maps myWorld concepts as follows:\n      <database>        -> SQLite file\n      <schema>.<table>  -> __<table>  for data schema\n                           <table>    for system schema\n    The table name mapping prevents name clashes between system and data tables\"\"\"\n    \"\"\"Class Property: Options passed to geometry column when using sqlite (See https://geoalchemy-2.readthedocs.io/en/latest/spatialite_tutorial.html#caveats)\"\"\"\n    sqa_geometry_opts = {\"management\": True}",
        "detail": "tools.myworldapp.core.server.base.db.myw_sqlite_db_driver",
        "documentation": {}
    },
    {
        "label": "MywSqliteDbServer",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_sqlite_db_server",
        "description": "tools.myworldapp.core.server.base.db.myw_sqlite_db_server",
        "peekOfCode": "class MywSqliteDbServer(MywDbServer):\n    \"\"\"\n    Engine for communicating with a Spatialite 'server'\n    Provides facilities for creating, deleting and opening databases\"\"\"\n    def __init__(\n        self,\n        host=None,\n        port=None,\n        username=None,\n        password=None,",
        "detail": "tools.myworldapp.core.server.base.db.myw_sqlite_db_server",
        "documentation": {}
    },
    {
        "label": "MywNullMappingString",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_string_mappers",
        "description": "tools.myworldapp.core.server.base.db.myw_string_mappers",
        "peekOfCode": "class MywNullMappingString(types.TypeDecorator):\n    \"\"\"\n    Database string field accessor mapping \"\" to null\n    Used to make Postgres behave like Oracle\"\"\"\n    impl = types.String\n    cache_ok = True\n    def process_bind_param(self, value, dialect):\n        \"\"\"\n        Going into the db, convert empty strings to NULL\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.base.db.myw_string_mappers",
        "documentation": {}
    },
    {
        "label": "MywUTF8MappingString",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_string_mappers",
        "description": "tools.myworldapp.core.server.base.db.myw_string_mappers",
        "peekOfCode": "class MywUTF8MappingString(types.TypeDecorator):\n    \"\"\"\n    Database string field accessor mapping unicode binds to UTF8\n    Used to fix Oracle performance issue (see Fogbugz 6000)\"\"\"\n    impl = types.String\n    cache_ok = True\n    def process_bind_param(self, value, dialect):\n        \"\"\"\n        Going into the db, conert unicode strings to UTF8\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.base.db.myw_string_mappers",
        "documentation": {}
    },
    {
        "label": "MywJsonString",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_string_mappers",
        "description": "tools.myworldapp.core.server.base.db.myw_string_mappers",
        "peekOfCode": "class MywJsonString(types.TypeDecorator):\n    \"\"\"\n    Database field holding a JSON value as a string\n    \"\"\"\n    # Note: Performs mapping when record is fetched .. so can affect performance\n    impl = types.String\n    cache_ok = True\n    def process_bind_param(self, value, dialect):\n        \"\"\"\n        Going into the db, encode value as JSON string",
        "detail": "tools.myworldapp.core.server.base.db.myw_string_mappers",
        "documentation": {}
    },
    {
        "label": "MywTableChange",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_table_change",
        "description": "tools.myworldapp.core.server.base.db.myw_table_change",
        "peekOfCode": "class MywTableChange:\n    \"\"\"\n    Abstract superclass for objects representing a change to the structure of a table\n    \"\"\"\n    def __init__(self, change_type, schema, tablename, field_names):\n        \"\"\"\n        Init slots of self\n        \"\"\"\n        self.change_type = change_type\n        self.schema = schema",
        "detail": "tools.myworldapp.core.server.base.db.myw_table_change",
        "documentation": {}
    },
    {
        "label": "MywAddColumnChange",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_table_change",
        "description": "tools.myworldapp.core.server.base.db.myw_table_change",
        "peekOfCode": "class MywAddColumnChange(MywTableChange):\n    \"\"\"\n    Defines addition fo a column to a table\n    \"\"\"\n    def __init__(self, schema, tablename, field_name, column_desc):\n        \"\"\"\n        Init slots of self\n        \"\"\"\n        super(MywAddColumnChange, self).__init__(\"add field\", schema, tablename, [field_name])\n        self.field_name = field_name",
        "detail": "tools.myworldapp.core.server.base.db.myw_table_change",
        "documentation": {}
    },
    {
        "label": "MywAlterColumnChange",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_table_change",
        "description": "tools.myworldapp.core.server.base.db.myw_table_change",
        "peekOfCode": "class MywAlterColumnChange(MywTableChange):\n    \"\"\"\n    Defines mutation of a table column\n    \"\"\"\n    def __init__(self, schema, tablename, field_name, old_column_desc, new_column_desc):\n        \"\"\"\n        Init slots of self\n        OLD_COLUMN_DESC and NEW_COLUMN_DESC are MywDbColumn descriptors\"\"\"\n        super(MywAlterColumnChange, self).__init__(\"alter field\", schema, tablename, [field_name])\n        self.field_name = field_name",
        "detail": "tools.myworldapp.core.server.base.db.myw_table_change",
        "documentation": {}
    },
    {
        "label": "MywDropColumnChange",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_table_change",
        "description": "tools.myworldapp.core.server.base.db.myw_table_change",
        "peekOfCode": "class MywDropColumnChange(MywTableChange):\n    \"\"\"\n    Defines removal of a table column\n    \"\"\"\n    def __init__(self, schema, tablename, field_name, column_desc):\n        \"\"\"\n        Init slots of self\n        \"\"\"\n        super(MywDropColumnChange, self).__init__(\"drop field\", schema, tablename, [field_name])\n        self.field_name = field_name",
        "detail": "tools.myworldapp.core.server.base.db.myw_table_change",
        "documentation": {}
    },
    {
        "label": "MywAddIndexChange",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_table_change",
        "description": "tools.myworldapp.core.server.base.db.myw_table_change",
        "peekOfCode": "class MywAddIndexChange(MywTableChange):\n    \"\"\"\n    Defines addition of an index\n    \"\"\"\n    def __init__(self, schema, tablename, index_desc):\n        \"\"\"\n        Init slots of self\n        INDEX_DESC is a MywDbIndex descriptor\"\"\"\n        super(MywAddIndexChange, self).__init__(\n            \"add index\", schema, tablename, index_desc.column_names",
        "detail": "tools.myworldapp.core.server.base.db.myw_table_change",
        "documentation": {}
    },
    {
        "label": "MywDropIndexChange",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db.myw_table_change",
        "description": "tools.myworldapp.core.server.base.db.myw_table_change",
        "peekOfCode": "class MywDropIndexChange(MywTableChange):\n    \"\"\"\n    Defines drop of an index\n    \"\"\"\n    def __init__(self, schema, tablename, index_desc):\n        \"\"\"\n        Init slots of self\n        INDEX_DESC is a MywDbIndex descriptor\"\"\"\n        super(MywDropIndexChange, self).__init__(\n            \"drop index\", schema, tablename, index_desc.column_names",
        "detail": "tools.myworldapp.core.server.base.db.myw_table_change",
        "documentation": {}
    },
    {
        "label": "MywDbDriver",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_driver",
        "description": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_driver",
        "peekOfCode": "class MywDbDriver:\n    \"\"\"\n    Abstract superclass for myw database drivers\n    Provides a database-independent API for performing various\n    functions missing from SQLAlchemy:\n     - Name mapping:     Conversion from myWorld names to database object names (see .dbNameFor()\n     - Type mapping:     Mapping from myWorld types to DB types\n     - Table management: Create/mutate/drop tables\n     - Trigger building: Construction of feature and system table triggers\n     - Locking:          Advisory lock acquisition",
        "detail": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_driver",
        "documentation": {}
    },
    {
        "label": "MywDbTable",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "description": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "peekOfCode": "class MywDbTable(object):\n    \"\"\"\n    A database table descriptor\n    Defines table structure, indexes and constraints\"\"\"\n    def __init__(self, schema, name, *items):\n        \"\"\"\n        Init slots of self\n        Optional ITEMS are MywDbColumn, MywDbIndex and MywConstraintDesc objects\"\"\"\n        # Init slots\n        self.schema = schema",
        "detail": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbTableItem",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "description": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "peekOfCode": "class MywDbTableItem(object):\n    \"\"\"\n    Abstract superclass for field, index and constraint descriptors\n    \"\"\"\n    @property\n    def table_name(self):\n        \"\"\"\n        Name of the table to which self related\n        \"\"\"\n        return self.table.name",
        "detail": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbColumn",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "description": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "peekOfCode": "class MywDbColumn(MywDbTableItem):\n    \"\"\"\n    Database field descriptor\n    Has database-independent properties name, type\n    etc. Reflected columns also have database-specific property db_type\"\"\"\n    def __init__(\n        self,\n        name,\n        type,\n        key=False,",
        "detail": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbType",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "description": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "peekOfCode": "class MywDbType(MywDbTableItem):\n    \"\"\"\n    Database field type descriptor\n    \"\"\"\n    base_types = [\n        \"reference\",\n        \"reference_set\",\n        \"foreign_key\",\n        \"link\",\n        \"boolean\",",
        "detail": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbIndex",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "description": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "peekOfCode": "class MywDbIndex(MywDbTableItem):\n    \"\"\"\n    Database index descriptor\n    \"\"\"\n    def __init__(\n        self, column_names, type=None, unique=False, db_name=None, db_options=None\n    ):  # ENH: gather args?\n        \"\"\"\n        Init slots of self\n        COLUMN_NAMES is an ordered list of column names. TYPE is one of:",
        "detail": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywDbConstraint",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "description": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "peekOfCode": "class MywDbConstraint(MywDbTableItem):\n    \"\"\"\n    Database table constraint descriptor\n    \"\"\"\n    # ENH: Better as separate classes MywDbUniqueConstraint, MywDbForeignKeyConstraint, ...?\n    @staticmethod\n    def pKey(*column_names):\n        \"\"\"\n        Convenience wrapper returning a new primary key constraint\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_db_meta",
        "documentation": {}
    },
    {
        "label": "MywPostgresDbDriver",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_postgres_db_driver",
        "description": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_postgres_db_driver",
        "peekOfCode": "class MywPostgresDbDriver(MywDbDriver):\n    \"\"\"\n    Driver for Postgres databases\n    Implements Postgres-specific trigger building etc. Maps myWorld concepts as follows:\n      <database>        -> Postgres database\n      <schema>.<table>  -> Postgres schema.table\n    \"\"\"\n    sql_geometry_opts = {}\n    def __init__(self, session):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_postgres_db_driver",
        "documentation": {}
    },
    {
        "label": "MywCannotMutateException",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_sqlite_db_driver",
        "description": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_sqlite_db_driver",
        "peekOfCode": "class MywCannotMutateException(Exception):\n    {}\nclass MywSqliteDbDriver(MywDbDriver):\n    \"\"\"\n    Driver for SQLite databases\n    Implements SQLite-specific trigger building etc. Maps myWorld concepts as follows:\n      <database>        -> SQLite file\n      <schema>.<table>  -> __<table>  for data schema\n                           <table>    for system schema\n    The table name mapping prevents name clashes between system and data tables\"\"\"",
        "detail": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_sqlite_db_driver",
        "documentation": {}
    },
    {
        "label": "MywSqliteDbDriver",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_sqlite_db_driver",
        "description": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_sqlite_db_driver",
        "peekOfCode": "class MywSqliteDbDriver(MywDbDriver):\n    \"\"\"\n    Driver for SQLite databases\n    Implements SQLite-specific trigger building etc. Maps myWorld concepts as follows:\n      <database>        -> SQLite file\n      <schema>.<table>  -> __<table>  for data schema\n                           <table>    for system schema\n    The table name mapping prevents name clashes between system and data tables\"\"\"\n    \"\"\"Class Property: Options passed to geometry column when using sqlite (See https://geoalchemy-2.readthedocs.io/en/latest/spatialite_tutorial.html#caveats)\"\"\"\n    sqa_geometry_opts = {\"management\": True}",
        "detail": "tools.myworldapp.core.server.base.db_schema.db_drivers_510.myw_sqlite_db_driver",
        "documentation": {}
    },
    {
        "label": "MywDbInstall",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.myw_db_install",
        "description": "tools.myworldapp.core.server.base.db_schema.myw_db_install",
        "peekOfCode": "class MywDbInstall(MywDbUpgrade):\n    \"\"\"\n    Install myWorld system tables\n    \"\"\"\n    schema_vs_name = \"myw_schema\"\n    from_version = 0\n    updates = {\n        1: \"install_schemas\",\n        2: \"install_system_tables\",\n        3: \"install_system_triggers\",",
        "detail": "tools.myworldapp.core.server.base.db_schema.myw_db_install",
        "documentation": {}
    },
    {
        "label": "MywDbUpgradeError",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade",
        "description": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade",
        "peekOfCode": "class MywDbUpgradeError(MywError):\n    \"\"\"Exception for data/user errors during upgrades\"\"\"\nclass MywDbUpgrade:\n    \"\"\"\n    Abstract superclass for database upgrades\n    Provides framework for running update methods (see .run())\n    Sub-classes must implement:\n      .from_version       Minuimum version stamp from which self can upgrade\n      .updates            List of methods to run, keyed by datamodel version no\n      .schema_vs_name     \"myw_schema\" in almost all cases. Exceptions generally live on",
        "detail": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade",
        "documentation": {}
    },
    {
        "label": "MywDbUpgrade",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade",
        "description": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade",
        "peekOfCode": "class MywDbUpgrade:\n    \"\"\"\n    Abstract superclass for database upgrades\n    Provides framework for running update methods (see .run())\n    Sub-classes must implement:\n      .from_version       Minuimum version stamp from which self can upgrade\n      .updates            List of methods to run, keyed by datamodel version no\n      .schema_vs_name     \"myw_schema\" in almost all cases. Exceptions generally live on\n                          old release branches but not on main.\n      .supports_dry_run   True if all changes can be made in a single transaction\"\"\"",
        "detail": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade",
        "documentation": {}
    },
    {
        "label": "MywDbUpgrade430",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_430",
        "description": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_430",
        "peekOfCode": "class MywDbUpgrade430(MywDbUpgrade):\n    \"\"\"\n    Upgrade core data-model from myworld 4.2 to 4.3\n    \"\"\"\n    # Constants\n    db_driver_class = MywDbDriver510\n    schema_vs_name = \"myw_schema\"\n    from_version = 42006\n    updates = {\n        43001: \"networks_add_tables\",",
        "detail": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_430",
        "documentation": {}
    },
    {
        "label": "MywDbUpgrade440",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_440",
        "description": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_440",
        "peekOfCode": "class MywDbUpgrade440(MywDbUpgrade):\n    \"\"\"\n    Upgrade core data-model from myworld 4.3 to 4.4\n    \"\"\"\n    # Constants\n    db_driver_class = MywDbDriver510\n    schema_vs_name = \"myw_schema\"\n    from_version = 43007\n    updates = {\n        44001: \"add_config_version_stamps\",",
        "detail": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_440",
        "documentation": {}
    },
    {
        "label": "MywDbUpgrade500",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_500",
        "description": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_500",
        "peekOfCode": "class MywDbUpgrade500(MywDbUpgrade):\n    \"\"\"\n    Upgrade core data-model from myworld 4.4 to 5.0\n    \"\"\"\n    # Constants\n    db_driver_class = MywDbDriver510\n    schema_vs_name = \"myw_schema\"\n    from_version = 44018\n    updates = {\n        50001: \"dd_field_add_display_format\",",
        "detail": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_500",
        "documentation": {}
    },
    {
        "label": "MywDbUpgrade510",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_510",
        "description": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_510",
        "peekOfCode": "class MywDbUpgrade510(MywDbUpgrade):\n    \"\"\"\n    Upgrade core data-model from myworld 5.0 to 5.1\n    \"\"\"\n    # Constants\n    db_driver_class = MywDbDriver510\n    schema_vs_name = \"myw_schema\"\n    from_version = 50007\n    updates = {\n        51001: \"dd_extend_fields\",",
        "detail": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_510",
        "documentation": {}
    },
    {
        "label": "MywDbUpgrade520",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_520",
        "description": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_520",
        "peekOfCode": "class MywDbUpgrade520(MywDbUpgrade):\n    \"\"\"\n    Upgrade core data-model from myworld 5.1 to 5.2\n    \"\"\"\n    # Constants\n    schema_vs_name = \"myw_schema\"\n    from_version = 51004\n    updates = {\n        52001: \"layer_add_display_name_field\",\n        52002: \"layer_populate_display_name_field\",",
        "detail": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_520",
        "documentation": {}
    },
    {
        "label": "MywDbUpgrade600",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_600",
        "description": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_600",
        "peekOfCode": "class MywDbUpgrade600(MywDbUpgrade):\n    \"\"\"\n    Upgrade core data-model from myworld 5.2 to 6.0\n    \"\"\"\n    # Constants\n    db_driver_class = MywDbDriver510\n    schema_vs_name = \"myw_schema\"\n    from_version = 50007\n    updates = {\n        60001: \"add_config_pages_setting\",",
        "detail": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_600",
        "documentation": {}
    },
    {
        "label": "MywDbUpgrade610",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_610",
        "description": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_610",
        "peekOfCode": "class MywDbUpgrade610(MywDbUpgrade):\n    \"\"\"\n    Upgrade core data-model from myworld 6.0 to 6.1\n    \"\"\"\n    # Constants\n    db_driver_class = MywDbDriver510\n    schema_vs_name = \"myw_schema\"\n    from_version = 60001\n    updates = {\n        61001: \"add_internetStatus_imgUrl_setting\",",
        "detail": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_610",
        "documentation": {}
    },
    {
        "label": "MywDbUpgrade620",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_620",
        "description": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_620",
        "peekOfCode": "class MywDbUpgrade620(MywDbUpgrade):\n    \"\"\"\n    Upgrade core data-model from myworld 6.1 to 6.2\n    \"\"\"\n    # Constants\n    db_driver_class = MywDbDriver510\n    schema_vs_name = \"myw_schema\"\n    from_version = 61004\n    updates = {\n        62001: \"add_new_layer_column\",",
        "detail": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_620",
        "documentation": {}
    },
    {
        "label": "MywDbUpgrade630",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_630",
        "description": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_630",
        "peekOfCode": "class MywDbUpgrade630(MywDbUpgrade):\n    \"\"\"\n    Upgrade core data-model from myworld 6.2 to 6.3\n    \"\"\"\n    # Constants\n    schema_vs_name = \"myw_schema\"\n    from_version = 62001\n    updates = {\n        63001: \"extend_multi_lang_fields\",\n        63002: \"extend_feature_editor_configuration\",",
        "detail": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_630",
        "documentation": {}
    },
    {
        "label": "MywDbUpgrade640",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_640",
        "description": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_640",
        "peekOfCode": "class MywDbUpgrade640(MywDbUpgrade):\n    \"\"\"\n    Upgrade core data-model from myworld 6.3 to 6.4\n    \"\"\"\n    # Constants\n    schema_vs_name = \"myw_schema\"\n    from_version = 63005\n    updates = {\n        64001: \"add_bulk_update_rights\",\n        64002: \"add_fine_grained_permissions\",",
        "detail": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_640",
        "documentation": {}
    },
    {
        "label": "MywDbUpgrade650",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_650",
        "description": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_650",
        "peekOfCode": "class MywDbUpgrade650(MywDbUpgrade):\n    \"\"\"\n    Upgrade core data-model from myworld 6.4 to 6.5\n    \"\"\"\n    # Constants\n    schema_vs_name = \"myw_schema\"\n    from_version = 64002\n    updates = {\n        65001: \"add_creates_world_type\",\n        65002: \"set_primary_geom_mandatory\",",
        "detail": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_650",
        "documentation": {}
    },
    {
        "label": "MywDbUpgrade700",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_700",
        "description": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_700",
        "peekOfCode": "class MywDbUpgrade700(MywDbUpgrade):\n    \"\"\"\n    Upgrade core data-model from myworld 6.5 to 7.0\n    \"\"\"\n    # Constants\n    schema_vs_name = \"myw_schema\"\n    from_version = 65006\n    updates = {\n        70001: \"log_ids_to_bigints\",\n        70002: \"add_extract_key_table\",",
        "detail": "tools.myworldapp.core.server.base.db_schema.myw_db_upgrade_700",
        "documentation": {}
    },
    {
        "label": "MywCoordSystem",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.geom.myw_coord_system",
        "description": "tools.myworldapp.core.server.base.geom.myw_coord_system",
        "peekOfCode": "class MywCoordSystem:\n    \"\"\"\n    A geographic coordinate system definition\n    Wraps pyproj.Proj. Provided to retain epsg name (for srid)\"\"\"\n    # ENH: Nicer as a subclass\n    def __init__(self, cs_def):\n        \"\"\"\n        Init slots of self\n        CS_DEF is one of:\n         <pro4_str>    e.g. \"+proj=longlat +datum=WGS84 +no_defs\"",
        "detail": "tools.myworldapp.core.server.base.geom.myw_coord_system",
        "documentation": {}
    },
    {
        "label": "MywCoordTransform",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.geom.myw_coord_transform",
        "description": "tools.myworldapp.core.server.base.geom.myw_coord_transform",
        "peekOfCode": "class MywCoordTransform:\n    \"\"\"\n    A geographic transform definition\n    Wraps pyproj.Transaction. Provided to reskin proj string parse errors.\"\"\"\n    def __init__(self, transform_proj):\n        \"\"\"transform_proj should be a pipeline-like proj string defining the transform.\"\"\"\n        # reject anything that should probably be handled by MywCoordSystem:\n        if not (isinstance(transform_proj, str) and transform_proj.startswith(\"+\")):\n            raise MywCoordSystemError(f\"Bad transform definition: {transform_proj}\")\n        self._proj_str = transform_proj",
        "detail": "tools.myworldapp.core.server.base.geom.myw_coord_transform",
        "documentation": {}
    },
    {
        "label": "MywGeometry",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.geom.myw_geometry",
        "description": "tools.myworldapp.core.server.base.geom.myw_geometry",
        "peekOfCode": "class MywGeometry:\n    \"\"\"\n    Superclass for myWorld in-memory geometries\n    myWorld geometries encapsulate shapely in-memory geometry classes to add convenience\n    methods and geodetic calculations (.geoLength(), etc). They also include a .srid\n    attribute that identifies the coordinate system of the geometry (if known)\n    The geodetic methods *assume* that the geometry's coordinates are in WGS84 long/lat.\"\"\"\n    # Encapsulation:\n    def __init__(self, *args, **kwargs):\n        \"\"\"Set up the shapely geom that is the \"inner object\" for this wrapper.\"\"\"",
        "detail": "tools.myworldapp.core.server.base.geom.myw_geometry",
        "documentation": {}
    },
    {
        "label": "transform_cache",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.base.geom.myw_geometry",
        "description": "tools.myworldapp.core.server.base.geom.myw_geometry",
        "peekOfCode": "transform_cache = {}\n# ==============================================================================\n#                                  MywGeometry\n# ==============================================================================\nclass MywGeometry:\n    \"\"\"\n    Superclass for myWorld in-memory geometries\n    myWorld geometries encapsulate shapely in-memory geometry classes to add convenience\n    methods and geodetic calculations (.geoLength(), etc). They also include a .srid\n    attribute that identifies the coordinate system of the geometry (if known)",
        "detail": "tools.myworldapp.core.server.base.geom.myw_geometry",
        "documentation": {}
    },
    {
        "label": "geodeticDistanceBetween",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.base.geom.myw_geo_utils",
        "description": "tools.myworldapp.core.server.base.geom.myw_geo_utils",
        "peekOfCode": "def geodeticDistanceBetween(coord1, coord2):\n    \"\"\"\n    Great circle distance between two points, in metres\n    COORD1 and COORD2 are (lon,lat) in decimal degrees\n    \"\"\"\n    # Uses haversine formula, which assumes earth is a sphere\n    # ENH: Unstable at edge cases?\n    (lon1, lat1) = coord1\n    (lon2, lat2) = coord2\n    # Convert decimal degrees to radians",
        "detail": "tools.myworldapp.core.server.base.geom.myw_geo_utils",
        "documentation": {}
    },
    {
        "label": "scaleDistortionAt",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.base.geom.myw_geo_utils",
        "description": "tools.myworldapp.core.server.base.geom.myw_geo_utils",
        "peekOfCode": "def scaleDistortionAt(lat):\n    \"\"\"\n    Conversion factor from projected space (Google projection) to real world space at LAT (in degrees)\n    \"\"\"\n    lat = lat * (2.0 * pi / 360.0)  # Get latitude in radians\n    p1 = degrees_to_metres\n    p2 = -93.5 / p1\n    p3 = 0.118 / p1\n    factor = cos(lat) + (p2 * cos(3 * lat)) + (p3 * cos(5 * lat))\n    return factor",
        "detail": "tools.myworldapp.core.server.base.geom.myw_geo_utils",
        "documentation": {}
    },
    {
        "label": "earth_radius",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.base.geom.myw_geo_utils",
        "description": "tools.myworldapp.core.server.base.geom.myw_geo_utils",
        "peekOfCode": "earth_radius = 6371008.8  # to match turf\n# Nominal conversion factor from degrees to meters (correct at equator)\n# ENH: Add class MywEarthModel?\ndegrees_to_metres = (2 * pi * earth_radius) / 360\ndef geodeticDistanceBetween(coord1, coord2):\n    \"\"\"\n    Great circle distance between two points, in metres\n    COORD1 and COORD2 are (lon,lat) in decimal degrees\n    \"\"\"\n    # Uses haversine formula, which assumes earth is a sphere",
        "detail": "tools.myworldapp.core.server.base.geom.myw_geo_utils",
        "documentation": {}
    },
    {
        "label": "degrees_to_metres",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.base.geom.myw_geo_utils",
        "description": "tools.myworldapp.core.server.base.geom.myw_geo_utils",
        "peekOfCode": "degrees_to_metres = (2 * pi * earth_radius) / 360\ndef geodeticDistanceBetween(coord1, coord2):\n    \"\"\"\n    Great circle distance between two points, in metres\n    COORD1 and COORD2 are (lon,lat) in decimal degrees\n    \"\"\"\n    # Uses haversine formula, which assumes earth is a sphere\n    # ENH: Unstable at edge cases?\n    (lon1, lat1) = coord1\n    (lon2, lat2) = coord2",
        "detail": "tools.myworldapp.core.server.base.geom.myw_geo_utils",
        "documentation": {}
    },
    {
        "label": "MywGeomLoc",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.geom.myw_line_segment",
        "description": "tools.myworldapp.core.server.base.geom.myw_line_segment",
        "peekOfCode": "class MywGeomLoc:\n    \"\"\"\n    A location on a linear geometry\n    \"\"\"\n    def __init__(self, coord, pos=None, seg=None):\n        \"\"\"\n        Init slots of self\n        \"\"\"\n        self.coord = coord\n        self.pos = pos  # Position along segment (0 to 1)",
        "detail": "tools.myworldapp.core.server.base.geom.myw_line_segment",
        "documentation": {}
    },
    {
        "label": "MywLineSegment",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.geom.myw_line_segment",
        "description": "tools.myworldapp.core.server.base.geom.myw_line_segment",
        "peekOfCode": "class MywLineSegment(MywGeometry):\n    \"\"\"\n    A straight directed linear geometry (line string with only one segment.)\n    \"\"\"\n    @staticmethod\n    def _shapely_factory(*args, **kwargs):\n        return LineString(args)\n    @property\n    def coord1(self):\n        return self.coords[0]",
        "detail": "tools.myworldapp.core.server.base.geom.myw_line_segment",
        "documentation": {}
    },
    {
        "label": "MywLineString",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.geom.myw_line_string",
        "description": "tools.myworldapp.core.server.base.geom.myw_line_string",
        "peekOfCode": "class MywLineString(MywGeometry):\n    \"\"\"\n    A list of connected line segments\n    Extends shapely geometry to add geodetic calculations, convenience methods etc\"\"\"\n    # ENH: Add start_coord, end_coord, ..\n    @staticmethod\n    def _shapely_factory(*args, **kwargs):\n        return LineString(*args)\n    @property\n    def start_point(self):",
        "detail": "tools.myworldapp.core.server.base.geom.myw_line_string",
        "documentation": {}
    },
    {
        "label": "MywMultiLineString",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.geom.myw_multi_line_string",
        "description": "tools.myworldapp.core.server.base.geom.myw_multi_line_string",
        "peekOfCode": "class MywMultiLineString(MywGeometry):\n    \"\"\"\n    A set of (possibly intersecting) line strings\n    Extends shapely to add geodetic calculations etc\"\"\"\n    @staticmethod\n    def _shapely_factory(*args, **kwargs):\n        return MultiLineString(*args)",
        "detail": "tools.myworldapp.core.server.base.geom.myw_multi_line_string",
        "documentation": {}
    },
    {
        "label": "MywMultiPoint",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.geom.myw_multi_point",
        "description": "tools.myworldapp.core.server.base.geom.myw_multi_point",
        "peekOfCode": "class MywMultiPoint(MywGeometry):\n    \"\"\"\n    A set of (possibly overlapping) points\n    Extends shapely to add geodetic calculations etc\"\"\"\n    # ENH: Override element accessor to return myWorld objects\n    @staticmethod\n    def _shapely_factory(*args, **kwargs):\n        return MultiPoint(*args)",
        "detail": "tools.myworldapp.core.server.base.geom.myw_multi_point",
        "documentation": {}
    },
    {
        "label": "MywMultiPolygon",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.geom.myw_multi_polygon",
        "description": "tools.myworldapp.core.server.base.geom.myw_multi_polygon",
        "peekOfCode": "class MywMultiPolygon(MywGeometry):\n    \"\"\"\n    A set of (possibly overlapping) polygons\n    Extends shapely to add geodetic calculations etc\"\"\"\n    @staticmethod\n    def _shapely_factory(*args, **kwargs):\n        return MultiPolygon(*args)",
        "detail": "tools.myworldapp.core.server.base.geom.myw_multi_polygon",
        "documentation": {}
    },
    {
        "label": "MywPoint",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.geom.myw_point",
        "description": "tools.myworldapp.core.server.base.geom.myw_point",
        "peekOfCode": "class MywPoint(MywGeometry):\n    \"\"\"\n    A point geometry\n    Extends shapely to add geodetic calculations etc\"\"\"\n    @staticmethod\n    def _shapely_factory(*args, **kwargs):\n        return Point(*args)\n    @property\n    def coord(self):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.base.geom.myw_point",
        "documentation": {}
    },
    {
        "label": "MywPolygon",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.geom.myw_polygon",
        "description": "tools.myworldapp.core.server.base.geom.myw_polygon",
        "peekOfCode": "class MywPolygon(MywGeometry):\n    \"\"\"\n    A connected region of 2D space (possibly containing holes)\n    Extends shapely to add geodetic calculations etc\"\"\"\n    @staticmethod\n    def _shapely_factory(*args, **kwargs):\n        return Polygon(*args)\n    @classmethod\n    def newBox(self, minx, miny, maxx, maxy, srid=None):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.base.geom.myw_polygon",
        "documentation": {}
    },
    {
        "label": "MywVector",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.geom.myw_vector",
        "description": "tools.myworldapp.core.server.base.geom.myw_vector",
        "peekOfCode": "class MywVector:\n    \"\"\"\n    A vector in 2d space\n    \"\"\"\n    @classmethod\n    def between(self, coord1, coord2):\n        \"\"\"\n        Returns vector coord1 -> coord2\n        \"\"\"\n        # ENH: Replace by MywCoord",
        "detail": "tools.myworldapp.core.server.base.geom.myw_vector",
        "documentation": {}
    },
    {
        "label": "MywCodeManager",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.system.myw_code_manager",
        "description": "tools.myworldapp.core.server.base.system.myw_code_manager",
        "peekOfCode": "class MywCodeManager:\n    \"\"\"\n    Engine for minifying and packaging code\n    \"\"\"\n    def __init__(self, product, progress=MywProgressHandler()):\n        \"\"\"\n        Init slots of self\n        PRODUCT is the MywProduct whose code we manage\"\"\"\n        self.product = product\n        self.progress = progress",
        "detail": "tools.myworldapp.core.server.base.system.myw_code_manager",
        "documentation": {}
    },
    {
        "label": "MywLocaliser",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.system.myw_localiser",
        "description": "tools.myworldapp.core.server.base.system.myw_localiser",
        "peekOfCode": "class MywLocaliser:\n    \"\"\"\n    Engine for performing message lookup\n    \"\"\"\n    def __init__(self, lang, msg_file, module_dir=None, encoding=None):\n        \"\"\"\n        Create lookup engine returning messages from version LANG of MSG_FILE\n        MSG_FILE is the file containing the messages (from public/locales/<lang>)\n        MODULE_DIR is the path to the module where MSG_FILE is located. If omitted, it defaults to core\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.base.system.myw_localiser",
        "documentation": {}
    },
    {
        "label": "MywModule",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.system.myw_module",
        "description": "tools.myworldapp.core.server.base.system.myw_module",
        "peekOfCode": "class MywModule:\n    \"\"\"\n    Models a myWorld module (including core)\n    Provides protocols for obtaining version stamp etc\"\"\"\n    def __init__(self, name, path):\n        \"\"\"\n        Init slots of self\n        PATH is the absolute path to self's root\"\"\"\n        self.name = name\n        self.path = path",
        "detail": "tools.myworldapp.core.server.base.system.myw_module",
        "documentation": {}
    },
    {
        "label": "MywPatch",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.system.myw_patch",
        "description": "tools.myworldapp.core.server.base.system.myw_patch",
        "peekOfCode": "class MywPatch:\n    \"\"\"\n    Models a myWorld patch (a zip file containing patch_info.json + old and new source)\n    Provides protocols for yielding meta-data and source file from the patch zip\"\"\"\n    def __init__(self, patch_file):\n        \"\"\"\n        Init slots of self\n        \"\"\"\n        self.zip_file = patch_file\n        self.id = os.path.basename(patch_file).split(\".\")[0]",
        "detail": "tools.myworldapp.core.server.base.system.myw_patch",
        "documentation": {}
    },
    {
        "label": "MywPatchManager",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.system.myw_patch_manager",
        "description": "tools.myworldapp.core.server.base.system.myw_patch_manager",
        "peekOfCode": "class MywPatchManager:\n    \"\"\"\n    Engine for installing patches\n    \"\"\"\n    def __init__(self, product, progress=MywProgressHandler()):\n        \"\"\"\n        Init slots of self\n        PRODUCT_MGR is a MywProduct\"\"\"\n        self.product = product\n        self.progress = progress",
        "detail": "tools.myworldapp.core.server.base.system.myw_patch_manager",
        "documentation": {}
    },
    {
        "label": "MywProduct",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.system.myw_product",
        "description": "tools.myworldapp.core.server.base.system.myw_product",
        "peekOfCode": "class MywProduct:\n    \"\"\"\n    Engine for accessing server configuration parameters\n    \"\"\"\n    def __init__(self, root_dir=None):\n        \"\"\"\n        Init slots of self\n        \"\"\"\n        # Deal with defaults\n        if not root_dir:",
        "detail": "tools.myworldapp.core.server.base.system.myw_product",
        "documentation": {}
    },
    {
        "label": "GlobalMercator",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.tilestore.globalmaptiles",
        "description": "tools.myworldapp.core.server.base.tilestore.globalmaptiles",
        "peekOfCode": "class GlobalMercator:\n    \"\"\"\n      TMS Global Mercator Profile\n      ---------------------------\n      Functions necessary for generation of tiles in Spherical Mercator projection,\n      EPSG:900913 (EPSG:gOOglE, Google Maps Global Mercator), EPSG:3785, OSGEO:41001.\n      Such tiles are compatible with Google Maps, Microsoft Virtual Earth, Yahoo Maps,\n      UK Ordnance Survey OpenSpace API, ...\n      and you can overlay them on top of base maps of those web mapping applications.\n      Pixel and tile coordinates are in TMS notation (origin [0,0] in bottom-left).",
        "detail": "tools.myworldapp.core.server.base.tilestore.globalmaptiles",
        "documentation": {}
    },
    {
        "label": "GlobalGeodetic",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.tilestore.globalmaptiles",
        "description": "tools.myworldapp.core.server.base.tilestore.globalmaptiles",
        "peekOfCode": "class GlobalGeodetic:\n    \"\"\"\n    TMS Global Geodetic Profile\n    ---------------------------\n    Functions necessary for generation of global tiles in Plate Carre projection,\n    EPSG:4326, \"unprojected profile\".\n    Such tiles are compatible with Google Earth (as any other EPSG:4326 rasters)\n    and you can overlay the tiles on top of OpenLayers base map.\n    Pixel and tile coordinates are in TMS notation (origin [0,0] in bottom-left).\n    What coordinate conversions do we need for TMS Global Geodetic tiles?",
        "detail": "tools.myworldapp.core.server.base.tilestore.globalmaptiles",
        "documentation": {}
    },
    {
        "label": "MywMBTileDB",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.tilestore.myw_mb_tile_db",
        "description": "tools.myworldapp.core.server.base.tilestore.myw_mb_tile_db",
        "peekOfCode": "class MywMBTileDB(MywTileDBMixin):\n    \"\"\"\n    A Maxbox Tiles format sqlite tile database (readonly)\n    Supports a single layer per file. See http://www.mapbox.com/developers/mbtiles/\"\"\"\n    # ==============================================================================\n    #                                  CREATION\n    # ==============================================================================\n    def __init__(self, filename, mode, progress=None):\n        \"\"\"\n        Initialise self",
        "detail": "tools.myworldapp.core.server.base.tilestore.myw_mb_tile_db",
        "documentation": {}
    },
    {
        "label": "MywMWTileDB",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.tilestore.myw_mw_tile_db",
        "description": "tools.myworldapp.core.server.base.tilestore.myw_mw_tile_db",
        "peekOfCode": "class MywMWTileDB(MywTileDBMixin):\n    \"\"\"\n    A myWorld format sqlite tile database (read/write)\n    Format is an extension of MB Tiles. Supports multiple\n    layers, change detection etc. As with MB tiles, tile\n    addresses are stored in TMS format (i.e. origin bottom left)\n    Internally, uses Java engine to accelerate load operations\"\"\"\n    def __init__(self, filename, mode, progress=None):\n        \"\"\"\n        Initialise self",
        "detail": "tools.myworldapp.core.server.base.tilestore.myw_mw_tile_db",
        "documentation": {}
    },
    {
        "label": "MywTilestore",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.tilestore.myw_tilestore",
        "description": "tools.myworldapp.core.server.base.tilestore.myw_tilestore",
        "peekOfCode": "class MywTilestore:\n    \"\"\"\n    A set of tile files (+ mappings from layers to files)\n    Deals with opening and caching these files and retrieving\n    tiles from them (see .get_tile())\"\"\"\n    def __init__(self, file_specs, db_dir=None, verbosity=0):\n        \"\"\"\n        Init self\n        FILE_SPECS is a list of dicts used to determine the mapping\n        from layer names to files (keys 'layers' and 'files') e.g.",
        "detail": "tools.myworldapp.core.server.base.tilestore.myw_tilestore",
        "documentation": {}
    },
    {
        "label": "MywTileDB",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.base.tilestore.myw_tile_db",
        "description": "tools.myworldapp.core.server.base.tilestore.myw_tile_db",
        "peekOfCode": "def MywTileDB(filename, mode=\"r\", type=None, progress=None):\n    \"\"\"\n    Open a tile file for reading or writing\n    MODE is one of:\n     r  Readonly (file must exist)\n     u  Update (file must exist)\n     w  Write (file created if doesn't exist, updated if it does)\n    TYPE is once of mb_file or myw_file. If not given, format\n    deduced from file extension.\n    Returns an object implementing the MywTileDBMixin interface\"\"\"",
        "detail": "tools.myworldapp.core.server.base.tilestore.myw_tile_db",
        "documentation": {}
    },
    {
        "label": "MywTileDBMixin",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.base.tilestore.myw_tile_db_mixin",
        "description": "tools.myworldapp.core.server.base.tilestore.myw_tile_db_mixin",
        "peekOfCode": "class MywTileDBMixin:\n    \"\"\"Abstract superclass for random access tile files\n    A tile DB presents an API for accessing tile data via\n    Google-format tile IDs (that is, origin top left)\n    Subclasses must implement:\n      .format()\n      .schemaVersion()\n      .layers()\n      .layerStats(layer,**tile_filter)\n      .levelStats(layer,**tile_filter)",
        "detail": "tools.myworldapp.core.server.base.tilestore.myw_tile_db_mixin",
        "documentation": {}
    },
    {
        "label": "MywArgparseHelpFormatter",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.commands.myw_argparse_help_formatter",
        "description": "tools.myworldapp.core.server.commands.myw_argparse_help_formatter",
        "peekOfCode": "class MywArgparseHelpFormatter(HelpFormatter):\n    \"\"\"\n    Custom formatter for command line tool help\n    Extends the default argparse formatter to display enums better etc\"\"\"\n    def __init__(self, prog, indent_increment=2, max_help_position=24, width=120):\n        \"\"\"\n        Init slots of self\n        Subclassed to make args column wider (MAX_HELP_POSITION parameter)\"\"\"\n        HelpFormatter.__init__(self, prog, indent_increment, max_help_position, width)\n    def _format_usage(self, usage, actions, groups, prefix):",
        "detail": "tools.myworldapp.core.server.commands.myw_argparse_help_formatter",
        "documentation": {}
    },
    {
        "label": "MywCommand",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.commands.myw_command",
        "description": "tools.myworldapp.core.server.commands.myw_command",
        "peekOfCode": "class MywCommand:\n    \"\"\"\n    Abstract superclass for engines implementing myWorld command line tools\n    Provides .run() plus various helpers.\n    Subclasses must implement:\n      arg_parser\n      operation_xxx()\"\"\"\n    # Abstract properties to be overridden.\n    arg_parser: ArgumentParser = None\n    # Note, pylint can't handle MywProgressHandler here, so we use the more general typing.Callable",
        "detail": "tools.myworldapp.core.server.commands.myw_command",
        "documentation": {}
    },
    {
        "label": "EncryptionKeyAction",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.commands.myw_db_command",
        "description": "tools.myworldapp.core.server.commands.myw_db_command",
        "peekOfCode": "class EncryptionKeyAction(argparse.Action):\n    \"\"\"\n    Action class that sets the following args for --encryption_key:\n    - If not defined, set no encryption key\n    - If set without a value, will generate a random 32-character key\n    - If set with a value, sets it to that value\n    \"\"\"\n    def __init__(self, option_strings, dest, nargs=None, **kwargs):\n        if nargs is not None:\n            raise ValueError(\"nargs not allowed\")",
        "detail": "tools.myworldapp.core.server.commands.myw_db_command",
        "documentation": {}
    },
    {
        "label": "MywDbCommand",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.commands.myw_db_command",
        "description": "tools.myworldapp.core.server.commands.myw_db_command",
        "peekOfCode": "class MywDbCommand(MywCommand):\n    \"\"\"\n    Engine implementing the database management command line utility\n    Example of use:\n      MywDbCommand().run('myw_dev','list','--since','base')\"\"\"\n    # ==============================================================================\n    #                                  SHARED ARGS\n    # ==============================================================================\n    # Definition of command syntax (gets extended in operation clauses below)\n    arg_parser = argparse.ArgumentParser(prog=\"myw_db\", formatter_class=MywArgparseHelpFormatter)",
        "detail": "tools.myworldapp.core.server.commands.myw_db_command",
        "documentation": {}
    },
    {
        "label": "MywEdsCommand",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.commands.myw_eds_command",
        "description": "tools.myworldapp.core.server.commands.myw_eds_command",
        "peekOfCode": "class MywEdsCommand(MywCommand):\n    \"\"\"\n    Command line utility for accessing data from external datasources\n    \"\"\"\n    # ==============================================================================\n    #                                  SHARED ARGS\n    # ==============================================================================\n    # Definition of command syntax (gets extended in operation clauses below)\n    arg_parser = argparse.ArgumentParser(prog=\"myw_eds\", formatter_class=MywArgparseHelpFormatter)\n    arg_parser.add_argument(",
        "detail": "tools.myworldapp.core.server.commands.myw_eds_command",
        "documentation": {}
    },
    {
        "label": "OrderFileNotFoundError",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.commands.myw_product_command",
        "description": "tools.myworldapp.core.server.commands.myw_product_command",
        "peekOfCode": "class OrderFileNotFoundError(MywError):\n    \"\"\"\n    Internal error used by the Install command.\n    \"\"\"\n    pass\nclass MissingOrInvalidPatchFilesError(MywError):\n    \"\"\"\n    Error used to accumulate details between different modules about which patches are missing, and then to format\n    that as one large error message to the user once all such details have been discovered.\n    \"\"\"",
        "detail": "tools.myworldapp.core.server.commands.myw_product_command",
        "documentation": {}
    },
    {
        "label": "MissingOrInvalidPatchFilesError",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.commands.myw_product_command",
        "description": "tools.myworldapp.core.server.commands.myw_product_command",
        "peekOfCode": "class MissingOrInvalidPatchFilesError(MywError):\n    \"\"\"\n    Error used to accumulate details between different modules about which patches are missing, and then to format\n    that as one large error message to the user once all such details have been discovered.\n    \"\"\"\n    def __init__(self, missing_patches):\n        self.missing_patches = missing_patches\n    def __str__(self):\n        max_width = max(len(k) for k in list(self.missing_patches.keys()) + [\"module\"])\n        padded_module_literal = \"module\".ljust(max_width)",
        "detail": "tools.myworldapp.core.server.commands.myw_product_command",
        "documentation": {}
    },
    {
        "label": "MywProductCommand",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.commands.myw_product_command",
        "description": "tools.myworldapp.core.server.commands.myw_product_command",
        "peekOfCode": "class MywProductCommand(MywCommand):\n    \"\"\"\n    Engine implementing the product management command line utility\n    \"\"\"\n    # ==============================================================================\n    #                                 SHARED ARGS\n    # ==============================================================================\n    # Definition of command syntax (gets extended in operation clauses below)\n    arg_parser = argparse.ArgumentParser(\n        prog=\"myw_product\", formatter_class=MywArgparseHelpFormatter",
        "detail": "tools.myworldapp.core.server.commands.myw_product_command",
        "documentation": {}
    },
    {
        "label": "MywTilestoreCommand",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.commands.myw_tilestore_command",
        "description": "tools.myworldapp.core.server.commands.myw_tilestore_command",
        "peekOfCode": "class MywTilestoreCommand(MywCommand):\n    \"\"\"\n    Engine implementing the tilestore management command line utility\n    Example of use:\n      MywTilestoreCommand().run('tiles.sqlite','list','levels','t*')\"\"\"\n    # ==============================================================================\n    #                                 CLASS VARIABLES\n    # ==============================================================================\n    # Definition of command syntax (gets extended in operation clauses below)\n    arg_parser = argparse.ArgumentParser(",
        "detail": "tools.myworldapp.core.server.commands.myw_tilestore_command",
        "documentation": {}
    },
    {
        "label": "MywController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.base.myw_controller",
        "description": "tools.myworldapp.core.server.controllers.base.myw_controller",
        "peekOfCode": "class MywController:\n    \"\"\"\n    Superclass for controllers that manage access to myworld data\n    Provides a MywCurrentUser object for use in request authorisation (see .current_user)\"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Initialize slots if self\n        \"\"\"\n        self.request = request\n        self.current_user = MywCurrentUser(request.session, request.registry.settings)",
        "detail": "tools.myworldapp.core.server.controllers.base.myw_controller",
        "documentation": {}
    },
    {
        "label": "MywControllerProgressHandler",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.base.myw_controller_progress",
        "description": "tools.myworldapp.core.server.controllers.base.myw_controller_progress",
        "peekOfCode": "class MywControllerProgressHandler(MywSimpleProgressHandler):\n    \"\"\"\n    Progress handler that writes progress messages to a database record\n    Used to monitor progress of controller operations for reporting in client\"\"\"\n    # ENH: Rename as MywTaskProgressHandler .. and inherit direct from MywProgress\n    __tableName__ = \"configuration_task\"\n    def __init__(self, level, task_id, engine):\n        \"\"\"\n        Init slots of self\n        LEVEL is the maximum message level to log. TASK_ID is the",
        "detail": "tools.myworldapp.core.server.controllers.base.myw_controller_progress",
        "documentation": {}
    },
    {
        "label": "MywFeatureCollection",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.base.myw_feature_collection",
        "description": "tools.myworldapp.core.server.controllers.base.myw_feature_collection",
        "peekOfCode": "class MywFeatureCollection(FeatureCollection):\n    \"\"\"\n    A set of feature objects\n    Extends standard FeatureCollection to add limit and offset properties.\"\"\"\n    def __init__(self, features=None, limit=None, offset=None, unlimited_count=None, **extra):\n        \"\"\"\n        Initialize self\n        \"\"\"\n        super(MywFeatureCollection, self).__init__(features, **extra)\n        self.limit = limit",
        "detail": "tools.myworldapp.core.server.controllers.base.myw_feature_collection",
        "documentation": {}
    },
    {
        "label": "initGlobals",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "description": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "peekOfCode": "def initGlobals(app_config):\n    from myworldapp.core.server.base.db.globals import Session\n    from myworldapp.core.server.base.core.myw_progress import MywSimpleProgressHandler\n    from myworldapp.core.server.database.myw_database import MywDatabase\n    global options\n    global log_level\n    global dd_check_rate\n    global db\n    global dd\n    options = app_config.get(\"myw.feature.options\", {})",
        "detail": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "description": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "peekOfCode": "options = None\nlog_level = None\ndd_check_rate = None\ndb = None\ndd = None\ndef initGlobals(app_config):\n    from myworldapp.core.server.base.db.globals import Session\n    from myworldapp.core.server.base.core.myw_progress import MywSimpleProgressHandler\n    from myworldapp.core.server.database.myw_database import MywDatabase\n    global options",
        "detail": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "documentation": {}
    },
    {
        "label": "log_level",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "description": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "peekOfCode": "log_level = None\ndd_check_rate = None\ndb = None\ndd = None\ndef initGlobals(app_config):\n    from myworldapp.core.server.base.db.globals import Session\n    from myworldapp.core.server.base.core.myw_progress import MywSimpleProgressHandler\n    from myworldapp.core.server.database.myw_database import MywDatabase\n    global options\n    global log_level",
        "detail": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "documentation": {}
    },
    {
        "label": "dd_check_rate",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "description": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "peekOfCode": "dd_check_rate = None\ndb = None\ndd = None\ndef initGlobals(app_config):\n    from myworldapp.core.server.base.db.globals import Session\n    from myworldapp.core.server.base.core.myw_progress import MywSimpleProgressHandler\n    from myworldapp.core.server.database.myw_database import MywDatabase\n    global options\n    global log_level\n    global dd_check_rate",
        "detail": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "description": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "peekOfCode": "db = None\ndd = None\ndef initGlobals(app_config):\n    from myworldapp.core.server.base.db.globals import Session\n    from myworldapp.core.server.base.core.myw_progress import MywSimpleProgressHandler\n    from myworldapp.core.server.database.myw_database import MywDatabase\n    global options\n    global log_level\n    global dd_check_rate\n    global db",
        "detail": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "documentation": {}
    },
    {
        "label": "dd",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "description": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "peekOfCode": "dd = None\ndef initGlobals(app_config):\n    from myworldapp.core.server.base.db.globals import Session\n    from myworldapp.core.server.base.core.myw_progress import MywSimpleProgressHandler\n    from myworldapp.core.server.database.myw_database import MywDatabase\n    global options\n    global log_level\n    global dd_check_rate\n    global db\n    global dd",
        "detail": "tools.myworldapp.core.server.controllers.base.myw_globals",
        "documentation": {}
    },
    {
        "label": "featuresFromRecs",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "description": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "peekOfCode": "def featuresFromRecs(feature_recs, sorter=None, **opts):\n    \"\"\"\n    Builds a list of geojson features from FEATURE_RECS\n    OPTS are passed on to MywFeatureModel.asGeojsonFeature()\"\"\"\n    # ENH: Better as constructor on MywFeatureCollection?\n    # Avoid unnecesary work in geo_geom finding\n    if \"cache\" not in opts:\n        opts[\"cache\"] = {}\n    # Build list\n    features = []",
        "detail": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "mywAbort",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "description": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "peekOfCode": "def mywAbort(msg, **params):\n    \"\"\"\n    Abort a controller request, returning MSG and PARAMS to client\n    \"\"\"\n    # Raises a 502 with a special message tag that is interpreted by JavaScript helper\n    payload = {\"msg\": str(msg), \"params\": params}\n    raise HTTPBadGateway(\"mywAbort:\" + json.dumps(payload))\ndef data_error_tween_factory(handler, _):\n    \"\"\"Factory function for a pyramid tween, which catches SQLA DataErrors (anticipated in some\n    config pages) and retrieves the user an error message.\"\"\"",
        "detail": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "data_error_tween_factory",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "description": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "peekOfCode": "def data_error_tween_factory(handler, _):\n    \"\"\"Factory function for a pyramid tween, which catches SQLA DataErrors (anticipated in some\n    config pages) and retrieves the user an error message.\"\"\"\n    def data_error_tween(request):\n        try:\n            response = handler(request)\n        except DataError as e:\n            # myw_pyramid_app already tries to do this, but seems to miss mywAbort exceptions.\n            Session.rollback()  # pylint: disable=no-member\n            mywAbort(interpret_data_error(e))",
        "detail": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "filterFor",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "description": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "peekOfCode": "def filterFor(\n    current_user,\n    model,\n    feature_type,\n    geom_field_names,\n    world,\n    geom_wkb,\n    filter_name,\n    session_vars,\n    mode=\"intersects\",",
        "detail": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "sqlaFilterOf",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "description": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "peekOfCode": "def sqlaFilterOf(feature_type, filter_name, current_user, feature_table, session_vars):\n    \"\"\"\n    The sqlalchemy filter for FILTER_NAME of FEATURE_TYPE\n    FEATURE_TABLE is the feature's sqlalchemny table descriptor\"\"\"\n    pred = current_user.featureTypeFilter(\n        None, \"myworld\", feature_type, filter_name\n    )  # ENH: pass in application name\n    return pred.sqaFilter(feature_table, variables=session_vars)\ndef renderSpatialFilter(model, geom_field_names, world, geom_wkb, mode, dist):\n    \"\"\"",
        "detail": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "renderSpatialFilter",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "description": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "peekOfCode": "def renderSpatialFilter(model, geom_field_names, world, geom_wkb, mode, dist):\n    \"\"\"\n    Returns SQLAlchemy filter to perform spatial scan defined by args\n    \"\"\"\n    filter = None\n    for geom_field_name in geom_field_names:\n        field_filter = fieldSpatialFilter(model, geom_field_name, world, geom_wkb, mode, dist)\n        filter = field_filter if filter is None else filter | field_filter\n    return filter\ndef fieldSpatialFilter(model, geom_field_name, world, geom_wkb, mode=\"intersects\", dist=None):",
        "detail": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "fieldSpatialFilter",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "description": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "peekOfCode": "def fieldSpatialFilter(model, geom_field_name, world, geom_wkb, mode=\"intersects\", dist=None):\n    \"\"\"\n    Returns SQLAlchemy filter to perform spatial scan defined by args\n    \"\"\"\n    filter = None\n    # Add world filter\n    world_field_name = model._geom_field_info[\n        geom_field_name\n    ]  # TODO: Skip query if int and no gwn field\n    if world_field_name:",
        "detail": "tools.myworldapp.core.server.controllers.base.myw_utils",
        "documentation": {}
    },
    {
        "label": "ErrorController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.error_controller",
        "description": "tools.myworldapp.core.server.controllers.error_controller",
        "peekOfCode": "class ErrorController:\n    \"\"\"\n    Generates error page\n    @ENH: Show traceback method properly\"\"\"\n    def __init__(self, exc, request):\n        self.request = request\n        self.exc = exc\n    @exception_view_config(exc.HTTPBadGateway)\n    def bad_gateway(self):\n        return exc.HTTPBadGateway(self.exc.detail)",
        "detail": "tools.myworldapp.core.server.controllers.error_controller",
        "documentation": {}
    },
    {
        "label": "FileController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.file",
        "description": "tools.myworldapp.core.server.controllers.file",
        "peekOfCode": "class FileController:\n    \"\"\"\n    Controller for accessing module resources\n    \"\"\"\n    def __init__(self, request):\n        self.request = request\n    @view_config(route_name=\"file.serve\", request_method=\"GET\")\n    def serve(self):\n        \"\"\"\n        Returns file FILE_ID from public directory of MODULE",
        "detail": "tools.myworldapp.core.server.controllers.file",
        "documentation": {}
    },
    {
        "label": "product_mgr",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.controllers.file",
        "description": "tools.myworldapp.core.server.controllers.file",
        "peekOfCode": "product_mgr = MywProduct()\nclass FileController:\n    \"\"\"\n    Controller for accessing module resources\n    \"\"\"\n    def __init__(self, request):\n        self.request = request\n    @view_config(route_name=\"file.serve\", request_method=\"GET\")\n    def serve(self):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.controllers.file",
        "documentation": {}
    },
    {
        "label": "IndexController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.index_controller",
        "description": "tools.myworldapp.core.server.controllers.index_controller",
        "peekOfCode": "class IndexController:\n    \"\"\"\n    Controller for main myWorld page loads\n    \"\"\"\n    built_modules_require_config = False\n    def __init__(self, request):\n        \"\"\"\n        Initialize the index controller.\n        \"\"\"\n        self.request = request",
        "detail": "tools.myworldapp.core.server.controllers.index_controller",
        "documentation": {}
    },
    {
        "label": "MywApplicationController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_application_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_application_controller",
        "peekOfCode": "class MywApplicationController(MywController):\n    \"\"\"\n    Controller for accessing myw.application and substructure\n    \"\"\"\n    @view_config(\n        route_name=\"myw_application_controller.index\", request_method=\"GET\", renderer=\"json\"\n    )\n    def index(self):\n        \"\"\"\n        Returns all applications",
        "detail": "tools.myworldapp.core.server.controllers.myw_application_controller",
        "documentation": {}
    },
    {
        "label": "MywAuthController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_auth_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_auth_controller",
        "peekOfCode": "class MywAuthController(MywController):\n    \"\"\"\n    Controller for authentication requests\n    \"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Initialize slots of self\n        \"\"\"\n        MywController.__init__(self, request)\n        self.product = MywProduct()",
        "detail": "tools.myworldapp.core.server.controllers.myw_auth_controller",
        "documentation": {}
    },
    {
        "label": "MywBookmarkController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_bookmark_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_bookmark_controller",
        "peekOfCode": "class MywBookmarkController(MywController):\n    \"\"\"\n    Controller for accessing myw.bookmark\n    \"\"\"\n    @view_config(route_name=\"myw_bookmark_controller.no_id\", request_method=\"GET\", renderer=\"json\")\n    def index(self):\n        \"\"\"\n        Bookmarks owned by the current user\n        \"\"\"\n        self.current_user.assertAuthorized(self.request)",
        "detail": "tools.myworldapp.core.server.controllers.myw_bookmark_controller",
        "documentation": {}
    },
    {
        "label": "MywCRSController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_crs_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_crs_controller",
        "peekOfCode": "class MywCRSController(MywController):\n    \"\"\"\n    Controller for fetching stored CRS information\n    \"\"\"\n    @view_config(route_name=\"myw_crs_controller.list\", request_method=\"GET\", renderer=\"json\")\n    def list(self):\n        \"\"\"\n        Get settings for supported CRS defintions, stored in myw_coord_system\n        \"\"\"\n        self.current_user.assertAuthorized(self.request)",
        "detail": "tools.myworldapp.core.server.controllers.myw_crs_controller",
        "documentation": {}
    },
    {
        "label": "MywCurrentUserController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_current_user_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_current_user_controller",
        "peekOfCode": "class MywCurrentUserController(MywController):\n    \"\"\"\n    Controller returning info about the current user\n    User may not have a corresponding record in myw.user e.g. LDAP user. Info comes\n    from config cache or user properties tables (application state etc)\"\"\"\n    @view_config(\n        route_name=\"myw_current_user_controller.get_name\", request_method=\"GET\", renderer=\"json\"\n    )\n    def get_name(self):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.controllers.myw_current_user_controller",
        "documentation": {}
    },
    {
        "label": "MywDatasourceController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_datasource_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_datasource_controller",
        "peekOfCode": "class MywDatasourceController(MywController):\n    \"\"\"\n    Engine handling datasource-related requests\n    \"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Initialize the MywDatasource controller.\n        \"\"\"\n        MywController.__init__(self, request)\n        self.dd = myw_globals.dd",
        "detail": "tools.myworldapp.core.server.controllers.myw_datasource_controller",
        "documentation": {}
    },
    {
        "label": "MywDDController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_dd_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_dd_controller",
        "peekOfCode": "class MywDDController(MywController):\n    \"\"\"\n    Provides access to DD info\n    \"\"\"\n    geom_types = [\"point\", \"linestring\", \"polygon\", \"raster\"]  # ENH: get these from somewhere\n    # ==============================================================================\n    #                               SYSTEM ACTIONS\n    # ==============================================================================\n    @view_config(route_name=\"myw_dd_controller.index\", request_method=\"GET\", renderer=\"json\")\n    def index(self):",
        "detail": "tools.myworldapp.core.server.controllers.myw_dd_controller",
        "documentation": {}
    },
    {
        "label": "MywDDEnumController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_dd_enum_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_dd_enum_controller",
        "peekOfCode": "class MywDDEnumController(MywController):\n    \"\"\"\n    Controller for enumerator definition operations\n    \"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Initialize slots of self\n        \"\"\"\n        MywController.__init__(self, request)\n        self.dd = myw_globals.dd",
        "detail": "tools.myworldapp.core.server.controllers.myw_dd_enum_controller",
        "documentation": {}
    },
    {
        "label": "MywDDFeatureController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_dd_feature_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_dd_feature_controller",
        "peekOfCode": "class MywDDFeatureController(MywController):\n    \"\"\"\n    Controller for feature type definition operations\n    \"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Initialize slots of self\n        \"\"\"\n        MywController.__init__(self, request)\n        self.dd = myw_globals.dd",
        "detail": "tools.myworldapp.core.server.controllers.myw_dd_feature_controller",
        "documentation": {}
    },
    {
        "label": "DeltaController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_delta_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_delta_controller",
        "peekOfCode": "class DeltaController(MywController):\n    \"\"\"\n    Controller for performing operations on delta tables\n    \"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Initialize slots of self\n        \"\"\"\n        self.trace_level = 0  # ENH: Make configurable from .ini\n        MywController.__init__(self, request)",
        "detail": "tools.myworldapp.core.server.controllers.myw_delta_controller",
        "documentation": {}
    },
    {
        "label": "MywExportCsvController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_export_csv_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_export_csv_controller",
        "peekOfCode": "class MywExportCsvController(MywController):\n    \"\"\"\n    Controller for creating CSV exports\n    \"\"\"\n    @view_config(route_name=\"myw_export_csv_controller.generate\", request_method=\"POST\")\n    def generate(self):\n        \"\"\"\n        Write features to csv file\n        \"\"\"\n        encoding = self.request.params.get(\"encoding\")",
        "detail": "tools.myworldapp.core.server.controllers.myw_export_csv_controller",
        "documentation": {}
    },
    {
        "label": "MywExportDxfController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_export_dxf_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_export_dxf_controller",
        "peekOfCode": "class MywExportDxfController(MywController):\n    \"\"\"\n    Controller for creating DXF exports\n    \"\"\"\n    @view_config(route_name=\"myw_export_dxf_controller.generate\", request_method=\"POST\")\n    def generate(self):\n        \"\"\"\n        Write features to DXF file\n        \"\"\"\n        # check request is authorized or not",
        "detail": "tools.myworldapp.core.server.controllers.myw_export_dxf_controller",
        "documentation": {}
    },
    {
        "label": "MywExportJsonController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_export_json_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_export_json_controller",
        "peekOfCode": "class MywExportJsonController(MywController):\n    \"\"\"\n    Controller for creating GeoJSON exports\n    \"\"\"\n    @view_config(route_name=\"myw_export_json_controller.generate\", request_method=\"POST\")\n    def generate(self):\n        \"\"\"\n        Write features to json file\n        \"\"\"\n        # check request is authorized or not",
        "detail": "tools.myworldapp.core.server.controllers.myw_export_json_controller",
        "documentation": {}
    },
    {
        "label": "MywExtractController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_extract_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_extract_controller",
        "peekOfCode": "class MywExtractController(MywController):\n    \"\"\"\n    Controller for extract-related requests\n    \"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Initialize slots of self\n        \"\"\"\n        MywController.__init__(self, request)\n        self.db = MywDatabase(Session)",
        "detail": "tools.myworldapp.core.server.controllers.myw_extract_controller",
        "documentation": {}
    },
    {
        "label": "MywExtractDownloadController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_extract_download_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_extract_download_controller",
        "peekOfCode": "class MywExtractDownloadController(MywController):\n    \"\"\"\n    Controller for database extract download related requests\n    \"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Initialize slots of self\n        \"\"\"\n        MywController.__init__(self, request)\n        self.db = MywDatabase(Session)",
        "detail": "tools.myworldapp.core.server.controllers.myw_extract_download_controller",
        "documentation": {}
    },
    {
        "label": "MywFeatureController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_feature_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_feature_controller",
        "peekOfCode": "class MywFeatureController(MywController):\n    \"\"\"\n    Controller for accessing data from myWorld feature tables\n    \"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Initialize self\n        \"\"\"\n        MywController.__init__(self, request)\n        self.db = myw_globals.db",
        "detail": "tools.myworldapp.core.server.controllers.myw_feature_controller",
        "documentation": {}
    },
    {
        "label": "MywFeatureRequest",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_feature_request",
        "description": "tools.myworldapp.core.server.controllers.myw_feature_request",
        "peekOfCode": "class MywFeatureRequest:\n    \"\"\"\n    Helper for parsing a feature service request\n    Supported attribute query parameters are:\n      field=<name> & equals=<value>\n      field=<name> & like=<value>\n      filter=<myw_filter>\n      ids=<id>,<id>,...\n    Also mapfish filters:\n      queryable=<field>,<field>,...",
        "detail": "tools.myworldapp.core.server.controllers.myw_feature_request",
        "documentation": {}
    },
    {
        "label": "MywGroupController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_group_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_group_controller",
        "peekOfCode": "class MywGroupController(MywController):\n    \"\"\"\n    Controller for accessing myw.group\n    \"\"\"\n    @view_config(route_name=\"myw_group_controller.get_ids\", request_method=\"GET\", renderer=\"json\")\n    def get_ids(self):\n        \"\"\"\n        IDs of the groups of which current user is the owner or a member\n        \"\"\"\n        self.current_user.assertAuthorized(self.request)",
        "detail": "tools.myworldapp.core.server.controllers.myw_group_controller",
        "documentation": {}
    },
    {
        "label": "MywKmzController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_kmz_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_kmz_controller",
        "peekOfCode": "class MywKmzController(MywController):\n    \"\"\"\n    Controller for handling tunnelled requests for KMZ data\n    \"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Initialize self\n        \"\"\"\n        MywController.__init__(self, request)\n        settings = request.registry.settings",
        "detail": "tools.myworldapp.core.server.controllers.myw_kmz_controller",
        "documentation": {}
    },
    {
        "label": "MywLayerController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_layer_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_layer_controller",
        "peekOfCode": "class MywLayerController(MywController):\n    \"\"\"\n    Controller for myw.layer requests\n    \"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Initialize self\n        \"\"\"\n        MywController.__init__(self, request)\n        settings = request.registry.settings",
        "detail": "tools.myworldapp.core.server.controllers.myw_layer_controller",
        "documentation": {}
    },
    {
        "label": "MywLayerGroupController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_layer_group_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_layer_group_controller",
        "peekOfCode": "class MywLayerGroupController(MywController):\n    \"\"\"\n    Controller for myw.layer_group requests\n    \"\"\"\n    @view_config(\n        route_name=\"myw_layer_group_controller.index\", request_method=\"GET\", renderer=\"json\"\n    )\n    def index(self):\n        \"\"\"\n        Returns defininitions of all layers layers",
        "detail": "tools.myworldapp.core.server.controllers.myw_layer_group_controller",
        "documentation": {}
    },
    {
        "label": "MywModuleController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_module_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_module_controller",
        "peekOfCode": "class MywModuleController(MywController):\n    \"\"\"\n    Controller for accessing myw.version_stamp\n    \"\"\"\n    @view_config(route_name=\"myw_module_controller.index\", request_method=\"GET\", renderer=\"json\")\n    def index(self):\n        \"\"\"\n        return all records\n        \"\"\"\n        self.current_user.assertAuthorized(self.request)",
        "detail": "tools.myworldapp.core.server.controllers.myw_module_controller",
        "documentation": {}
    },
    {
        "label": "MywNetworkController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_network_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_network_controller",
        "peekOfCode": "class MywNetworkController(MywController):\n    \"\"\"\n    Controller for accessing myw.network\n    \"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Initialize self\n        \"\"\"\n        MywController.__init__(self, request)\n        self.db = MywDatabase(Session)",
        "detail": "tools.myworldapp.core.server.controllers.myw_network_controller",
        "documentation": {}
    },
    {
        "label": "MywNotificationController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_notification_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_notification_controller",
        "peekOfCode": "class MywNotificationController(MywController):\n    \"\"\"\n    Controller for accessing myw.notification\n    \"\"\"\n    # ==============================================================================\n    #                                CONFIG ACTIONS\n    # ==============================================================================\n    @view_config(\n        route_name=\"myw_notification_controller.no_id\", request_method=\"GET\", renderer=\"json\"\n    )",
        "detail": "tools.myworldapp.core.server.controllers.myw_notification_controller",
        "documentation": {}
    },
    {
        "label": "MywPrivateLayerController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_private_layer_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_private_layer_controller",
        "peekOfCode": "class MywPrivateLayerController(MywController):\n    \"\"\"\n    Controller for accessing myw.private_layer\n    \"\"\"\n    @view_config(\n        route_name=\"myw_private_layer_controller.no_id\", request_method=\"GET\", renderer=\"json\"\n    )\n    def index(self):\n        \"\"\"\n        The private_layers accessible to the current user",
        "detail": "tools.myworldapp.core.server.controllers.myw_private_layer_controller",
        "documentation": {}
    },
    {
        "label": "MywRenderController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "peekOfCode": "class MywRenderController(MywController):\n    \"\"\"\n    Controller for handing requests to support vector rendering\n    \"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Initialize self\n        \"\"\"\n        MywController.__init__(self, request)\n        self.db = myw_globals.db",
        "detail": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "documentation": {}
    },
    {
        "label": "renderDetailsByFeatureType",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "peekOfCode": "def renderDetailsByFeatureType(feature_item_defs, feature_types):\n    \"\"\"\n    Gather the details from layer_feature_item by feature type\n    \"\"\"\n    requested_feature_types = feature_types.split(\",\")\n    # While deleting keys from the dict might be simpler here, the defs come from the cache and we\n    # can't mutate that object.\n    defs = PropertyDict()\n    if hasattr(feature_item_defs, \"zoomRange\"):\n        defs.zoomRange = feature_item_defs.zoomRange",
        "detail": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "documentation": {}
    },
    {
        "label": "mergeFilters",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "peekOfCode": "def mergeFilters(a, b):\n    \"\"\"We need to merge filters so that all elements matched by a OR b are returned by the query.\n    Note that a and b can be:\n    * None => TRUE filter.\n    * str => one, named filter.\n    * (str, str) => two named filters already OR'd together.\n    Returns a tuple, which can be used in dict keys since it's immutable.\"\"\"\n    # ENH: use Pattern Matching to re-write this more neatly in Python 3.10 (see\n    # https://docs.python.org/3.10/whatsnew/3.10.html#pep-634-structural-pattern-matching )\n    # Shortcut if we need to match all elements:",
        "detail": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "documentation": {}
    },
    {
        "label": "mergeRenderDetails",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "peekOfCode": "def mergeRenderDetails(a, b):\n    \"\"\"Merge two render details dictionaries\"\"\"\n    # The render details are almost entirely the union of the two previous details dictionaries.\n    # Filters are different though, since they need to be OR'd, see mergeFilters for details.\n    return {\n        \"field_names\": list(set(a[\"field_names\"] + b[\"field_names\"])),\n        \"required_fields\": list(set(a[\"required_fields\"] + b[\"required_fields\"])),\n        \"min_vis\": min(a[\"min_vis\"], b[\"min_vis\"]),\n        \"max_vis\": max(a[\"max_vis\"], b[\"max_vis\"]),\n        \"filter\": mergeFilters(a[\"filter\"], b[\"filter\"]),",
        "detail": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "documentation": {}
    },
    {
        "label": "combineRenderDetails",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "peekOfCode": "def combineRenderDetails(existing_details, additional_details):\n    \"\"\"\n    Merge additional_details into existing_details. Feature details here will only need to be\n    merged if two layers being rendered together both contain the same feature type. We use\n    mergeRenderDetails if they do. This method mutates existing_details, and returns it.\n    \"\"\"\n    existing_details.update(\n        {\n            feature_type: mergeRenderDetails(\n                existing_details[feature_type], additional_details[feature_type]",
        "detail": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "documentation": {}
    },
    {
        "label": "featureRequiredAtZoom",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "peekOfCode": "def featureRequiredAtZoom(feature_details, zoomRange):\n    \"\"\"Returns Bool of whether to include the feature at the requested zoom level range.\"\"\"\n    requested_min, requested_max = zoomRange\n    return not (\n        requested_max < feature_details[\"min_vis\"] or requested_min > feature_details[\"max_vis\"]\n    )\ndef tile_coords_wgs84(x, y, z, tile_size=256):\n    \"\"\"returns the bounding box in long/lat coordinates of a tile\"\"\"\n    gm = GlobalMercator(tile_size)\n    y = pow(2, z) - 1 - y",
        "detail": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "documentation": {}
    },
    {
        "label": "tile_coords_wgs84",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "peekOfCode": "def tile_coords_wgs84(x, y, z, tile_size=256):\n    \"\"\"returns the bounding box in long/lat coordinates of a tile\"\"\"\n    gm = GlobalMercator(tile_size)\n    y = pow(2, z) - 1 - y\n    (minLat, minLon, maxLat, maxLon) = gm.TileLatLonBounds(x, y, z)  # Returns lat1,lon1,lat2,lon2\n    return [minLon, minLat, maxLon, maxLat]",
        "detail": "tools.myworldapp.core.server.controllers.myw_render_controller",
        "documentation": {}
    },
    {
        "label": "MywReplicaController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_replica_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_replica_controller",
        "peekOfCode": "class MywReplicaController(MywController):\n    \"\"\"\n    Controller for accessing myw.replica\n    \"\"\"\n    @view_config(route_name=\"myw_replica_controller.index\", request_method=\"GET\", renderer=\"json\")\n    def index(self):\n        \"\"\"\n        return all records\n        \"\"\"\n        self.current_user.assertAuthorized(self.request, application=\"config\")",
        "detail": "tools.myworldapp.core.server.controllers.myw_replica_controller",
        "documentation": {}
    },
    {
        "label": "MywRightController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_right_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_right_controller",
        "peekOfCode": "class MywRightController(MywController):\n    \"\"\"\n    Controller for accessing myw.right\n    \"\"\"\n    @view_config(route_name=\"myw_right_controller.index\", request_method=\"GET\", renderer=\"json\")\n    def index(self):\n        \"\"\"\n        return rights information\n        \"\"\"\n        # Abort if the user is not an admin",
        "detail": "tools.myworldapp.core.server.controllers.myw_right_controller",
        "documentation": {}
    },
    {
        "label": "MywRoleController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_role_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_role_controller",
        "peekOfCode": "class MywRoleController(MywController):\n    \"\"\"\n    Controller for accessing myw.role and substructure\n    \"\"\"\n    @view_config(route_name=\"myw_role_controller.no_id\", request_method=\"GET\", renderer=\"json\")\n    def index(self):\n        \"\"\"\n        return role definitions\n        \"\"\"\n        self.current_user.assertAuthorized(self.request, application=\"config\")",
        "detail": "tools.myworldapp.core.server.controllers.myw_role_controller",
        "documentation": {}
    },
    {
        "label": "MywSearchController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_search_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_search_controller",
        "peekOfCode": "class MywSearchController(MywController):\n    \"\"\"\n    Controller for Search requests\n    \"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Initialize slots of self\n        \"\"\"\n        MywController.__init__(self, request)\n        self.db = myw_globals.db",
        "detail": "tools.myworldapp.core.server.controllers.myw_search_controller",
        "documentation": {}
    },
    {
        "label": "MywSelectController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_select_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_select_controller",
        "peekOfCode": "class MywSelectController(MywController):\n    \"\"\"\n    Controller for select requests\n    \"\"\"\n    # Cache index table record exemplars (for speed)\n    models = getModels(Session, geometry_table_names)\n    non_indexed_feature_recs = getFeatureRecsWithoutIndexes(Session)\n    def __init__(self, request):\n        \"\"\"\n        Initialize self",
        "detail": "tools.myworldapp.core.server.controllers.myw_select_controller",
        "documentation": {}
    },
    {
        "label": "getModels",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.controllers.myw_select_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_select_controller",
        "peekOfCode": "def getModels(Session, tablenames):\n    \"\"\"\n    Returns dictionary of record 'exemplars' for the geom index tables\n    \"\"\"\n    # ENH: Get via driver\n    # Suppressing SQLAlchemy warnings about geographic indexes\n    with warnings.catch_warnings():\n        from sqlalchemy import exc as sa_exc\n        warnings.simplefilter(\"ignore\", category=sa_exc.SAWarning)  # ENH: Should it be SA.exc?\n        models = {}",
        "detail": "tools.myworldapp.core.server.controllers.myw_select_controller",
        "documentation": {}
    },
    {
        "label": "getFeatureRecsWithoutIndexes",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.controllers.myw_select_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_select_controller",
        "peekOfCode": "def getFeatureRecsWithoutIndexes(Session):\n    \"\"\"\n    Returns dictionary of feature table names to records, where these features are excluded from\n    the geometry index.\n    \"\"\"\n    # ENH check all geom types for features with multiple geoms and put in the \"highest\" type category.\n    recs = {\n        \"point\": {},\n        \"linestring\": {},\n        \"polygon\": {},",
        "detail": "tools.myworldapp.core.server.controllers.myw_select_controller",
        "documentation": {}
    },
    {
        "label": "geometry_table_names",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.controllers.myw_select_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_select_controller",
        "peekOfCode": "geometry_table_names = [\n    \"geo_world_point\",\n    \"geo_world_linestring\",\n    \"geo_world_polygon\",\n    \"int_world_point\",\n    \"int_world_linestring\",\n    \"int_world_polygon\",\n    \"delta_geo_world_point\",\n    \"delta_geo_world_linestring\",\n    \"delta_geo_world_polygon\",",
        "detail": "tools.myworldapp.core.server.controllers.myw_select_controller",
        "documentation": {}
    },
    {
        "label": "MywSettingController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_setting_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_setting_controller",
        "peekOfCode": "class MywSettingController(MywController):\n    \"\"\"\n    Controller for accessing myw.setting\n    \"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Initialize self\n        \"\"\"\n        MywController.__init__(self, request)\n        self.dd = myw_globals.dd",
        "detail": "tools.myworldapp.core.server.controllers.myw_setting_controller",
        "documentation": {}
    },
    {
        "label": "MywSnapshotController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_snapshot_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_snapshot_controller",
        "peekOfCode": "class MywSnapshotController(MywController):\n    \"\"\"\n    Controller for replica synchronisation requests\n    Note that sync requests do not consume a server licence (do\n    not count as a myWorld online 'user')\"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Initialize self\n        \"\"\"\n        MywController.__init__(self, request)",
        "detail": "tools.myworldapp.core.server.controllers.myw_snapshot_controller",
        "documentation": {}
    },
    {
        "label": "MywSyncController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_sync_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_sync_controller",
        "peekOfCode": "class MywSyncController(MywController):\n    \"\"\"\n    Controller for replica synchronisation requests\n    Note that sync requests do not consume a server licence (do\n    not count as a myWorld online 'user')\"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Initialize self\n        \"\"\"\n        MywController.__init__(self, request)",
        "detail": "tools.myworldapp.core.server.controllers.myw_sync_controller",
        "documentation": {}
    },
    {
        "label": "MywTableSetController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_table_set_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_table_set_controller",
        "peekOfCode": "class MywTableSetController(MywController):\n    \"\"\"\n    Controller for myw.table_set requests\n    \"\"\"\n    @view_config(route_name=\"myw_table_set_controller.no_id\", request_method=\"GET\", renderer=\"json\")\n    def index(self):\n        \"\"\"\n        Returns definitions of all table sets\n        \"\"\"\n        self.current_user.assertAuthorized(self.request, application=\"config\")",
        "detail": "tools.myworldapp.core.server.controllers.myw_table_set_controller",
        "documentation": {}
    },
    {
        "label": "MywTaskController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_task_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_task_controller",
        "peekOfCode": "class MywTaskController(MywController):\n    \"\"\"\n    Controller for accessing myw.configuration_task\n    \"\"\"\n    @view_config(route_name=\"myw_task_controller.get\", request_method=\"GET\", renderer=\"json\")\n    def get(self):\n        \"\"\"\n        Gets the status of configuration task ID\n        \"\"\"\n        id = self.request.matchdict[\"id\"]",
        "detail": "tools.myworldapp.core.server.controllers.myw_task_controller",
        "documentation": {}
    },
    {
        "label": "MywTileController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_tile_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_tile_controller",
        "peekOfCode": "class MywTileController(MywController):\n    \"\"\"\n    Controller for tile access requests\n    \"\"\"\n    @view_config(route_name=\"myw_tile_controller.get_tile\", request_method=\"GET\")\n    def get_tile(self):\n        \"\"\"\n        Entry point from the routing table.\n        UNIVERSE is usually 'geo' or 'int'. ZOOM, X and Y are the\n        Google-format address of the tile (i.e. origin top-left).\"\"\"",
        "detail": "tools.myworldapp.core.server.controllers.myw_tile_controller",
        "documentation": {}
    },
    {
        "label": "TILESTORE",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.controllers.myw_tile_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_tile_controller",
        "peekOfCode": "TILESTORE = MywDatabase(Session).tilestore()\n# Set location of the backstop tile\nBACKSTOP_TILE_PATH = os.path.abspath(\n    os.path.join(os.path.dirname(__file__), \"resources\", \"transparent_tile.png\")\n)\nclass MywTileController(MywController):\n    \"\"\"\n    Controller for tile access requests\n    \"\"\"\n    @view_config(route_name=\"myw_tile_controller.get_tile\", request_method=\"GET\")",
        "detail": "tools.myworldapp.core.server.controllers.myw_tile_controller",
        "documentation": {}
    },
    {
        "label": "BACKSTOP_TILE_PATH",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.controllers.myw_tile_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_tile_controller",
        "peekOfCode": "BACKSTOP_TILE_PATH = os.path.abspath(\n    os.path.join(os.path.dirname(__file__), \"resources\", \"transparent_tile.png\")\n)\nclass MywTileController(MywController):\n    \"\"\"\n    Controller for tile access requests\n    \"\"\"\n    @view_config(route_name=\"myw_tile_controller.get_tile\", request_method=\"GET\")\n    def get_tile(self):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.controllers.myw_tile_controller",
        "documentation": {}
    },
    {
        "label": "MywUploadDataController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_upload_data_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_upload_data_controller",
        "peekOfCode": "class MywUploadDataController(MywController):\n    \"\"\"\n    Controller for the 'upload data' config page\n    \"\"\"\n    def __init__(self, request):\n        \"\"\"\n        Init slots of self\n        \"\"\"\n        super(MywUploadDataController, self).__init__(request)\n        self.request = request",
        "detail": "tools.myworldapp.core.server.controllers.myw_upload_data_controller",
        "documentation": {}
    },
    {
        "label": "MywUsageController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_usage_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_usage_controller",
        "peekOfCode": "class MywUsageController(MywController):\n    \"\"\"\n    Controller for myw.usage\n    \"\"\"\n    @view_config(route_name=\"myw_usage_controller.settings\", request_method=\"GET\", renderer=\"json\")\n    def settings(self):\n        \"\"\"\n        Get settings from myworldapp.ini\n        \"\"\"\n        self.current_user.assertAuthorized(self.request)",
        "detail": "tools.myworldapp.core.server.controllers.myw_usage_controller",
        "documentation": {}
    },
    {
        "label": "MywUserController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_user_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_user_controller",
        "peekOfCode": "class MywUserController(MywController):\n    \"\"\"\n    Controller for accessing myw.user\n    \"\"\"\n    # ==============================================================================\n    #                                CONFIG OPERATIONS\n    # ==============================================================================\n    @view_config(route_name=\"myw_user_controller.no_id\", request_method=\"GET\", renderer=\"json\")\n    def index(self):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.controllers.myw_user_controller",
        "documentation": {}
    },
    {
        "label": "MywVersionStampController",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.controllers.myw_version_stamp_controller",
        "description": "tools.myworldapp.core.server.controllers.myw_version_stamp_controller",
        "peekOfCode": "class MywVersionStampController(MywController):\n    \"\"\"\n    Controller for accessing myw.version_stamp\n    \"\"\"\n    @view_config(\n        route_name=\"myw_version_stamp_controller.index\", request_method=\"GET\", renderer=\"json\"\n    )\n    def index(self):\n        \"\"\"\n        return all records",
        "detail": "tools.myworldapp.core.server.controllers.myw_version_stamp_controller",
        "documentation": {}
    },
    {
        "label": "add_routes",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.controllers.routing",
        "description": "tools.myworldapp.core.server.controllers.routing",
        "peekOfCode": "def add_routes(config):\n    \"\"\"\n    Add core routes to routing map MAP\n    \"\"\"\n    config.add_controller(\"error_controller\")\n    # Primary route\n    config.add_route(\"\", \"index_controller\", \"base\")\n    config.add_route(\"/index\", \"index_controller\", \"index\", setup_slash_redirector=True)\n    config.add_route(\"/{application}.html\", \"index_controller\", \"directToApplication\")\n    # Tile data access",
        "detail": "tools.myworldapp.core.server.controllers.routing",
        "documentation": {}
    },
    {
        "label": "MywConfigManager",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.database.myw_config_manager",
        "description": "tools.myworldapp.core.server.database.myw_config_manager",
        "peekOfCode": "class MywConfigManager:\n    \"\"\"\n    Provides API for accessing configuration information (layer defs etc)\n    \"\"\"\n    def __init__(self, db, progress=MywProgressHandler()):\n        \"\"\"\n        Initialise self\n        DB is a MywDatabase. Optional PROGRES_PROC(level,*msg) is a\n        callback for progress messages\"\"\"\n        self.db = db",
        "detail": "tools.myworldapp.core.server.database.myw_config_manager",
        "documentation": {}
    },
    {
        "label": "MywDatabase",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.database.myw_database",
        "description": "tools.myworldapp.core.server.database.myw_database",
        "peekOfCode": "class MywDatabase(MywRawDatabase):\n    \"\"\"\n    High-level object for manipulating the primary myWorld database\n    Provides protocols for querying and changing system\n    settings, checkpoints, version stamps, locks etc. Also\n    provides engines for loading and dumping data, manipulating\n    the DD, etc.\n    Internally, uses SQLAlchemy session and models for database access\n    *Warning*: The model classes used by this object are based on\n    global Session (not necessarily the session passed into the",
        "detail": "tools.myworldapp.core.server.database.myw_database",
        "documentation": {}
    },
    {
        "label": "MywDatabaseServer",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.database.myw_database_server",
        "description": "tools.myworldapp.core.server.database.myw_database_server",
        "peekOfCode": "class MywDatabaseServer:\n    \"\"\"\n    High level engine for communicating with a database server\n    Provides facilities for creating, deleting and opening databases\n    Internally, most work is delegated to MywDbServer. This\n    class provided mainly to isolate MywDbServer from model.\"\"\"\n    def __init__(self, db_type=None, progress=MywProgressHandler(), **args):\n        \"\"\"\n        Returns an server engine connecting using ARGS\n        For a definition of supported args, see MywDbServer\"\"\"",
        "detail": "tools.myworldapp.core.server.database.myw_database_server",
        "documentation": {}
    },
    {
        "label": "MywDatabaseUpgrade",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.database.myw_database_upgrade",
        "description": "tools.myworldapp.core.server.database.myw_database_upgrade",
        "peekOfCode": "class MywDatabaseUpgrade(MywDbUpgrade):\n    \"\"\"\n    Abstract superclass for non-core database upgrades\n    Extends MywDbUpgrade to provide an extra properties\n    .module and .db (a MywModule and MywDatabase). Also provides\n    locatisation services (see .loadResourceFile() and .localiser)\n    Sub-classes must implement:\n      .module_name        Name of module to which upgrade relates\n      .from_version       Minimum version stamp from which self can upgrade\n      .updates            List of methods to run, keyed by datamodel version no",
        "detail": "tools.myworldapp.core.server.database.myw_database_upgrade",
        "documentation": {}
    },
    {
        "label": "MywDatasourceEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.database.myw_datasource_engine",
        "description": "tools.myworldapp.core.server.database.myw_datasource_engine",
        "peekOfCode": "class MywDatasourceEngine(ABC):\n    \"\"\"\n    Engine for communicating with an external data server\n    Subclasses must implement:\n       properties()\n       all_feature_type_infos()\n       get_feature_type_def(feature_type)\n       get_feature_data(feature_type,bounds=None,geom_name=None)\n    The may also override:\n       services()\"\"\"",
        "detail": "tools.myworldapp.core.server.database.myw_datasource_engine",
        "documentation": {}
    },
    {
        "label": "MywJsonEncoder",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.database.myw_data_loader",
        "description": "tools.myworldapp.core.server.database.myw_data_loader",
        "peekOfCode": "class MywJsonEncoder(json.JSONEncoder):\n    \"\"\"\n    Extended JSON encoder handling PostgreSQL types\n    \"\"\"\n    def default(self, obj):\n        \"\"\"\n        Returns value to output for OBJ\n        \"\"\"\n        # Handle dates etc\n        if hasattr(obj, \"isoformat\"):",
        "detail": "tools.myworldapp.core.server.database.myw_data_loader",
        "documentation": {}
    },
    {
        "label": "MywDataLoader",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.database.myw_data_loader",
        "description": "tools.myworldapp.core.server.database.myw_data_loader",
        "peekOfCode": "class MywDataLoader:\n    \"\"\"\n    Engine for loading and dumping data from database\n    Provides protocols for loading and dumping feature data,\n    feature definitions, enum definitons etc.\n    \"\"\"\n    def __init__(self, db, progress=MywProgressHandler()):\n        \"\"\"\n        Init slots of self\n        DB is a myw_session_database. Optional",
        "detail": "tools.myworldapp.core.server.database.myw_data_loader",
        "documentation": {}
    },
    {
        "label": "MywEsriRestDatasourceEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.database.myw_esri_rest_datasource_engine",
        "description": "tools.myworldapp.core.server.database.myw_esri_rest_datasource_engine",
        "peekOfCode": "class MywEsriRestDatasourceEngine(MywDatasourceEngine):\n    \"\"\"\n    Engine for retrieving data from an Esri REST server\n    \"\"\"\n    # For details of the ArcGIS REST API see http://resources.arcgis.com/en/help/arcgis-rest-api/index.html\n    # Also http://gis.stackexchange.com/questions/50005/identifying-primary-key-field-of-layer-in-arcgis-server-using-arcgis-api-for-jav\n    def __init__(\n        self,\n        url,\n        username=None,",
        "detail": "tools.myworldapp.core.server.database.myw_esri_rest_datasource_engine",
        "documentation": {}
    },
    {
        "label": "MywFileDatasourceEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.database.myw_file_datasource_engine",
        "description": "tools.myworldapp.core.server.database.myw_file_datasource_engine",
        "peekOfCode": "class MywFileDatasourceEngine(MywDatasourceEngine):\n    \"\"\"\n    Engine wrapping a data file as if it were a datasource\n    \"\"\"\n    # Hack to allow myw_eds command to be used on files\n    def __init__(self, url, progress=MywProgressHandler()):\n        \"\"\"\n        Init slots of self\n        \"\"\"\n        super(MywFileDatasourceEngine, self).__init__(url, progress=progress)",
        "detail": "tools.myworldapp.core.server.database.myw_file_datasource_engine",
        "documentation": {}
    },
    {
        "label": "MywLocalisationManager",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.database.myw_localisation_manager",
        "description": "tools.myworldapp.core.server.database.myw_localisation_manager",
        "peekOfCode": "class MywLocalisationManager:\n    \"\"\"\n    Enables dumping and loading of all localisable stings\n    These are found in: applications, layers, networks, datasources, features, enums.\n    \"\"\"\n    def __init__(self, db, progress=MywProgressHandler()):\n        \"\"\"\n        Initialise self\n        DB is a MywDatabase. Optional PROGRES_PROC(level,*msg) is a\n        callback for progress messages\"\"\"",
        "detail": "tools.myworldapp.core.server.database.myw_localisation_manager",
        "documentation": {}
    },
    {
        "label": "MywLazyXmlFormatter",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.database.myw_ogc_datasource_engine",
        "description": "tools.myworldapp.core.server.database.myw_ogc_datasource_engine",
        "peekOfCode": "class MywLazyXmlFormatter:\n    \"\"\"\n    Helper for formatting XML in progress messages\n    \"\"\"\n    def __init__(self, xml_el):\n        \"\"\"\n        Init slots of self\n        \"\"\"\n        self.xml_el = xml_el\n    def __str__(self):",
        "detail": "tools.myworldapp.core.server.database.myw_ogc_datasource_engine",
        "documentation": {}
    },
    {
        "label": "MywOgcDatasourceEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.database.myw_ogc_datasource_engine",
        "description": "tools.myworldapp.core.server.database.myw_ogc_datasource_engine",
        "peekOfCode": "class MywOgcDatasourceEngine(MywDatasourceEngine):\n    \"\"\"\n    Engine for retrieving data from an OGC WFS datasource.\n    \"\"\"\n    # See http://www.opengeospatial.org/standards\n    # Support version 1.1.0\n    # A half hearted attempt is made to support 2.0.0 as well, but it is not complete.\n    # We should read the following from returned XML document, but ElementTree does not allow us to retrieve this info\n    # ENH: download and use XML.etree instead of ET ?\n    NAMESPACE = {",
        "detail": "tools.myworldapp.core.server.database.myw_ogc_datasource_engine",
        "documentation": {}
    },
    {
        "label": "MywRawDatabase",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.database.myw_raw_database",
        "description": "tools.myworldapp.core.server.database.myw_raw_database",
        "peekOfCode": "class MywRawDatabase:\n    \"\"\"\n    High-level object for manipulating a myWorld database (without using models)\n    Provides protocols for querying and changing system\n    settings etc. Does not use models\n    \"\"\"\n    # Provided because we cannot create a MywDatabase on a\n    # secondary connection of a different database type due to the\n    # way Mapfish models work. See public comment on MywDatabase\n    # for more details.",
        "detail": "tools.myworldapp.core.server.database.myw_raw_database",
        "documentation": {}
    },
    {
        "label": "MywUpgradeManager",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.database.myw_upgrade_manager",
        "description": "tools.myworldapp.core.server.database.myw_upgrade_manager",
        "peekOfCode": "class MywUpgradeManager:\n    \"\"\"\n    Engine for loading database upgrades\n    \"\"\"\n    def __init__(self, progress=MywProgressHandler()):\n        \"\"\"\n        Init slots of self\n        \"\"\"\n        self.product = MywProduct()\n        self.progress = progress",
        "detail": "tools.myworldapp.core.server.database.myw_upgrade_manager",
        "documentation": {}
    },
    {
        "label": "MywUsageStatsManager",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.database.myw_usage_stats_manager",
        "description": "tools.myworldapp.core.server.database.myw_usage_stats_manager",
        "peekOfCode": "class MywUsageStatsManager:\n    \"\"\"\n    Engine to aggregate stats from usage tables\n    \"\"\"\n    def __init__(self, progress=MywProgressHandler()):\n        \"\"\"\n        Init UsageStatsManager\n        PROGRES_PROC(level,*msg) is a callback for progress messages\"\"\"\n        self.progress = progress\n    def usageBySession(self, name_spec, start=None, end=None):",
        "detail": "tools.myworldapp.core.server.database.myw_usage_stats_manager",
        "documentation": {}
    },
    {
        "label": "MywBooleanField",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_boolean_field",
        "description": "tools.myworldapp.core.server.dd.myw_boolean_field",
        "peekOfCode": "class MywBooleanField(MywField):\n    \"\"\"\n    Wrapper for accessing an boolean field\n    \"\"\"\n    def asDbValue(self, value):\n        \"\"\"\n        Cast property VALUE to GeoAlchemy field format\n        \"\"\"\n        # Make 'None' mean 'null' in database (rather than 'use default')\n        if value is None or value == \"\":",
        "detail": "tools.myworldapp.core.server.dd.myw_boolean_field",
        "documentation": {}
    },
    {
        "label": "MywCachingFeatureView",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_caching_feature_view",
        "description": "tools.myworldapp.core.server.dd.myw_caching_feature_view",
        "peekOfCode": "class MywCachingFeatureView(MywFeatureView):\n    \"\"\"\n    A feature view with in-memory cache - for intensive read-only operations.\n    For use cases where a short-lived read-only instance is useful. This class does not prevent\n    you from writing to the database, which will invalidate its cache, so use it with\n    appropriate caution.\"\"\"\n    def __init__(self, db_view, cache_max_size=10000):\n        \"\"\"\n        Construct a Caching feature view\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.dd.myw_caching_feature_view",
        "documentation": {}
    },
    {
        "label": "MywCalculatedReferenceField",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_calculated_reference_field",
        "description": "tools.myworldapp.core.server.dd.myw_calculated_reference_field",
        "peekOfCode": "class MywCalculatedReferenceField(MywField):\n    \"\"\"\n    Wrapper for accessing a calculated reference or reference_set field\n    Provides methods for getting features\"\"\"\n    # Regex for parsing calculated field select() expression\n    select_regex = re.compile(\"^select\\((.*)\\)$\")\n    def rec(self):\n        \"\"\"\n        The feature referenced by self\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.dd.myw_calculated_reference_field",
        "documentation": {}
    },
    {
        "label": "MywConflict",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_conflict",
        "description": "tools.myworldapp.core.server.dd.myw_conflict",
        "peekOfCode": "class MywConflict:\n    \"\"\"\n    A feature-level conflict\n    Holds the delta, master and base versions of the record plus the type of\n    change made in master\"\"\"\n    def __init__(self, master_change, delta_rec, master_rec=None, base_rec=None):\n        \"\"\"\n        Init slots of self\n        \"\"\"\n        self.master_change = master_change",
        "detail": "tools.myworldapp.core.server.dd.myw_conflict",
        "documentation": {}
    },
    {
        "label": "MywDateField",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_date_field",
        "description": "tools.myworldapp.core.server.dd.myw_date_field",
        "peekOfCode": "class MywDateField(MywField):\n    \"\"\"\n    Wrapper for accessing an date field\n    \"\"\"\n    def default_format(self):\n        return \"%Y-%m-%d\"\n    def asDbValue(self, value, date_format=None):\n        \"\"\"\n        Cast property VALUE to GeoAlchemy field format\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.dd.myw_date_field",
        "documentation": {}
    },
    {
        "label": "MywDD",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_dd",
        "description": "tools.myworldapp.core.server.dd.myw_dd",
        "peekOfCode": "class MywDD:\n    \"\"\"\n    myWorld data dictionary manager\n    Provides an API for creating and modifying\n    feature type definitions (see createFeatureType(),\n    alterFeatureType(), ...). For features from the 'myworld'\n    datasource, this includes creating and mutating database\n    tables, triggers, index records etc.\n    Also manages meta-data for datasources and enumerators\"\"\"\n    # Class constants",
        "detail": "tools.myworldapp.core.server.dd.myw_dd",
        "documentation": {}
    },
    {
        "label": "MywFeatureDescriptor",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_feature_descriptor",
        "description": "tools.myworldapp.core.server.dd.myw_feature_descriptor",
        "peekOfCode": "class MywFeatureDescriptor:\n    \"\"\"\n    In-memory definition of a myWorld feature type\n    Holds name, basic properties, field definitions, groups, searches etc. Provides:\n     - Construction from, and serialisation to, .def format\n     - Convenience APIs for accessing properties (fields, key_field_names, ..)\n     - Validation\n     - Differencing\n     - Construction of table descriptor\"\"\"\n    basic_props = [",
        "detail": "tools.myworldapp.core.server.dd.myw_feature_descriptor",
        "documentation": {}
    },
    {
        "label": "MywFeatureModelMixin",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_feature_model_mixin",
        "description": "tools.myworldapp.core.server.dd.myw_feature_model_mixin",
        "peekOfCode": "class MywFeatureModelMixin(MywModelMixin):\n    \"\"\"\n    Superclass for feature models\n    Provides protocols for serialisation and de-serialisation.\n    Requires slots _view to be set on construction (see MywFeatureTable)\"\"\"\n    # Warning: Use '_' prefix to prevent clashes with record attributes e.g. ._id not .id()\n    @classmethod\n    def _key_column(self):\n        \"\"\"\n        SQAlchemy column object for self's key field",
        "detail": "tools.myworldapp.core.server.dd.myw_feature_model_mixin",
        "documentation": {}
    },
    {
        "label": "MywFeatureTable",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_feature_table",
        "description": "tools.myworldapp.core.server.dd.myw_feature_table",
        "peekOfCode": "class MywFeatureTable:\n    \"\"\"\n    Engine for accessing a records from a feature table\n    Behaviour is modelled on SQLAlchemy query.\n    \"\"\"\n    # Provided to permit sub-classing for versioned data\n    # Coordinate system is which self's geometries are stored\n    # Note: Internals geoms really in their own CS ... but coords are related to WGS84\n    # ENH: Move this to field descriptor or similar\n    coord_sys = MywCoordSystem(4326)",
        "detail": "tools.myworldapp.core.server.dd.myw_feature_table",
        "documentation": {}
    },
    {
        "label": "MywFeatureView",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_feature_view",
        "description": "tools.myworldapp.core.server.dd.myw_feature_view",
        "peekOfCode": "class MywFeatureView:\n    \"\"\"\n    Manager for accessing a specified version of the myWorld database's feature data\n    Provides facilities for accessing feature tables (.table()). Also has\n    helpers for retrieving records direct from URNs etc (.get())\"\"\"\n    # ==============================================================================\n    #                                 CONSTRUCTION\n    # ==============================================================================\n    def __init__(self, db, delta=\"\", schema=\"data\"):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.dd.myw_feature_view",
        "documentation": {}
    },
    {
        "label": "MywField",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_field",
        "description": "tools.myworldapp.core.server.dd.myw_field",
        "peekOfCode": "class MywField:\n    \"\"\"\n    Wrapper for accessing a field of a feature record\n    \"\"\"\n    # ENH: Convert to a proper SQLAlchemy field accessor?\n    def __init__(self, feature, field_name):\n        \"\"\"\n        Init slots of self\n        \"\"\"\n        self.feature = feature",
        "detail": "tools.myworldapp.core.server.dd.myw_field",
        "documentation": {}
    },
    {
        "label": "MywFieldDescriptor",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_field_descriptor",
        "description": "tools.myworldapp.core.server.dd.myw_field_descriptor",
        "peekOfCode": "class MywFieldDescriptor:\n    \"\"\"\n    In-memory definition of a myWorld feature field\n    \"\"\"\n    props = [\n        \"name\",\n        \"type\",\n        \"external_name\",\n        \"value\",\n        \"default\",",
        "detail": "tools.myworldapp.core.server.dd.myw_field_descriptor",
        "documentation": {}
    },
    {
        "label": "myw_geometry_types",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.dd.myw_field_descriptor",
        "description": "tools.myworldapp.core.server.dd.myw_field_descriptor",
        "peekOfCode": "myw_geometry_types = [\"point\", \"linestring\", \"polygon\", \"raster\"]\nclass MywFieldDescriptor:\n    \"\"\"\n    In-memory definition of a myWorld feature field\n    \"\"\"\n    props = [\n        \"name\",\n        \"type\",\n        \"external_name\",\n        \"value\",",
        "detail": "tools.myworldapp.core.server.dd.myw_field_descriptor",
        "documentation": {}
    },
    {
        "label": "MywFileField",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_file_field",
        "description": "tools.myworldapp.core.server.dd.myw_file_field",
        "peekOfCode": "class MywFileField(MywField):\n    \"\"\"\n    Wrapper for accessing an file field\n    \"\"\"\n    def asDbValue(self, value):\n        \"\"\"\n        Cast property VALUE to GeoAlchemy field format\n        \"\"\"\n        if value is None or value == \"\":\n            return null()",
        "detail": "tools.myworldapp.core.server.dd.myw_file_field",
        "documentation": {}
    },
    {
        "label": "MywGeometryField",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_geometry_field",
        "description": "tools.myworldapp.core.server.dd.myw_geometry_field",
        "peekOfCode": "class MywGeometryField(MywField):\n    \"\"\"\n    Wrapper for accessing a feature's geometry field\n    \"\"\"\n    # Name of oordinate system is which self's geometries are stored\n    # Note: Internals geoms really in their own CS ... but coords are related to WGS84\n    coord_sys = MywCoordSystem(\"epsg:4326\")\n    def asDbValue(self, value, coord_sys=None):\n        \"\"\"\n        Cast property VALUE to GeoAlchemy field format",
        "detail": "tools.myworldapp.core.server.dd.myw_geometry_field",
        "documentation": {}
    },
    {
        "label": "MywImageField",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_image_field",
        "description": "tools.myworldapp.core.server.dd.myw_image_field",
        "peekOfCode": "class MywImageField(MywField):\n    \"\"\"\n    Wrapper for accessing an image field\n    \"\"\"\n    def displayValue(self):\n        \"\"\"\n        Value to show in editor for self (if different from self's raw value)\n        Returns size of decoded image, in KB\"\"\"\n        value = self.raw_value\n        if value is None:",
        "detail": "tools.myworldapp.core.server.dd.myw_image_field",
        "documentation": {}
    },
    {
        "label": "MywNumericField",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_numeric_field",
        "description": "tools.myworldapp.core.server.dd.myw_numeric_field",
        "peekOfCode": "class MywNumericField(MywField):\n    \"\"\"\n    Wrapper for accessing an numeric field\n    \"\"\"\n    def asDbValue(self, value):\n        \"\"\"\n        Cast property VALUE to GeoAlchemy field format\n        \"\"\"\n        # Make 'None' mean 'null' in database (rather than 'use default')\n        if value is None or value == \"\":",
        "detail": "tools.myworldapp.core.server.dd.myw_numeric_field",
        "documentation": {}
    },
    {
        "label": "MywReference",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_reference",
        "description": "tools.myworldapp.core.server.dd.myw_reference",
        "peekOfCode": "class MywReference:\n    \"\"\"\n    A reference to a myWorld database object\n    Consists of a record identifier plus optional qualifiers\n    (c.f. a graph database attributed link).\n    Provides facilities for parsing from a URN string\"\"\"\n    @classmethod\n    def parseUrn(self, urn, datasource=\"myworld\", error_if_bad=False):\n        \"\"\"\n        Build a reference from a myWorld URN string (uniform resource name)",
        "detail": "tools.myworldapp.core.server.dd.myw_reference",
        "documentation": {}
    },
    {
        "label": "MywStoredReferenceField",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_stored_reference_field",
        "description": "tools.myworldapp.core.server.dd.myw_stored_reference_field",
        "peekOfCode": "class MywStoredReferenceField(MywField):\n    \"\"\"\n    Wrapper for accessing a stored reference_set, reference or foreign_key field\n    Provides methods for getting and setting values by URN or feature\"\"\"\n    # ENH: Split out sub-classes for reference, etc\n    def asDbValue(self, value):\n        \"\"\"\n        Cast property VALUE to GeoAlchemy field format\n        \"\"\"\n        # Make 'None' mean 'null' in database (rather than 'use default')",
        "detail": "tools.myworldapp.core.server.dd.myw_stored_reference_field",
        "documentation": {}
    },
    {
        "label": "MywStringField",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_string_field",
        "description": "tools.myworldapp.core.server.dd.myw_string_field",
        "peekOfCode": "class MywStringField(MywField):\n    \"\"\"\n    Wrapper for accessing an string field\n    \"\"\"\n    def asDbValue(self, value, truncate=True):\n        \"\"\"\n        Cast property VALUE to GeoAlchemy field format\n        \"\"\"\n        # Make 'None' mean 'null' in database (rather than 'use default')\n        if value is None or value == \"\":",
        "detail": "tools.myworldapp.core.server.dd.myw_string_field",
        "documentation": {}
    },
    {
        "label": "MywTimestampField",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_timestamp_field",
        "description": "tools.myworldapp.core.server.dd.myw_timestamp_field",
        "peekOfCode": "class MywTimestampField(MywField):\n    \"\"\"\n    Wrapper for accessing an timestamp field\n    \"\"\"\n    def default_format(self):\n        return \"%Y-%m-%dT%H:%M:%S.%f\"\n    def asDbValue(self, value, timestamp_format=None):\n        \"\"\"\n        Helper returning string VALUE as an object that is appropriate for the database dialect\n        This is usually a datetime object, but can be overridden by the db driver",
        "detail": "tools.myworldapp.core.server.dd.myw_timestamp_field",
        "documentation": {}
    },
    {
        "label": "MywVersionedFeatureTable",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.dd.myw_versioned_feature_table",
        "description": "tools.myworldapp.core.server.dd.myw_versioned_feature_table",
        "peekOfCode": "class MywVersionedFeatureTable(MywFeatureTable):\n    \"\"\"\n    Engine for accessing a records from a feature table, applying deltas\n    Reads data from master table and applies 'edits' from the\n    corresponding delta table. Redirects edits to the delta table\n    Has three modes of operation:\n    master merged with delta changes\n    just delta changes (by calling changes() method)\n    forward view - all deltas (by passing schema='delta' to constructor)\n    \"\"\"",
        "detail": "tools.myworldapp.core.server.dd.myw_versioned_feature_table",
        "documentation": {}
    },
    {
        "label": "MywCsvFeatureIStream",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.io.myw_csv_feature_istream",
        "description": "tools.myworldapp.core.server.io.myw_csv_feature_istream",
        "peekOfCode": "class MywCsvFeatureIStream(MywFeatureIStream):\n    \"\"\"\n    Stream yielding features from a CSV file\n    Applies myWorld CSV conventions, including heuristics for\n    constructing a primary geometry field if one is not present\n    Acts as a Python context manager\"\"\"\n    # Conventional names used to identify column(s) from which geometry is built\n    xy_fields = [(\"x\", \"y\"), (\"longitude\", \"latitude\"), (\"long\", \"lat\"), (\"long_x\", \"lat_y\")]\n    point_fields = [\"point\", \"location\", \"latlong\"]\n    linestring_fields = [\"linestring\", \"chain\", \"route\", \"path\"]",
        "detail": "tools.myworldapp.core.server.io.myw_csv_feature_istream",
        "documentation": {}
    },
    {
        "label": "MywCsvFeatureOStream",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.io.myw_csv_feature_ostream",
        "description": "tools.myworldapp.core.server.io.myw_csv_feature_ostream",
        "peekOfCode": "class MywCsvFeatureOStream(MywFeatureOStream):\n    \"\"\"\n    Stream for writing features to a CSV file\n    Creates file with header line and comma delimiters.\n    Acts as a Pyhton context manager\"\"\"\n    def __init__(\n        self,\n        file_name,\n        field_descs,\n        encoding=None,",
        "detail": "tools.myworldapp.core.server.io.myw_csv_feature_ostream",
        "documentation": {}
    },
    {
        "label": "DXFExporter",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.io.myw_dxf_exporter",
        "description": "tools.myworldapp.core.server.io.myw_dxf_exporter",
        "peekOfCode": "class DXFExporter:\n    \"\"\"Encapsulates the format details of DXF for exporting to file.\"\"\"\n    def __init__(self, outputPath=None):\n        self.outputPath = outputPath\n        self._symbols = None\n    @property\n    def symbols(self):\n        if self._symbols is None:\n            # These are copied from SymbolStyle.symbols in our JS code\n            self._symbols = {",
        "detail": "tools.myworldapp.core.server.io.myw_dxf_exporter",
        "documentation": {}
    },
    {
        "label": "rgbStrToTuple",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.io.myw_dxf_exporter",
        "description": "tools.myworldapp.core.server.io.myw_dxf_exporter",
        "peekOfCode": "def rgbStrToTuple(col):\n    if col[0] == \"#\":\n        col = col[1:]\n    return (int(\"0x\" + col[0:2], 0), int(\"0x\" + col[2:4], 0), int(\"0x\" + col[4:6], 0))\nclass DXFExporter:\n    \"\"\"Encapsulates the format details of DXF for exporting to file.\"\"\"\n    def __init__(self, outputPath=None):\n        self.outputPath = outputPath\n        self._symbols = None\n    @property",
        "detail": "tools.myworldapp.core.server.io.myw_dxf_exporter",
        "documentation": {}
    },
    {
        "label": "APP_ID",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.io.myw_dxf_exporter",
        "description": "tools.myworldapp.core.server.io.myw_dxf_exporter",
        "peekOfCode": "APP_ID = \"IQGEO\"\ndef rgbStrToTuple(col):\n    if col[0] == \"#\":\n        col = col[1:]\n    return (int(\"0x\" + col[0:2], 0), int(\"0x\" + col[2:4], 0), int(\"0x\" + col[4:6], 0))\nclass DXFExporter:\n    \"\"\"Encapsulates the format details of DXF for exporting to file.\"\"\"\n    def __init__(self, outputPath=None):\n        self.outputPath = outputPath\n        self._symbols = None",
        "detail": "tools.myworldapp.core.server.io.myw_dxf_exporter",
        "documentation": {}
    },
    {
        "label": "MywFeatureIStream",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.io.myw_feature_istream",
        "description": "tools.myworldapp.core.server.io.myw_feature_istream",
        "peekOfCode": "class MywFeatureIStream(ABC):\n    \"\"\"\n    Abstract superclass for streams yielding feature records (dicts)\n    Subclasses must implement:\n      format\n      __init__(file_name,key_name,primary_geom_name,encoding,progress)\n      __enter__()\n      __iter__()\n      __exit__()\n    Also optionally:",
        "detail": "tools.myworldapp.core.server.io.myw_feature_istream",
        "documentation": {}
    },
    {
        "label": "MywFeatureOStream",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.io.myw_feature_ostream",
        "description": "tools.myworldapp.core.server.io.myw_feature_ostream",
        "peekOfCode": "class MywFeatureOStream:\n    \"\"\"\n    Abstract superclass for streams for writing feature records\n    Subclasses must implement:\n      __init__(file_name,field_descs,encoding,...)\n      __enter__()\n      writeFeature()\n      __exit__()\"\"\"\n    @classmethod\n    def streamFor(self, filepath, field_descs, encoding=None, **file_options):",
        "detail": "tools.myworldapp.core.server.io.myw_feature_ostream",
        "documentation": {}
    },
    {
        "label": "MywFeatureStreamAnalyser",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.io.myw_feature_stream_analyser",
        "description": "tools.myworldapp.core.server.io.myw_feature_stream_analyser",
        "peekOfCode": "class MywFeatureStreamAnalyser:\n    \"\"\"\n    Engine for inferring table structure from a feature set\n    Used for dynamically creating feature tables during data import\"\"\"\n    def featureDefinitionFor(self, ftr_name, feature_strm):\n        \"\"\"\n        Analyse FEATURE_STRM and create a feature definition to support the data in ths stream\n        Returns a dict with structure similar to .def file\"\"\"\n        prop_descs = OrderedDict()\n        # Build property descriptors",
        "detail": "tools.myworldapp.core.server.io.myw_feature_stream_analyser",
        "documentation": {}
    },
    {
        "label": "MywJsonFeatureIStream",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.io.myw_json_feature_istream",
        "description": "tools.myworldapp.core.server.io.myw_json_feature_istream",
        "peekOfCode": "class MywJsonFeatureIStream(MywFeatureIStream):\n    \"\"\"\n    Stream yielding features from a GeoJSON file\n    File must contain exactly one FeatureCollection object\n    Acts as a Python context manager\"\"\"\n    def __init__(\n        self, file_name, key_name, primary_geom_name, encoding=None, progress=MywProgressHandler()\n    ):\n        \"\"\"\n        Create a stream yielding features from JSON file FILE_NAME",
        "detail": "tools.myworldapp.core.server.io.myw_json_feature_istream",
        "documentation": {}
    },
    {
        "label": "MywGeoJsonEncoder",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.io.myw_json_feature_ostream",
        "description": "tools.myworldapp.core.server.io.myw_json_feature_ostream",
        "peekOfCode": "class MywGeoJsonEncoder(geojson.GeoJSONEncoder):\n    \"\"\"\n    Extended GeoJSON encoder handling PostgreSQL types\n    \"\"\"\n    def default(self, obj):\n        \"\"\"\n        Returns value to output for OBJ\n        \"\"\"\n        # Format timestamps\n        if isinstance(obj, datetime.datetime):",
        "detail": "tools.myworldapp.core.server.io.myw_json_feature_ostream",
        "documentation": {}
    },
    {
        "label": "MywJsonFeatureOStream",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.io.myw_json_feature_ostream",
        "description": "tools.myworldapp.core.server.io.myw_json_feature_ostream",
        "peekOfCode": "class MywJsonFeatureOStream(MywFeatureOStream):\n    \"\"\"\n    Stream for writing features to a JSON file\n    Acts as a Pyhton context manager\"\"\"\n    def __init__(\n        self,\n        file_name,\n        field_descs,\n        encoding=None,\n        compact=False,",
        "detail": "tools.myworldapp.core.server.io.myw_json_feature_ostream",
        "documentation": {}
    },
    {
        "label": "MywKmlFeatureIStream",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.io.myw_kml_feature_istream",
        "description": "tools.myworldapp.core.server.io.myw_kml_feature_istream",
        "peekOfCode": "class MywKmlFeatureIStream(MywFeatureIStream):\n    \"\"\"\n    Stream yielding features from a kml or kmz file\n    Acts as a Python context manager\"\"\"\n    def __init__(self, file_name, key_name, primary_geom_name, progress=MywProgressHandler()):\n        \"\"\"\n        Create stream yielding features from file FILE_NAME\n        Input file is assumed to contain a header record\n        \"\"\"\n        super().__init__(file_name, key_name, primary_geom_name, \"KML\", progress)",
        "detail": "tools.myworldapp.core.server.io.myw_kml_feature_istream",
        "documentation": {}
    },
    {
        "label": "MywOgrFeatureIStream",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.io.myw_ogr_feature_istream",
        "description": "tools.myworldapp.core.server.io.myw_ogr_feature_istream",
        "peekOfCode": "class MywOgrFeatureIStream(MywFeatureIStream):\n    \"\"\"\n    Stream yielding features from a vector file\n    Supports shapefiles, Esri GDB, .. (see http://www.gdal.org/ogr_formats.html).\n    Determines file type from extension\n    Acts as a Python context manager\"\"\"\n    def __init__(\n        self,\n        file_name,\n        key_name,",
        "detail": "tools.myworldapp.core.server.io.myw_ogr_feature_istream",
        "documentation": {}
    },
    {
        "label": "MywOgrFeatureOStream",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.io.myw_ogr_feature_ostream",
        "description": "tools.myworldapp.core.server.io.myw_ogr_feature_ostream",
        "peekOfCode": "class MywOgrFeatureOStream(MywFeatureOStream):\n    \"\"\"\n    Stream for writing features to file via a OGR\n    Supports shapefiles, Esri GDB, .. (see .drivers).\n    Determines file type from extension\n    Acts as a Pyhton context manager\"\"\"\n    # Mapping from file extensions to driver names\n    # ENH: Get these from GDAL\n    drivers = {\n        \"shp\": \"ESRI Shapefile\",  # Esri (field name len limited, no multi-geoms)",
        "detail": "tools.myworldapp.core.server.io.myw_ogr_feature_ostream",
        "documentation": {}
    },
    {
        "label": "MywModelMixin",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.base",
        "description": "tools.myworldapp.core.server.models.base",
        "peekOfCode": "class MywModelMixin:\n    \"\"\"\n    Shared behaviour for myWorld record exemplars\n    Provides helpers for table name building etc\"\"\"\n    # ==============================================================================\n    #                              CLASS METHODS\n    # ==============================================================================\n    # These are used in model declarations\n    @classmethod\n    def dbTableName(self, schema, table):",
        "detail": "tools.myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.models.base",
        "description": "tools.myworldapp.core.server.models.base",
        "peekOfCode": "ModelBase = declarative_base(name=\"system\")\nclass MywModelMixin:\n    \"\"\"\n    Shared behaviour for myWorld record exemplars\n    Provides helpers for table name building etc\"\"\"\n    # ==============================================================================\n    #                              CLASS METHODS\n    # ==============================================================================\n    # These are used in model declarations\n    @classmethod",
        "detail": "tools.myworldapp.core.server.models.base",
        "documentation": {}
    },
    {
        "label": "MywApplication",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_application",
        "description": "tools.myworldapp.core.server.models.myw_application",
        "peekOfCode": "class MywApplication(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.application\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"application\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit field types (for SQLite)\n    id = MywModelMixin.keyColumn(\"myw\", \"application\", \"id\", Integer, generator=\"sequence\")\n    for_online_app = Column(Boolean, default=True)\n    for_native_app = Column(Boolean, default=True)",
        "detail": "tools.myworldapp.core.server.models.myw_application",
        "documentation": {}
    },
    {
        "label": "MywApplicationLayer",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_application_layer",
        "description": "tools.myworldapp.core.server.models.myw_application_layer",
        "peekOfCode": "class MywApplicationLayer(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.application_layer\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"application_layer\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    def definition(self):\n        \"\"\"\n        Return self in a serializable format\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.models.myw_application_layer",
        "documentation": {}
    },
    {
        "label": "MywApplicationState",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_application_state",
        "description": "tools.myworldapp.core.server.models.myw_application_state",
        "peekOfCode": "class MywApplicationState(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.application_state\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"application_state\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")",
        "detail": "tools.myworldapp.core.server.models.myw_application_state",
        "documentation": {}
    },
    {
        "label": "MywBaseTransactionLog",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_base_transaction_log",
        "description": "tools.myworldapp.core.server.models.myw_base_transaction_log",
        "peekOfCode": "class MywBaseTransactionLog(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.base_transaction_log\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"base_transaction_log\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")",
        "detail": "tools.myworldapp.core.server.models.myw_base_transaction_log",
        "documentation": {}
    },
    {
        "label": "MywBookmark",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_bookmark",
        "description": "tools.myworldapp.core.server.models.myw_bookmark",
        "peekOfCode": "class MywBookmark(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.bookmark\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"bookmark\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    id = MywModelMixin.keyColumn(\"myw\", \"bookmark\", \"id\", Integer, generator=\"sequence\")\n    is_private = Column(Boolean)\n    def definition(self):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.models.myw_bookmark",
        "documentation": {}
    },
    {
        "label": "MywCheckpoint",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_checkpoint",
        "description": "tools.myworldapp.core.server.models.myw_checkpoint",
        "peekOfCode": "class MywCheckpoint(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.checkpoint\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"checkpoint\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")",
        "detail": "tools.myworldapp.core.server.models.myw_checkpoint",
        "documentation": {}
    },
    {
        "label": "MywConfigurationLog",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_configuration_log",
        "description": "tools.myworldapp.core.server.models.myw_configuration_log",
        "peekOfCode": "class MywConfigurationLog(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.configuration_log\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"configuration_log\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")",
        "detail": "tools.myworldapp.core.server.models.myw_configuration_log",
        "documentation": {}
    },
    {
        "label": "MywConfigurationTask",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_configuration_task",
        "description": "tools.myworldapp.core.server.models.myw_configuration_task",
        "peekOfCode": "class MywConfigurationTask(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.configuration_task\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"configuration_task\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")",
        "detail": "tools.myworldapp.core.server.models.myw_configuration_task",
        "documentation": {}
    },
    {
        "label": "MywDatasource",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_datasource",
        "description": "tools.myworldapp.core.server.models.myw_datasource",
        "peekOfCode": "class MywDatasource(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.datasource\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"datasource\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    def set_backstops(self):\n        \"\"\"\n        Set backstop values for unpopulated fields (called on insert)\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.models.myw_datasource",
        "documentation": {}
    },
    {
        "label": "spec_field_schemas",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.models.myw_datasource",
        "description": "tools.myworldapp.core.server.models.myw_datasource",
        "peekOfCode": "spec_field_schemas = {\n    \"bing\": {\"license\": {\"type\": \"string\"}},\n    \"built_in\": {},\n    \"esri\": {\n        \"url\": {\"type\": \"string\"},\n        \"esriServerType\": {\"type\": \"string\", \"values\": [\"\", \"MapServer\", \"FeatureServer\"]},\n        \"verifySsl\": {\"type\": \"boolean\"},\n        \"username\": {\"type\": \"string\"},\n        \"password\": {\"type\": \"string\"},\n        \"authType\": {\"type\": \"string\", \"values\": [\"\", \"token\", \"ntlm\"]},",
        "detail": "tools.myworldapp.core.server.models.myw_datasource",
        "documentation": {}
    },
    {
        "label": "MywDDEnum",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_dd_enum",
        "description": "tools.myworldapp.core.server.models.myw_dd_enum",
        "peekOfCode": "class MywDDEnum(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.dd_enum\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"dd_enum\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit field types (for SQLite)\n    name = MywModelMixin.keyColumn(\"myw\", \"dd_enum\", \"id\", String(100))\n    @property\n    def value_recs(self):",
        "detail": "tools.myworldapp.core.server.models.myw_dd_enum",
        "documentation": {}
    },
    {
        "label": "MywDDEnumValue",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_dd_enum_value",
        "description": "tools.myworldapp.core.server.models.myw_dd_enum_value",
        "peekOfCode": "class MywDDEnumValue(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.application\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"dd_enum_value\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    id = MywModelMixin.keyColumn(\"myw\", \"dd_enum_value\", \"id\", Integer, generator=\"sequence\")",
        "detail": "tools.myworldapp.core.server.models.myw_dd_enum_value",
        "documentation": {}
    },
    {
        "label": "MywDDFeature",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_dd_feature",
        "description": "tools.myworldapp.core.server.models.myw_dd_feature",
        "peekOfCode": "class MywDDFeature(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.dd_feature\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"dd_feature\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit column types (for SQLite)\n    id = MywModelMixin.keyColumn(\"myw\", \"dd_feature\", \"id\", Integer, generator=\"sequence\")\n    editable = Column(Boolean, default=False)\n    track_changes = Column(Boolean, default=True)",
        "detail": "tools.myworldapp.core.server.models.myw_dd_feature",
        "documentation": {}
    },
    {
        "label": "MywDDField",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_dd_field",
        "description": "tools.myworldapp.core.server.models.myw_dd_field",
        "peekOfCode": "class MywDDField(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.dd_field\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"dd_field\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit field types (for SQLite)\n    id = MywModelMixin.keyColumn(\"myw\", \"dd_field\", \"id\", Integer, generator=\"sequence\")\n    indexed = Column(Boolean)\n    validators = Column(JSON(none_as_null=True))",
        "detail": "tools.myworldapp.core.server.models.myw_dd_field",
        "documentation": {}
    },
    {
        "label": "MywDDFieldGroup",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_dd_field_group",
        "description": "tools.myworldapp.core.server.models.myw_dd_field_group",
        "peekOfCode": "class MywDDFieldGroup(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.dd_field_group\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"dd_field_group\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit field types (for SQLite)\n    id = MywModelMixin.keyColumn(\"myw\", \"dd_field_group\", \"id\", Integer, generator=\"sequence\")\n    is_expanded = Column(Boolean, default=False)\n    def substructure(self):",
        "detail": "tools.myworldapp.core.server.models.myw_dd_field_group",
        "documentation": {}
    },
    {
        "label": "MywDDFieldGroupItem",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_dd_field_group_item",
        "description": "tools.myworldapp.core.server.models.myw_dd_field_group_item",
        "peekOfCode": "class MywDDFieldGroupItem(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.dd_field_group_item\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"dd_field_group_item\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit field types (for SQLite)\n    id = MywModelMixin.keyColumn(\"myw\", \"dd_field_group_item\", \"id\", Integer, generator=\"sequence\")",
        "detail": "tools.myworldapp.core.server.models.myw_dd_field_group_item",
        "documentation": {}
    },
    {
        "label": "MywDeltaSearchString",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_delta_search_string",
        "description": "tools.myworldapp.core.server.models.myw_delta_search_string",
        "peekOfCode": "class MywDeltaSearchString(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.search_string\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"delta_search_string\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")",
        "detail": "tools.myworldapp.core.server.models.myw_delta_search_string",
        "documentation": {}
    },
    {
        "label": "MywDeltaTransactionLog",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_delta_transaction_log",
        "description": "tools.myworldapp.core.server.models.myw_delta_transaction_log",
        "peekOfCode": "class MywDeltaTransactionLog(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.delta_transaction_log\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"delta_transaction_log\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")",
        "detail": "tools.myworldapp.core.server.models.myw_delta_transaction_log",
        "documentation": {}
    },
    {
        "label": "MywExtract",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_extract",
        "description": "tools.myworldapp.core.server.models.myw_extract",
        "peekOfCode": "class MywExtract(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.extract\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"extract\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        if \"name\" in kwargs:\n            name = kwargs[\"name\"]",
        "detail": "tools.myworldapp.core.server.models.myw_extract",
        "documentation": {}
    },
    {
        "label": "MywExtractConfig",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_extract_config",
        "description": "tools.myworldapp.core.server.models.myw_extract_config",
        "peekOfCode": "class MywExtractConfig(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.extract_config\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"extract_config\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")",
        "detail": "tools.myworldapp.core.server.models.myw_extract_config",
        "documentation": {}
    },
    {
        "label": "MywExtractKey",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_extract_key",
        "description": "tools.myworldapp.core.server.models.myw_extract_key",
        "peekOfCode": "class MywExtractKey(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.extract_key\n    Note that this is kept separate from the extract info, as we don't want to include this in created extracts\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"extract_key\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")",
        "detail": "tools.myworldapp.core.server.models.myw_extract_key",
        "documentation": {}
    },
    {
        "label": "MywFilter",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_filter",
        "description": "tools.myworldapp.core.server.models.myw_filter",
        "peekOfCode": "class MywFilter(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.filter\n    Substructure of myw.dd_feature defining a predicate for use in layer filtering\"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"filter\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit field types (for SQLite)\n    id = MywModelMixin.keyColumn(\"myw\", \"filter\", \"id\", Integer, generator=\"sequence\")\n    def definition(self):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.models.myw_filter",
        "documentation": {}
    },
    {
        "label": "MywGroup",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_group",
        "description": "tools.myworldapp.core.server.models.myw_group",
        "peekOfCode": "class MywGroup(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.group\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"group\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    def definition(self):\n        \"\"\"\n        Return self in a serializable format\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.models.myw_group",
        "documentation": {}
    },
    {
        "label": "MywGroupItem",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_group_item",
        "description": "tools.myworldapp.core.server.models.myw_group_item",
        "peekOfCode": "class MywGroupItem(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.bookmark\n    \"\"\"\n    # ENH: Better as MywGroupMember?\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"group_item\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit column types (for SQLite)\n    manager = Column(Boolean)",
        "detail": "tools.myworldapp.core.server.models.myw_group_item",
        "documentation": {}
    },
    {
        "label": "MywLayer",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_layer",
        "description": "tools.myworldapp.core.server.models.myw_layer",
        "peekOfCode": "class MywLayer(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.layer\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"layer\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit field types (for SQLite)\n    id = MywModelMixin.keyColumn(\"myw\", \"layer\", \"id\", Integer, generator=\"sequence\")\n    def set_backstops(self):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.models.myw_layer",
        "documentation": {}
    },
    {
        "label": "spec_field_schemas",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.models.myw_layer",
        "description": "tools.myworldapp.core.server.models.myw_layer",
        "peekOfCode": "spec_field_schemas = {\n    \"bing\": {\"mapType\": {\"type\": \"string\", \"values\": [\"Road\", \"Aerial\", \"AerialWithLabels\"]}},\n    \"built_in\": {\n        \"mapType\": {\"type\": \"string\", \"values\": [\"Blank\", \"Tile IDs\"]},\n        \"tileSize\": {\"type\": \"number\"},\n        \"maxTileZoom\": {\"type\": \"number\"},\n    },\n    \"esri\": {\n        \"esriMap\": {\"type\": \"string\"},\n        \"jsClass\": {\"type\": \"string\"},",
        "detail": "tools.myworldapp.core.server.models.myw_layer",
        "documentation": {}
    },
    {
        "label": "MywLayerFeatureItem",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_layer_feature_item",
        "description": "tools.myworldapp.core.server.models.myw_layer_feature_item",
        "peekOfCode": "class MywLayerFeatureItem(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.layer_feature_item\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"layer_feature_item\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    @property\n    def layer_rec(self):\n        \"\"\"\n        The layer record to which self relates",
        "detail": "tools.myworldapp.core.server.models.myw_layer_feature_item",
        "documentation": {}
    },
    {
        "label": "MywLayerGroup",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_layer_group",
        "description": "tools.myworldapp.core.server.models.myw_layer_group",
        "peekOfCode": "class MywLayerGroup(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.layer_group\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"layer_group\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit field types (for SQLite)\n    id = MywModelMixin.keyColumn(\"myw\", \"layer_group\", \"id\", Integer, generator=\"sequence\")\n    exclusive = Column(Boolean)\n    def set_backstops(self):",
        "detail": "tools.myworldapp.core.server.models.myw_layer_group",
        "documentation": {}
    },
    {
        "label": "MywLayerGroupItem",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_layer_group_item",
        "description": "tools.myworldapp.core.server.models.myw_layer_group_item",
        "peekOfCode": "class MywLayerGroupItem(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.layer_group_item\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"layer_group_item\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")",
        "detail": "tools.myworldapp.core.server.models.myw_layer_group_item",
        "documentation": {}
    },
    {
        "label": "MywNetwork",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_network",
        "description": "tools.myworldapp.core.server.models.myw_network",
        "peekOfCode": "class MywNetwork(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.network\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"network\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit field types (for SQLite)\n    directed = Column(Boolean)\n    def set_backstops(self):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.models.myw_network",
        "documentation": {}
    },
    {
        "label": "MywNetworkFeatureItem",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_network_feature_item",
        "description": "tools.myworldapp.core.server.models.myw_network_feature_item",
        "peekOfCode": "class MywNetworkFeatureItem(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.network_feature_item\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"network_feature_item\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")",
        "detail": "tools.myworldapp.core.server.models.myw_network_feature_item",
        "documentation": {}
    },
    {
        "label": "MywNotification",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_notification",
        "description": "tools.myworldapp.core.server.models.myw_notification",
        "peekOfCode": "class MywNotification(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.notification\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"notification\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit field types (for Oracle & SQLite)\n    id = MywModelMixin.keyColumn(\"myw\", \"notification\", \"id\", Integer, generator=\"sequence\")\n    for_online_app = Column(Boolean, default=True)\n    for_native_app = Column(Boolean, default=True)",
        "detail": "tools.myworldapp.core.server.models.myw_notification",
        "documentation": {}
    },
    {
        "label": "MywPermission",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_permission",
        "description": "tools.myworldapp.core.server.models.myw_permission",
        "peekOfCode": "class MywPermission(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.permission\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"permission\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit column types (for SQLite)\n    restrictions = Column(\"restrictions\", type_=JSON(none_as_null=True), default=None)\n    def assertValid(self, warnings_progress=None):\n        # None is always valid.",
        "detail": "tools.myworldapp.core.server.models.myw_permission",
        "documentation": {}
    },
    {
        "label": "MywPrivateLayer",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_private_layer",
        "description": "tools.myworldapp.core.server.models.myw_private_layer",
        "peekOfCode": "class MywPrivateLayer(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.user_group\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"private_layer\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    def definition(self, include_id=False):\n        \"\"\"\n        Return self in a serializable format\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.models.myw_private_layer",
        "documentation": {}
    },
    {
        "label": "MywQuery",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_query",
        "description": "tools.myworldapp.core.server.models.myw_query",
        "peekOfCode": "class MywQuery(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.query\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"query\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit field types (for SQLite)\n    id = MywModelMixin.keyColumn(\"myw\", \"query\", \"id\", Integer, generator=\"sequence\")\n    def definition(self):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.models.myw_query",
        "documentation": {}
    },
    {
        "label": "MywReplica",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_replica",
        "description": "tools.myworldapp.core.server.models.myw_replica",
        "peekOfCode": "class MywReplica(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.replica\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"replica\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    def definition(self):\n        \"\"\"\n        Return self in a serializable format\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.models.myw_replica",
        "documentation": {}
    },
    {
        "label": "MywReplicaShard",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_replica_shard",
        "description": "tools.myworldapp.core.server.models.myw_replica_shard",
        "peekOfCode": "class MywReplicaShard(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.replica_shard\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"replica_shard\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    @property\n    def n_ids(self):\n        \"\"\"\n        The number of IDs in self",
        "detail": "tools.myworldapp.core.server.models.myw_replica_shard",
        "documentation": {}
    },
    {
        "label": "MywRight",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_right",
        "description": "tools.myworldapp.core.server.models.myw_right",
        "peekOfCode": "class MywRight(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.right\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"right\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit field types (for SQLite)\n    id = MywModelMixin.keyColumn(\"myw\", \"right\", \"id\", Integer, generator=\"sequence\")\n    config = Column(Boolean)\n    # Note: role property is defined in myw_permission through a relationship backref",
        "detail": "tools.myworldapp.core.server.models.myw_right",
        "documentation": {}
    },
    {
        "label": "MywRole",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_role",
        "description": "tools.myworldapp.core.server.models.myw_role",
        "peekOfCode": "class MywRole(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.role\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"role\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit field types (for SQLite)\n    id = MywModelMixin.keyColumn(\"myw\", \"role\", \"id\", Integer, generator=\"sequence\")\n    @staticmethod\n    def application_rights_join(Session):",
        "detail": "tools.myworldapp.core.server.models.myw_role",
        "documentation": {}
    },
    {
        "label": "MywSearchRule",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_search_rule",
        "description": "tools.myworldapp.core.server.models.myw_search_rule",
        "peekOfCode": "class MywSearchRule(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.search_rule\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"search_rule\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit field types (for SQLite)\n    id = MywModelMixin.keyColumn(\"myw\", \"search_rule\", \"id\", Integer, generator=\"sequence\")\n    match_mid = Column(Boolean)\n    def definition(self):",
        "detail": "tools.myworldapp.core.server.models.myw_search_rule",
        "documentation": {}
    },
    {
        "label": "MywSearchString",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_search_string",
        "description": "tools.myworldapp.core.server.models.myw_search_string",
        "peekOfCode": "class MywSearchString(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.search_string\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"search_string\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")",
        "detail": "tools.myworldapp.core.server.models.myw_search_string",
        "documentation": {}
    },
    {
        "label": "MywSetting",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_setting",
        "description": "tools.myworldapp.core.server.models.myw_setting",
        "peekOfCode": "class MywSetting(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.setting\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"setting\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    def definition(self):\n        \"\"\"\n        Return self in a serializable format\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.models.myw_setting",
        "documentation": {}
    },
    {
        "label": "MywTableSet",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_table_set",
        "description": "tools.myworldapp.core.server.models.myw_table_set",
        "peekOfCode": "class MywTableSet(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.table_set\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"table_set\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # ==============================================================================\n    #                                 SUBSTRUCTURE\n    # ==============================================================================\n    @property",
        "detail": "tools.myworldapp.core.server.models.myw_table_set",
        "documentation": {}
    },
    {
        "label": "MywTableSetLayerItem",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_table_set_layer_item",
        "description": "tools.myworldapp.core.server.models.myw_table_set_layer_item",
        "peekOfCode": "class MywTableSetLayerItem(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.table_set_layer_item\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"table_set_layer_item\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit column types (for SQLite)\n    on_demand = Column(Boolean)\n    updates = Column(Boolean)\n    @property",
        "detail": "tools.myworldapp.core.server.models.myw_table_set_layer_item",
        "documentation": {}
    },
    {
        "label": "MywTableSetTileFileItem",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_table_set_tile_file_item",
        "description": "tools.myworldapp.core.server.models.myw_table_set_tile_file_item",
        "peekOfCode": "class MywTableSetTileFileItem(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.table_set_tile_file_item\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"table_set_tile_file_item\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit column types (for SQLite)\n    on_demand = Column(Boolean)\n    updates = Column(Boolean)\n    clip = Column(Boolean)",
        "detail": "tools.myworldapp.core.server.models.myw_table_set_tile_file_item",
        "documentation": {}
    },
    {
        "label": "MywTransactionLog",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_transaction_log",
        "description": "tools.myworldapp.core.server.models.myw_transaction_log",
        "peekOfCode": "class MywTransactionLog(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.transaction_log\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"transaction_log\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")",
        "detail": "tools.myworldapp.core.server.models.myw_transaction_log",
        "documentation": {}
    },
    {
        "label": "MywUsage",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_usage",
        "description": "tools.myworldapp.core.server.models.myw_usage",
        "peekOfCode": "class MywUsage(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.bookmark\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"usage\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    id = MywModelMixin.keyColumn(\"myw\", \"usage\", \"id\", Integer, generator=\"sequence\")\n    @property\n    def item_recs(self):\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.models.myw_usage",
        "documentation": {}
    },
    {
        "label": "MywUsageItem",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_usage_item",
        "description": "tools.myworldapp.core.server.models.myw_usage_item",
        "peekOfCode": "class MywUsageItem(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.bookmark\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"usage_item\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    def definition(self):\n        \"\"\"\n        Return self in a serializable format\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.models.myw_usage_item",
        "documentation": {}
    },
    {
        "label": "MywUser",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_user",
        "description": "tools.myworldapp.core.server.models.myw_user",
        "peekOfCode": "class MywUser(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.user\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"user\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    # Set explicit field types (for SQLite)\n    id = MywModelMixin.keyColumn(\"myw\", \"user\", \"id\", Integer, generator=\"sequence\")\n    locked_out = Column(Boolean)\n    @property",
        "detail": "tools.myworldapp.core.server.models.myw_user",
        "documentation": {}
    },
    {
        "label": "MywUserRole",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_user_role",
        "description": "tools.myworldapp.core.server.models.myw_user_role",
        "peekOfCode": "class MywUserRole(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.user_role\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"user_role\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")",
        "detail": "tools.myworldapp.core.server.models.myw_user_role",
        "documentation": {}
    },
    {
        "label": "MywVersionStamp",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.models.myw_version_stamp",
        "description": "tools.myworldapp.core.server.models.myw_version_stamp",
        "peekOfCode": "class MywVersionStamp(ModelBase, MywModelMixin):\n    \"\"\"\n    Record exemplar for myw.version_stamp\n    \"\"\"\n    __tablename__ = MywModelMixin.dbTableName(\"myw\", \"version_stamp\")\n    __table_args__ = MywModelMixin.dbTableArgs(\"myw\")\n    def definition(self):\n        \"\"\"\n        Return self in a serializable format\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.models.myw_version_stamp",
        "documentation": {}
    },
    {
        "label": "MywGraphNetworkEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.networks.myw_graph_network_engine",
        "description": "tools.myworldapp.core.server.networks.myw_graph_network_engine",
        "peekOfCode": "class MywGraphNetworkEngine(MywNetworkEngine):\n    \"\"\"\n    A network engine operating on a 'simple graph' connectivity model\n    In this model each feature is link and holds a direct\n    reference to its upstream and downstream connections. The\n    names of the fields holding the references are configured\n    via the network definition.\"\"\"\n    def rootNode(self, urn, direction):\n        \"\"\"\n        Create the start node for URN",
        "detail": "tools.myworldapp.core.server.networks.myw_graph_network_engine",
        "documentation": {}
    },
    {
        "label": "MywNetworkEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.networks.myw_network_engine",
        "description": "tools.myworldapp.core.server.networks.myw_network_engine",
        "peekOfCode": "class MywNetworkEngine(ABC):\n    \"\"\"\n    Abstract superclass for network tracing engines\n    Constructed from a network definition, which defines the feature\n    types that constitute the network and how their connectivity\n    is obtained. Provides functions for trace out and shortest\n    path.\n    Subclasses must implement:\n      rootNode(self,urn,direction)\n      connectedNodes(self,node,direction,root_node)",
        "detail": "tools.myworldapp.core.server.networks.myw_network_engine",
        "documentation": {}
    },
    {
        "label": "MywTopoNetworkEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.networks.myw_topo_network_engine",
        "description": "tools.myworldapp.core.server.networks.myw_topo_network_engine",
        "peekOfCode": "class MywTopoNetworkEngine(MywNetworkEngine):\n    \"\"\"\n    A network engine operating on a hidden link-node connectivity model\n    In this model connectivity between features is represented\n    using a hidden layer of links and nodes. This permits\n    interrupted links. Top level features store references to\n    their 'upsteram' and 'downstream' nodes. The link and node\n    features store a reference the user level feature that\n    'owns' them.\n    \"\"\"",
        "detail": "tools.myworldapp.core.server.networks.myw_topo_network_engine",
        "documentation": {}
    },
    {
        "label": "MywTopoTraceNode",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.networks.myw_topo_trace_node",
        "description": "tools.myworldapp.core.server.networks.myw_topo_trace_node",
        "peekOfCode": "class MywTopoTraceNode(MywTraceNode):\n    \"\"\"\n    A node in a hidden link-node connectivity model trace result\n    Adds extra properties:\n      topo_node   Topological node at which self ends\n      topo_link   Topological link that self represents\n    Note: After consolidation, a node may represent a sequence\n    of connected topological links along the same feature of\n    which topo_link is the last (see .tidy())\"\"\"\n    def __init__(self, feature, dist, topo_node, parent=None, topo_link=None):",
        "detail": "tools.myworldapp.core.server.networks.myw_topo_trace_node",
        "documentation": {}
    },
    {
        "label": "MywTraceNode",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.networks.myw_trace_node",
        "description": "tools.myworldapp.core.server.networks.myw_trace_node",
        "peekOfCode": "class MywTraceNode:\n    \"\"\"\n    A node in a network trace result\n    Represents both the trace node and its incoming link. The\n    exception is the root node, which has no incoming link.\n    Has properties:\n      .feature   Feature record\n      .dist      Total distance to root node of trace (in m)\n      .parent    Previous node in the trace tree (None for root node)\n      .children  Next nodes in the trace tree",
        "detail": "tools.myworldapp.core.server.networks.myw_trace_node",
        "documentation": {}
    },
    {
        "label": "MywDirectSyncEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.replication.myw_direct_sync_engine",
        "description": "tools.myworldapp.core.server.replication.myw_direct_sync_engine",
        "peekOfCode": "class MywDirectSyncEngine(MywSyncEngine):\n    \"\"\"\n    Sync engine that operates via direct access to the sync share and master database\n    \"\"\"\n    def __init__(self, sync_root, master_db_connect_info=None, **opts):\n        \"\"\"\n        Init slots of self\n        SYNC_ROOT is location of the root of the sync\n        tree. Optional MASTER_DB_CONNECT_INFO is a dict defining\n        PostgreSQL connection info for master database\"\"\"",
        "detail": "tools.myworldapp.core.server.replication.myw_direct_sync_engine",
        "documentation": {}
    },
    {
        "label": "MywExtractEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.replication.myw_extract_engine",
        "description": "tools.myworldapp.core.server.replication.myw_extract_engine",
        "peekOfCode": "class MywExtractEngine:\n    \"\"\"\n    Engine for creating an extract of a myWorld database to sqlite\n    \"\"\"\n    def __init__(self, master_db, progress=MywProgressHandler(), encryption_key=None):\n        \"\"\"\n        Init slots of self\n        \"\"\"\n        self.master_db = master_db\n        self.progress = progress",
        "detail": "tools.myworldapp.core.server.replication.myw_extract_engine",
        "documentation": {}
    },
    {
        "label": "MywExtractFilter",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.replication.myw_extract_filter",
        "description": "tools.myworldapp.core.server.replication.myw_extract_filter",
        "peekOfCode": "class MywExtractFilter:\n    \"\"\"\n    Helper class for database extraction operations\n    Builds feature type lists, tilestore mappings, select\n    queries etc based on selected extract region and\n    table_set. Also defines backstop behaviour when those are\n    not specified.\n    \"\"\"\n    def __init__(\n        self,",
        "detail": "tools.myworldapp.core.server.replication.myw_extract_filter",
        "documentation": {}
    },
    {
        "label": "MywExtractReplicationEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.replication.myw_extract_replication_engine",
        "description": "tools.myworldapp.core.server.replication.myw_extract_replication_engine",
        "peekOfCode": "class MywExtractReplicationEngine(MywReplicationEngine):\n    \"\"\"\n    Engine for performing replication operations on a extract database\n    \"\"\"\n    def __init__(\n        self,\n        db,\n        remote_username=None,\n        remote_password=None,\n        ignore_sync_url=False,",
        "detail": "tools.myworldapp.core.server.replication.myw_extract_replication_engine",
        "documentation": {}
    },
    {
        "label": "MywHttpSyncEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.replication.myw_http_sync_engine",
        "description": "tools.myworldapp.core.server.replication.myw_http_sync_engine",
        "peekOfCode": "class MywHttpSyncEngine:\n    \"\"\"\n    Sync engine that operates via myWorld REST API requests\n    USERNAME and PASSWORD are used to authenticate the server\n    REST requests i.e. identify a myWorld user\"\"\"\n    def __init__(self, sync_url, username, password, **opts):\n        \"\"\"\n        Init slots of self\n        \"\"\"\n        super(MywHttpSyncEngine, self).__init__(**opts)",
        "detail": "tools.myworldapp.core.server.replication.myw_http_sync_engine",
        "documentation": {}
    },
    {
        "label": "MywMasterReplicationEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.replication.myw_master_replication_engine",
        "description": "tools.myworldapp.core.server.replication.myw_master_replication_engine",
        "peekOfCode": "class MywMasterReplicationEngine(MywReplicationEngine):\n    \"\"\"\n    Engine for performing replication operations on a master database\n    Provides protocols for initialising the database, creating\n    an extract, registering a replica and exporting/importing updates\"\"\"\n    def __init__(self, db, db_type=None, **opts):\n        \"\"\"\n        Init slots of self\n        DB is a MywDatabase. See super for details of opts\"\"\"\n        progress = opts.pop(\"progress\", MywProgressHandler())",
        "detail": "tools.myworldapp.core.server.replication.myw_master_replication_engine",
        "documentation": {}
    },
    {
        "label": "MywReplicationEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.replication.myw_replication_engine",
        "description": "tools.myworldapp.core.server.replication.myw_replication_engine",
        "peekOfCode": "class MywReplicationEngine(ABC):\n    \"\"\"\n    Abstract superclass for replication engines\n    Provides helpers for loading data, putting/getting updates etc\"\"\"\n    # Names of settings whose changes are not propagated in exports\n    excluded_settings = [\n        \"replication.extract_type\",  # These have different values in extract\n        \"replica_id\",\n        \"replication.replica_id_hwm\",  # These are specific to master DB\n        \"replication.replica_shard_lwm\",",
        "detail": "tools.myworldapp.core.server.replication.myw_replication_engine",
        "documentation": {}
    },
    {
        "label": "databaseType",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.replication.myw_replication_engine",
        "description": "tools.myworldapp.core.server.replication.myw_replication_engine",
        "peekOfCode": "def databaseType(db):\n    \"\"\"\n    String giving database type ('non-initialised', 'master', 'extract' or 'replica')\n    \"\"\"\n    db_type = db.setting(\"replication.replica_id\") or \"non-initialised\"\n    if fnmatch.fnmatch(db_type, \"replica*\"):\n        db_type = \"replica\"\n    return db_type\nclass MywReplicationEngine(ABC):\n    \"\"\"",
        "detail": "tools.myworldapp.core.server.replication.myw_replication_engine",
        "documentation": {}
    },
    {
        "label": "MywSnapshotEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.replication.myw_snapshot_engine",
        "description": "tools.myworldapp.core.server.replication.myw_snapshot_engine",
        "peekOfCode": "class MywSnapshotEngine:\n    \"\"\"\n    Engine to create an on-demand extract\n    \"\"\"\n    def __init__(self, db, snapshots_dir, progress=MywProgressHandler()):\n        \"\"\"\n        Init slots of self\n        DB is a MywDatabase. SNAPSHOTS_DIR is the root directory\n        under which snapshots will be created\"\"\"\n        self.db = db",
        "detail": "tools.myworldapp.core.server.replication.myw_snapshot_engine",
        "documentation": {}
    },
    {
        "label": "MywSyncEngine",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.replication.myw_sync_engine",
        "description": "tools.myworldapp.core.server.replication.myw_sync_engine",
        "peekOfCode": "class MywSyncEngine:\n    \"\"\"\n    Abstract superclass for replication sync engines\n    A sync engine provides an API for registering a replica,\n    downloading and uploading files. Provided to allow extracts\n    and replicas to sync via VPN or HTTP requests\n    Subclasses must implement:\n      .register(extract_type,owner,location,n_ids)\n      .pendingUpdates(since_id,*path)\n      .downloadFile(sync_dir,local_dir,file_name)",
        "detail": "tools.myworldapp.core.server.replication.myw_sync_engine",
        "documentation": {}
    },
    {
        "label": "Globals",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.startup.app_globals",
        "description": "tools.myworldapp.core.server.startup.app_globals",
        "peekOfCode": "class Globals:\n    \"\"\"\n    Container for objects available throughout the life of the application\n    \"\"\"\n    def __init__(self, config):\n        \"\"\"\n        One instance of Globals is created during application\n        initialization and is available during requests via the\n        'app_globals' variable\n        \"\"\"",
        "detail": "tools.myworldapp.core.server.startup.app_globals",
        "documentation": {}
    },
    {
        "label": "MywPyramidApp",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.startup.myw_pyramid_app",
        "description": "tools.myworldapp.core.server.startup.myw_pyramid_app",
        "peekOfCode": "class MywPyramidApp:\n    \"\"\"\n    The Pyramid application object\n    Subclassed to support loading custom controllers from myWorld modules\n    \"\"\"\n    def __init__(self, config):\n        self.config = config\n        self._controllers_to_load = []\n        session_factory = session_factory_from_settings(self.config)\n        with PyramidConfig(settings=self.config, session_factory=session_factory) as config:",
        "detail": "tools.myworldapp.core.server.startup.myw_pyramid_app",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.startup.myw_pyramid_app",
        "description": "tools.myworldapp.core.server.startup.myw_pyramid_app",
        "peekOfCode": "log = logging.getLogger(\"myworldapp\")\nclass MywPyramidApp:\n    \"\"\"\n    The Pyramid application object\n    Subclassed to support loading custom controllers from myWorld modules\n    \"\"\"\n    def __init__(self, config):\n        self.config = config\n        self._controllers_to_load = []\n        session_factory = session_factory_from_settings(self.config)",
        "detail": "tools.myworldapp.core.server.startup.myw_pyramid_app",
        "documentation": {}
    },
    {
        "label": "IsDebugPredicate",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.startup.myw_pyramid_app_config",
        "description": "tools.myworldapp.core.server.startup.myw_pyramid_app_config",
        "peekOfCode": "class IsDebugPredicate:\n    def __init__(self, val, config):\n        self.val = val\n    def text(self):\n        return \"is_debug = %s\" % (self.val,)\n    phash = text\n    def __call__(self, context, request):\n        return request.registry.settings.get(\"pyramid.debug_all\", False) == self.val\n# Subscriber to remove the current session once a request is fulfilled\ndef on_new_response(response):",
        "detail": "tools.myworldapp.core.server.startup.myw_pyramid_app_config",
        "documentation": {}
    },
    {
        "label": "on_new_response",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.startup.myw_pyramid_app_config",
        "description": "tools.myworldapp.core.server.startup.myw_pyramid_app_config",
        "peekOfCode": "def on_new_response(response):\n    Session.remove()\ndef includeme(config):\n    #  Setup custom predicates that we can use to show different errors if they're on debug mode or not\n    config.add_route_predicate(\"is_debug\", IsDebugPredicate)\n    config.add_view_predicate(\"is_debug\", IsDebugPredicate)\n    # Close the session on any response\n    config.add_subscriber(on_new_response, NewResponse)",
        "detail": "tools.myworldapp.core.server.startup.myw_pyramid_app_config",
        "documentation": {}
    },
    {
        "label": "includeme",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.startup.myw_pyramid_app_config",
        "description": "tools.myworldapp.core.server.startup.myw_pyramid_app_config",
        "peekOfCode": "def includeme(config):\n    #  Setup custom predicates that we can use to show different errors if they're on debug mode or not\n    config.add_route_predicate(\"is_debug\", IsDebugPredicate)\n    config.add_view_predicate(\"is_debug\", IsDebugPredicate)\n    # Close the session on any response\n    config.add_subscriber(on_new_response, NewResponse)",
        "detail": "tools.myworldapp.core.server.startup.myw_pyramid_app_config",
        "documentation": {}
    },
    {
        "label": "addprioritysitedir",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.startup.myw_python_mods",
        "description": "tools.myworldapp.core.server.startup.myw_python_mods",
        "peekOfCode": "def addprioritysitedir(sitedir, known_paths=None):\n    \"\"\"Add 'sitedir' argument to sys.path if missing and handle .pth files in\n    'sitedir'\"\"\"\n    if known_paths is None:\n        known_paths = site._init_pathinfo()\n        reset = 1\n    else:\n        reset = 0\n    sitedir, sitedircase = site.makepath(sitedir)\n    if not sitedircase in known_paths:",
        "detail": "tools.myworldapp.core.server.startup.myw_python_mods",
        "documentation": {}
    },
    {
        "label": "injectsqlite3dll",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.startup.myw_python_mods",
        "description": "tools.myworldapp.core.server.startup.myw_python_mods",
        "peekOfCode": "def injectsqlite3dll():\n    global sqlite3_handler\n    if sqlite3_handler is None:\n        if sys.platform == \"win32\":\n            import ctypes\n            from myworldapp.core.server.base.system.myw_product import MywProduct\n            dll_path = os.path.join(\n                MywProduct().root_dir, \"Externals\", \"win32\", \"DLLs\", \"sqlite3.dll\"\n            )\n            sqlite3_handler = ctypes.cdll.LoadLibrary(dll_path)",
        "detail": "tools.myworldapp.core.server.startup.myw_python_mods",
        "documentation": {}
    },
    {
        "label": "configure_geojson_lib",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.startup.myw_python_mods",
        "description": "tools.myworldapp.core.server.startup.myw_python_mods",
        "peekOfCode": "def configure_geojson_lib():\n    # This file is imported by every entry point. We put this configuration here, at import time, so it\n    # affects every instance (server, tools, etc)\n    import geojson.geometry\n    geojson.geometry.DEFAULT_PRECISION = 16",
        "detail": "tools.myworldapp.core.server.startup.myw_python_mods",
        "documentation": {}
    },
    {
        "label": "sqlite3_handler",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.startup.myw_python_mods",
        "description": "tools.myworldapp.core.server.startup.myw_python_mods",
        "peekOfCode": "sqlite3_handler = None\ndef injectsqlite3dll():\n    global sqlite3_handler\n    if sqlite3_handler is None:\n        if sys.platform == \"win32\":\n            import ctypes\n            from myworldapp.core.server.base.system.myw_product import MywProduct\n            dll_path = os.path.join(\n                MywProduct().root_dir, \"Externals\", \"win32\", \"DLLs\", \"sqlite3.dll\"\n            )",
        "detail": "tools.myworldapp.core.server.startup.myw_python_mods",
        "documentation": {}
    },
    {
        "label": "MywRoutingHandler",
        "kind": 6,
        "importPath": "tools.myworldapp.core.server.startup.myw_routing_handler",
        "description": "tools.myworldapp.core.server.startup.myw_routing_handler",
        "peekOfCode": "class MywRoutingHandler:\n    def __init__(self, config):\n        self.config = config\n        self.prefix = \"\"\n        self.controllers = []\n    def add_renderer(self, *args):\n        \"\"\"passthrough add_renderer calls\"\"\"\n        self.config.add_renderer(*args)\n    def add_route(self, url, controller, route_name, setup_slash_redirector=False, **kwargs):\n        self.add_controller(controller)",
        "detail": "tools.myworldapp.core.server.startup.myw_routing_handler",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "tools.myworldapp.core.server.startup.myw_routing_handler",
        "description": "tools.myworldapp.core.server.startup.myw_routing_handler",
        "peekOfCode": "log = logging.getLogger(\"myworldapp\")\n# Class that acts as a bridge between the old routing.py files and the pyramid controller loading method\nclass MywRoutingHandler:\n    def __init__(self, config):\n        self.config = config\n        self.prefix = \"\"\n        self.controllers = []\n    def add_renderer(self, *args):\n        \"\"\"passthrough add_renderer calls\"\"\"\n        self.config.add_renderer(*args)",
        "detail": "tools.myworldapp.core.server.startup.myw_routing_handler",
        "documentation": {}
    },
    {
        "label": "make_app",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.startup.startup",
        "description": "tools.myworldapp.core.server.startup.startup",
        "peekOfCode": "def make_app(global_conf, full_stack=True, static_files=True, **app_conf):\n    \"\"\"\n    Init the application. Main entry point for server initialisation.\n    Gets called from WSGI. Declared as main entry point in egg.\n    GLOBAL_CONF\n       The inherited configuration for this application. Normally from\n       the [DEFAULT] section of the Paste ini file.\n    FULL_STACK\n       Whether this application provides a full WSGI stack (by default,\n       meaning it handles its own exceptions and errors). Disable",
        "detail": "tools.myworldapp.core.server.startup.startup",
        "documentation": {}
    },
    {
        "label": "init_environment",
        "kind": 2,
        "importPath": "tools.myworldapp.core.server.startup.startup",
        "description": "tools.myworldapp.core.server.startup.startup",
        "peekOfCode": "def init_environment(global_conf, app_conf, static_files):\n    \"\"\"\n    Init the Pyramid environment\n    \"\"\"\n    # Configure pyramid paths\n    root = os.path.dirname(\n        os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n    )\n    app_conf[\"pyramid.debug_all\"] = asbool(global_conf[\"debug\"])\n    app_conf[\"pyramid.paths\"] = dict(",
        "detail": "tools.myworldapp.core.server.startup.startup",
        "documentation": {}
    },
    {
        "label": "product_root_dir",
        "kind": 5,
        "importPath": "tools.myw_db",
        "description": "tools.myw_db",
        "peekOfCode": "product_root_dir = os.getenv(\"MYW_PRODUCT_ROOT_DIR\")\nif product_root_dir:\n    site.addsitedir(product_root_dir)\n# Add myWorld modules to module search path and ensure they have priority over default python paths\nfrom myworldapp.core.server.startup.myw_python_mods import addprioritysitedir\nsite_dirs = os.getenv(\"MYW_PYTHON_SITE_DIRS\")\nif site_dirs:\n    for site_dir in site_dirs.split(\";\"):\n        addprioritysitedir(site_dir)\n# Patch sqlite DLL on windows.",
        "detail": "tools.myw_db",
        "documentation": {}
    },
    {
        "label": "site_dirs",
        "kind": 5,
        "importPath": "tools.myw_db",
        "description": "tools.myw_db",
        "peekOfCode": "site_dirs = os.getenv(\"MYW_PYTHON_SITE_DIRS\")\nif site_dirs:\n    for site_dir in site_dirs.split(\";\"):\n        addprioritysitedir(site_dir)\n# Patch sqlite DLL on windows.\nfrom myworldapp.core.server.startup.myw_python_mods import injectsqlite3dll, configure_geojson_lib\ninjectsqlite3dll()\nconfigure_geojson_lib()\n# Load code\nfrom myworldapp.core.server.commands.myw_db_command import MywDbCommand",
        "detail": "tools.myw_db",
        "documentation": {}
    },
    {
        "label": "product_root_dir",
        "kind": 5,
        "importPath": "tools.myw_eds",
        "description": "tools.myw_eds",
        "peekOfCode": "product_root_dir = os.getenv(\"MYW_PRODUCT_ROOT_DIR\")\nif product_root_dir:\n    site.addsitedir(product_root_dir)\n# Add myWorld modules to module search path and ensure they have priority over default python paths\nfrom myworldapp.core.server.startup.myw_python_mods import addprioritysitedir\nsite_dirs = os.getenv(\"MYW_PYTHON_SITE_DIRS\")\nif site_dirs:\n    for site_dir in site_dirs.split(\";\"):\n        addprioritysitedir(site_dir)\nfrom myworldapp.core.server.startup.myw_python_mods import configure_geojson_lib",
        "detail": "tools.myw_eds",
        "documentation": {}
    },
    {
        "label": "site_dirs",
        "kind": 5,
        "importPath": "tools.myw_eds",
        "description": "tools.myw_eds",
        "peekOfCode": "site_dirs = os.getenv(\"MYW_PYTHON_SITE_DIRS\")\nif site_dirs:\n    for site_dir in site_dirs.split(\";\"):\n        addprioritysitedir(site_dir)\nfrom myworldapp.core.server.startup.myw_python_mods import configure_geojson_lib\nconfigure_geojson_lib()\n# Load code\nfrom myworldapp.core.server.commands.myw_eds_command import MywEdsCommand\n# Run command\nMywEdsCommand().run(*sys.argv[1:])",
        "detail": "tools.myw_eds",
        "documentation": {}
    },
    {
        "label": "product_root_dir",
        "kind": 5,
        "importPath": "tools.myw_product",
        "description": "tools.myw_product",
        "peekOfCode": "product_root_dir = os.getenv(\"MYW_PRODUCT_ROOT_DIR\")\nif product_root_dir:\n    site.addsitedir(product_root_dir)\n# Add myWorld modules to module search path and ensure they have priority over default python paths\nfrom myworldapp.core.server.startup.myw_python_mods import addprioritysitedir\nsite_dirs = os.getenv(\"MYW_PYTHON_SITE_DIRS\")\nif site_dirs:\n    for site_dir in site_dirs.split(\";\"):\n        addprioritysitedir(site_dir)\n# NOTE: most commands will import a fix/monkey patch for geojson here, in case it is used in the",
        "detail": "tools.myw_product",
        "documentation": {}
    },
    {
        "label": "site_dirs",
        "kind": 5,
        "importPath": "tools.myw_product",
        "description": "tools.myw_product",
        "peekOfCode": "site_dirs = os.getenv(\"MYW_PYTHON_SITE_DIRS\")\nif site_dirs:\n    for site_dir in site_dirs.split(\";\"):\n        addprioritysitedir(site_dir)\n# NOTE: most commands will import a fix/monkey patch for geojson here, in case it is used in the\n# command. However, myw_product has a mode which _installs_ geojson, and none of its other modes\n# use it. So we are safe to skip. All other commands should apply the fix.\n# Load code\nfrom myworldapp.core.server.commands.myw_product_command import MywProductCommand\n# Run command",
        "detail": "tools.myw_product",
        "documentation": {}
    },
    {
        "label": "product_root_dir",
        "kind": 5,
        "importPath": "tools.myw_tilestore",
        "description": "tools.myw_tilestore",
        "peekOfCode": "product_root_dir = os.getenv(\"MYW_PRODUCT_ROOT_DIR\")\nif product_root_dir:\n    site.addsitedir(product_root_dir)\n# Add myWorld modules to module search path and ensure they have priority over default python paths\nfrom myworldapp.core.server.startup.myw_python_mods import addprioritysitedir\nsite_dirs = os.getenv(\"MYW_PYTHON_SITE_DIRS\")\nif site_dirs:\n    for site_dir in site_dirs.split(\";\"):\n        addprioritysitedir(site_dir)\nfrom myworldapp.core.server.startup.myw_python_mods import configure_geojson_lib",
        "detail": "tools.myw_tilestore",
        "documentation": {}
    },
    {
        "label": "site_dirs",
        "kind": 5,
        "importPath": "tools.myw_tilestore",
        "description": "tools.myw_tilestore",
        "peekOfCode": "site_dirs = os.getenv(\"MYW_PYTHON_SITE_DIRS\")\nif site_dirs:\n    for site_dir in site_dirs.split(\";\"):\n        addprioritysitedir(site_dir)\nfrom myworldapp.core.server.startup.myw_python_mods import configure_geojson_lib\nconfigure_geojson_lib()\n# Load code\nfrom myworldapp.core.server.commands.myw_tilestore_command import MywTilestoreCommand\n# Run command\nMywTilestoreCommand().run(*sys.argv[1:])",
        "detail": "tools.myw_tilestore",
        "documentation": {}
    },
    {
        "label": "load_config",
        "kind": 2,
        "importPath": "utils.config_loader",
        "description": "utils.config_loader",
        "peekOfCode": "def load_config(file_path):\n    with open(file_path, 'r', encoding='utf-8') as f:\n        return json.load(f)",
        "detail": "utils.config_loader",
        "documentation": {}
    },
    {
        "label": "get_mssql_conn",
        "kind": 2,
        "importPath": "utils.db_connections",
        "description": "utils.db_connections",
        "peekOfCode": "def get_mssql_conn(config):\n    conn_str = (\n        f\"DRIVER={{ODBC Driver 17 for SQL Server}};\"\n        f\"SERVER={config['host']},{config['port']};\"\n        f\"DATABASE={config['database']};\"\n        f\"UID={config['user']};\"\n        f\"PWD={config['password']}\"\n    )\n    return pyodbc.connect(conn_str)\ndef get_postgres_conn(config):",
        "detail": "utils.db_connections",
        "documentation": {}
    },
    {
        "label": "get_postgres_conn",
        "kind": 2,
        "importPath": "utils.db_connections",
        "description": "utils.db_connections",
        "peekOfCode": "def get_postgres_conn(config):\n    return psycopg2.connect(\n        host=config['host'],\n        port=config['port'],\n        dbname=config['database'],\n        user=config['user'],\n        password=config['password']\n    )",
        "detail": "utils.db_connections",
        "documentation": {}
    },
    {
        "label": "handle_def_file_and_create_table",
        "kind": 2,
        "importPath": "utils.def_handler",
        "description": "utils.def_handler",
        "peekOfCode": "def handle_def_file_and_create_table(source_path, target_db_config, table_name, logger):\n    try:\n        command = [\n            \"python\", \"tools/myw_db.py\", \"myproj\", \"load\", source_path,\n            \"--update\",\n            \"--host\", target_db_config[\"host\"],\n            \"--port\", str(target_db_config[\"port\"]),\n            \"--username\", target_db_config[\"user\"],\n            \"--password\", target_db_config[\"password\"]\n        ]",
        "detail": "utils.def_handler",
        "documentation": {}
    },
    {
        "label": "run_etl_for_table",
        "kind": 2,
        "importPath": "utils.etl_executor",
        "description": "utils.etl_executor",
        "peekOfCode": "def run_etl_for_table(mssql_conn, pg_conn, table_config, chunk_size, logger):\n    try:\n        mssql_cursor = mssql_conn.cursor()\n        pg_cursor = pg_conn.cursor()\n        query = table_config[\"join_query\"]\n        target_schema = table_config[\"target_schema\"]\n        target_table = table_config[\"target_table\"]\n        full_target = f\"{target_schema}.{target_table}\"\n        logger.info(f\"Running query for table: {full_target}\")\n        mssql_cursor.execute(query)",
        "detail": "utils.etl_executor",
        "documentation": {}
    },
    {
        "label": "setup_logger",
        "kind": 2,
        "importPath": "utils.logger",
        "description": "utils.logger",
        "peekOfCode": "def setup_logger(log_folder):\n    if not os.path.exists(log_folder):\n        os.makedirs(log_folder)\n    log_filename = os.path.join(log_folder, f\"etl_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log\")\n    logger = logging.getLogger(\"ETLLogger\")\n    logger.setLevel(logging.INFO)\n    file_handler = logging.FileHandler(log_filename)\n    console_handler = logging.StreamHandler()\n    formatter = logging.Formatter(\"%(asctime)s [%(levelname)s] %(message)s\")\n    file_handler.setFormatter(formatter)",
        "detail": "utils.logger",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "etl_runner",
        "description": "etl_runner",
        "peekOfCode": "def main():\n    config = load_config(\"config.json\")\n    logger = setup_logger(config[\"log_folder\"])\n    mssql_conn = get_mssql_conn(config[\"source_database\"])\n    pg_conn = get_postgres_conn(config[\"target_database\"])\n    for table_config in config[\"tables\"]:\n        logger.info(\"🚀 Starting ETL for: %s.%s\", table_config['target_schema'], table_config['target_table'])\n        def_file_name = table_config[\"def_file_name\"]\n        source_def_path = os.path.join(config[\"def_file_folder\"][\"source_path\"], def_file_name)\n        # Create table directly using .def file from source path",
        "detail": "etl_runner",
        "documentation": {}
    }
]